{
  "resourceType": "Binary",
  "id": "P0522-ADIMMD-2020PACP-BinaryCDA",
  "meta": {
    "versionId": "1",
    "lastUpdated": "2022-04-26T16:56:33.000+00:00",
    "source": "#3XsKYg5Kvdv2k2FX"
  },
  "contentType": "text/xml",
  "data": "<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="CDA.xsl"?>
<ClinicalDocument xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:hl7-org:v3" xmlns:sdtc="urn:hl7-org:sdtc">
  <realmCode code="US" />
  <typeId root="2.16.840.1.113883.1.3" extension="POCD_HD000040" />
  <templateId root="2.16.840.1.113883.10.20.29.1" extension="2015-08-01" />
  <templateId root="2.16.840.1.113883.4.823.1.2.1" extension="2016-07-01" />
  <templateId root="2.16.840.1.113883.4.823.1.1.1" extension="2016-07-01" />
  <id root="2.16.840.1.113883.3.3208.101.4.8.1" extension="20130607100315-CCDA-CCD-801" />
  <code code="81334-5" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Personal advance care plan" />
  <title mediaType="text/plain" representation="TXT">Personal Advance Care Plan Document (Version 1)</title>
  <effectiveTime value="20200501142534-0600" />
  <confidentialityCode code="N" codeSystem="2.16.840.1.113883.5.25" displayName="normal" />
  <languageCode code="en-US" />
  <setId root="2.16.840.1.113883.3.3208.101.737" extension="20130607100315-CCDA-678" />
  <versionNumber value="1" />
  <recordTarget>
    <patientRole>
      <id root="2.16.840.1.113883.4.823.1" extension="87f37989294a408897aacd1fc5d8fd16" />
      <addr use="HP">
        <streetAddressLine partType="SAL">111 Maple Court</streetAddressLine>
        <city partType="CTY">San Antonio</city>
        <state partType="STA">TX</state>
        <postalCode partType="ZIP">78212</postalCode>
        <country partType="CNT">US</country>
      </addr>
      <telecom value="mailto:BetsySJ@example.com" use="HP" />
      <patient classCode="PSN" determinerCode="INSTANCE">
        <name use="L">
          <given partType="GIV">Betsy</given>
          <family partType="FAM">Smith-Johnson</family>
        </name>
        <administrativeGenderCode code="F" codeSystem="2.16.840.1.113883.5.1" codeSystemName="AdministrativeGender" displayName="Female" />
        <birthTime value="19501115" />
        <maritalStatusCode nullFlavor="NI" />
        <religiousAffiliationCode>
          <originalText mediaType="text/plain" language="en-US">Catholic</originalText>
        </religiousAffiliationCode>
        <raceCode nullFlavor="NI" />
        <ethnicGroupCode nullFlavor="NI" />
        <languageCommunication>
          <languageCode code="eng" />
          <modeCode nullFlavor="NI" />
          <proficiencyLevelCode nullFlavor="NI" />
          <preferenceInd value="true" />
        </languageCommunication>
      </patient>
    </patientRole>
  </recordTarget>
  <author>
    <functionCode code="116154003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMEDCT" displayName="Patient (person)"/>
    <time value="20200501142534-0600" />
    <assignedAuthor>
      <id root="2.16.840.1.113883.4.6" extension="66666" />
      <id root="2.16.840.1.113883.4.823.1" extension="87f37989294a408897aacd1fc5d8fd16" />
      <code code="ONESELF" codeSystem="2.16.840.1.113883.5.111" codeSystemName="RoleCode" displayName="Self" />
      <addr use="HP">
        <streetAddressLine partType="SAL">111 Maple Court</streetAddressLine>
        <city partType="CTY">San Antonio</city>
        <state partType="STA">TX</state>
        <postalCode partType="ZIP">78212</postalCode>
        <country partType="CNT">US</country>
      </addr>
      <assignedPerson classCode="PSN" determinerCode="INSTANCE">
        <name use="L">
          <given partType="GIV">Betsy</given>
          <family partType="FAM">Smith-Johnson</family>
        </name>
      </assignedPerson>
    </assignedAuthor>
  </author>
   <dataEnterer>
    <assignedEntity>
      <id root="2.16.840.1.113883.4.6" extension="66666" />
      <code code="ONESELF" codeSystem="2.16.840.1.113883.5.111" codeSystemName="RoleCode" displayName="Self">
        <originalText mediaType="text/plain" language="en-US" />
      </code>
      <addr use="HP">
        <streetAddressLine partType="SAL">111 Maple Court</streetAddressLine>
        <city partType="CTY">San Antonio</city>
        <state partType="STA">TX</state>
        <postalCode partType="ZIP">78212</postalCode>
        <country partType="CNT">US</country>
      </addr>
      <telecom value="mailto:BetsySJ@example.com" use="HP" />
      <assignedPerson classCode="PSN" determinerCode="INSTANCE">
        <name use="L">
          <given partType="GIV">Betsy</given>
          <family partType="FAM">Smith-Johnson</family>
        </name>
      </assignedPerson>
    </assignedEntity>
  </dataEnterer>
  <custodian>
    <assignedCustodian>
      <representedCustodianOrganization>
        <id extension="44444" root="6b7db8a2-1c53-42aa-b4c4-c49c05406f97"/>
        <name>ADVault Inc</name>
        <telecom use="WP" value="tel:+1(202)776-7700"/>
        <addr use="WP">
          <streetAddressLine partType="SAL">740 E. Campbell Rd. Suite 825</streetAddressLine>
          <city partType="CTY">Richardson</city>
          <state partType="STA">TX</state>
          <postalCode partType="ZIP">75081</postalCode>
          <country partType="CNT">US</country>
        </addr>
      </representedCustodianOrganization>
    </assignedCustodian>
  </custodian>
  <participant typeCode="DEV">
    <functionCode code="assembler" codeSystem="2.16.840.1.113883.4.642.4.1131" codeSystemName="ProvenanceParticipationFunction"/>
    <time value="20200501142534-0600"/>
    <associatedEntity classCode="OWN">
      <scopingOrganization>
        <id extension="44444" root="6b7db8a2-1c53-42aa-b4c4-c49c05406f97"/>
        <name use="L">ADVault, Inc.</name>
        <telecom use="WP" value="tel:+1(202)776-7700"/>
        <addr use="WP">
          <streetAddressLine partType="SAL">740 E. Campbell Rd. Suite 825</streetAddressLine>
          <city partType="CTY">Richardson</city>
          <state partType="STA">TX</state>
          <postalCode partType="ZIP">75081</postalCode>
          <country partType="CNT">US</country>
        </addr>
      </scopingOrganization>
    </associatedEntity>
  </participant>
  <component>
    <structuredBody>
          <component>
            <section>
              <templateId root="2.16.840.1.113883.4.823.1.3.3" extension="2016-07-01" />
              <code code="81335-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Healthcare agent" />
              <title mediaType="text/plain" representation="TXT" language="en-US">Appointment of a Primary Healthcare Agent and Alternate Healthcare Agents</title>
              <text><paragraph>IF THIS PART OF THE uADD™ IS LEFT BLANK, I DO NOT WANT TO DESIGNATE A<br />HEALTHCARE AGENT AT THIS TIME, AND I DO NOT WANT A<br />DEFAULT HEALTHCARE AGENT DESIGNATED FOR ME UNDER APPLICABLE LAW. <br />I TRUST THE DOCTORS AND NURSES TREATING ME TO MAKE<br />MEDICAL TREATMENT DECISIONS REGARDING MY TREATMENT AND CARE.</paragraph>

    <paragraph>I am appointing the person or persons below as my healthcare agent and, if applicable, as my alternate healthcare agent(s), and I am granting to each of them the legal authority to make medical treatment decisions on my behalf and to consult with my physician and others.  The power to make medical treatment decisions that I am granting to my healthcare agent(s) is expressly subject to, and limited by, the choices that I have expressed elsewhere in my uADD.  If my medical treatment choices are not clear, I am authorizing and directing my healthcare agent to make decisions in my best interests and based on what is known of my wishes.</paragraph>
            <content ID="HealthAgent1">
                    <content styleCode="Bold">Primary Healthcare Agent</content><br />
                    <content ID="HealthAgent1Type">The person I choose as my Primary Healthcare Agent is:</content><br />
                <content styleCode="Answer">
                        <content ID="HealthAgent1Person">
        Charles Johnson
            <content ID="HealthAgent1Rel">(Son)</content>
    </content><br />
        <content ID="HealthAgent1Email">
            CharlesSJ@example.com
        </content><br />
        <content ID="HealthAgent1SelectedDate">
            [SELECTED to act as a healthcare agent on 3/29/2021, at 2:25 PM CDT]
        </content><br />
        <content ID="HealthAgent1AcceptanceDate" styleCode="RedAnswer">
            [ACCEPTED to act as a healthcare agent on 4/1/2021, at 3:39 PM CDT]
        </content><br />

                </content>
            </content><br />
            <content ID="HealthAgent2">
                    <content styleCode="Bold" ID="HealthAgent2Type">First Alternate Healthcare Agent</content><br />
                    <content ID="HealthAgent2Powers">If this healthcare agent is unable or unwilling to make medical treatment decisions for me, or if my spouse is designated as my primary healthcare agent and our marriage is annulled, or we are divorced or legally separated, then my next choice for a healthcare agent is:</content><br />
                <content styleCode="Answer">
                        <content ID="HealthAgent2Person">
        Debra Johnson
            <content ID="HealthAgent2Rel">(Daughter)</content>
    </content><br />
        <content ID="HealthAgent2Email">
            DebraSJ@example.com
        </content><br />
        <content ID="HealthAgent2SelectedDate">
            [SELECTED to act as a healthcare agent on 3/29/2021, at 2:25 PM CDT]
        </content><br />
        <content ID="HealthAgent2AcceptanceDate" styleCode="RedAnswer">
            [As of 4/1/2021, at 3:40 PM CDT, a response is still PENDING]
        </content><br />

                </content>
            </content><br />
        <content ID="HCA_1">
            <content ID="HCA_1_Q" styleCode="Bold">
                My Healthcare Agent’s General Authority
            </content><br />
            <content ID="HCA_1_PL">
                    <content>Subject to my medical treatment choices expressed elsewhere in this uADD™ and applicable law that requires otherwise, I grant to my healthcare agent the power to make all choices and medical treatment decisions for me.</content>

            </content>
        </content><br />
    <content ID="HCA_2">
        <content ID="HCA_2_C">
            If I cannot express my own wishes for medical treatment,
        </content>
        <content ID="HCA_2_PL">
            I would like the doctors treating me, as well as my healthcare agent if I have chosen one, to make decisions based as much as possible and appropriate on my instructions below.
        </content>
    </content>
        <content ID="HCA_3" styleCode="Answer">
            <content ID="HCA_3_C">
                If at some point in the future I am declared incompetent,
            </content>
            <content ID="HCA_3_PL">
                I DO NOT want to be allowed to override these preferences. I want my doctors to follow the preferences I express in this document.            </content>
        </content><br /><br />
    <content ID="HCA_4">
        <content ID="HCA_4_PL">
            Unless I have stated otherwise somewhere else in this uADD™, I understand that my healthcare agent may reconsider my medical treatment choices expressed above in light of my other instructions contained elsewhere in this uADD™ or new medical information.
        </content>
    </content><br /></text>
              <entry>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.2" extension="2016-07-01" />
                  <id root="EE852100-5007-43FE-A144-A6ED7A41C16A" />
                  <code code="75783-1" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Primary Healthcare Agent">
                    <originalText>
                      <reference value="#HealthAgent1Type" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#HealthAgent1" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20200501142534-0600" />
                  <participant typeCode="CST">
                    <participantRole classCode="AGNT">
                      <id root="48A3C365-FFA8-4360-A4ED-22FC1F74B29E" />
                      <code>
                        <originalText mediaType="text/plain" language="en-US">Son</originalText>
                      </code>
                        <telecom value="mailto:CharlesSJ@example.com" use="HP" />
                      <playingEntity>
                        <code code="63161005" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Principle">
                          <originalText>
                            <reference value="#HealthAgent1Type" />
                          </originalText>
                        </code>
                        <name>
                          <given partType="GIV">Charles</given>
                          <family partType="FAM">Johnson</family>
                        </name>
                      </playingEntity>
                    </participantRole>
                  </participant>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.2" extension="2016-07-01" />
                  <id root="DE7F8363-4AA6-4D7C-A85F-8AAB74B7786F" />
                  <code code="75783-1" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Primary Healthcare Agent">
                    <originalText>
                      <reference value="#HealthAgent1Type" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#HealthAgent1" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20200501142534-0600" />
                  <participant typeCode="VRF">
                    <participantRole classCode="AGNT">
                      <id root="DF28D146-2FAF-42B9-B768-8320E2B43D83" />
                      <code>
                        <originalText mediaType="text/plain" language="en-US">Son</originalText>
                      </code>
                        <telecom value="mailto:CharlesSJ@example.com" use="HP" />
                      <playingEntity>
                        <code code="63161005" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Principle">
                          <originalText>
                            <reference value="#HealthAgent1Type" />
                          </originalText>
                        </code>
                        <name>
                          <given partType="GIV">Charles</given>
                          <family partType="FAM">Johnson</family>
                        </name>
                      </playingEntity>
                    </participantRole>
                  </participant>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.2" extension="2016-07-01" />
                  <id root="DAD552A6-49BA-4A3E-815E-38215D842CF0" />
                  <code code="75784-9" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="First Alternative Health Agent">
                    <originalText>
                      <reference value="#HealthAgent2Type" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#HealthAgent2" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20200501142534-0600" />
                  <participant typeCode="CST">
                    <participantRole classCode="AGNT">
                      <id root="0DA7E477-5348-4B44-92D8-E98A7520DF22" />
                      <code>
                        <originalText mediaType="text/plain" language="en-US">Daughter</originalText>
                      </code>
                        <telecom value="mailto:DebraSJ@example.com" use="HP" />
                      <playingEntity>
                        <code code="2603003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Secondary">
                          <originalText>
                            <reference value="#HealthAgent2Type" />
                          </originalText>
                        </code>
                        <name>
                          <given partType="GIV">Debra</given>
                          <family partType="FAM">Johnson</family>
                        </name>
                      </playingEntity>
                    </participantRole>
                  </participant>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.4" extension="2016-07-01" />
                  <id root="B34A2243-1758-437E-A332-4612E2890391" />
                  <code code="75786-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Powers Granted to Health Agent">
                    <originalText>
                      <reference value="#HCA_1_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#HCA_1" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#HCA_1_PL" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.4" extension="2016-07-01" />
                  <id root="6005A915-DD6B-40A1-9C2A-97368BA45D7D" />
                  <code code="75786-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Powers Granted to Health Agent" />
                  <text>
                    <reference value="#HCA_2" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#HCA_2_PL" />
                  </value>
                  <precondition>
                    <criterion>
                      <value xsi:type="ED">
                        <reference value="#HCA_2_C" />
                      </value>
                    </criterion>
                  </precondition>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.4" extension="2016-07-01" />
                  <id root="7DA93681-F12F-456C-8B64-09BCE93C00C5" />
                  <code code="75786-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Powers Granted to Health Agent" />
                  <text>
                    <reference value="#HCA_3" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#HCA_3_PL" />
                  </value>
                  <precondition>
                    <criterion>
                      <value xsi:type="ED">
                        <reference value="#HCA_3_C" />
                      </value>
                    </criterion>
                  </precondition>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.4" extension="2016-07-01" />
                  <id root="1DBDC3C4-CFB6-4F3E-AF93-3B494CBD8026" />
                  <code code="75786-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Powers Granted to Health Agent" />
                  <text>
                    <reference value="#HCA_4" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#HCA_4_PL" />
                  </value>
                </observation>
              </entry>
            </section>
          </component>
          <component>
            <section>
              <templateId root="2.16.840.1.113883.4.823.1.3.4" extension="2016-07-01" />
              <code code="81336-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="GPP certain health cond" />
              <title mediaType="text/plain" representation="TXT" language="en-US">Expression of Healthcare Treatment Wishes and Desires</title>
              <text><content styleCode="Bold">My Advance Care Goals</content><br /><br />
            <content ID="GPP_eol_1">
                <content ID="GPP_eol_1_Q">
                    <content ID="GPP_eol_priorities_criteria">If I am so sick or seriously injured that I cannot express my own medical treatment preferences, and if I am not expected to live without additional treatment for my illness, disease, condition or injury, then I want my medical care team to know that these are the things that are most important to me:</content>
                </content>
            </content>
            <list listType="ordered" ID="GPP_eol_1_A" styleCode="Answer">
                    <item ID="GPP_eol_priorities_1-1">
                        Avoiding prolonged dependence on machines
                    </item>
                    <item ID="GPP_eol_priorities_1-2">
                        Not being a physical burden to my family
                    </item>
                    <item ID="GPP_eol_priorities_1-3">
                        Dying at home
                    </item>

            </list>
            <content ID="GPP_eol_2">
                <content ID="GPP_eol_2_Q">
                    Here are some thoughts that I would like for my medical care team and my healthcare agent(s) to know about the role that religion, faith or spirituality play in my life:
                </content><br />
                <content ID="GPP_eol_2_A" styleCode="Answer">
                    I am Catholic, please call Father Mark at Saint Catherine's on Main Street.
                </content>
            </content><br /><br />
            <content ID="GPP_eol_3">
                <content ID="GPP_eol_3_C">
                    If I am having significant pain or suffering,
                </content>
                <content ID="GPP_eol_3_I" styleCode="Answer">
                    I would like my doctors to consult a Supportive and Palliative Care Team to help treat my physical, emotional and spiritual discomfort, and to support my family.
                </content>
            </content><br /><br />
    <content styleCode="Bold">My Preferences in Specific Circumstances</content><br /><br />
    <content>In addition to the general advance care goals provided above, below are specific treatment preferences with respect to certain specific circumstances or situations.</content><br /><br />
        <content ID="GPP_eol_4">
            <content ID="GPP_eol_4_C">If my health ever deteriorates due to a terminal illness, and my doctors believe I will not be able to interact meaningfully with my family, friends, or surroundings,</content>
            
                <content ID="GPP_eol_4_I" styleCode="Answer">
                    I would like for them to keep trying life-sustaining treatments

                                                            until my healthcare agent decides it is time to stop and such treatments and let me die gently.                </content>
                                </content><br /><br />
        <content ID="GPP_eol_6">
            <content ID="GPP_eol_6_C">
                If I have a severe, irreversible brain injury or illness and can’t dress, feed, or bathe myself, or communicate my medical wishes, but doctors can keep me alive in this condition for a long period of time,
            </content>

                <content ID="GPP_eol_6_I" styleCode="Answer">
                    I would like for them to keep trying life-sustaining treatments

                                                            until my healthcare agent decides it is time to stop and such treatments and let me die gently.                </content>
                                </content><br /><br />
        <content ID="GPP_eol_8">
            <content ID="GPP_eol_8_Q">
                Although I understand that, depending on the situation and circumstances, medical personnel may not be able to follow my wishes, here are my general thoughts on cardiopulmonary resuscitation (CPR):
            </content><br />
            <content ID="GPP_eol_8_I" styleCode="Answer">
                I want my healthcare agent to decide for me.
            </content>
        </content><br /><br />
        <content styleCode="Bold">Other Instructions</content><br /><br />
            <content ID="GPP_eol_10">
                <content ID="GPP_eol_10_Q">If it were possible to choose, here is where I would like to spend my final days:</content>
                <content ID="GPP_eol_10_A" styleCode="Answer">
At home.I would like to receive hospice care at home if possible.                </content>
            </content>
            <br /><br />
            <content ID="GPP_eol_12">
                <content ID="GPP_eol_12_I">I understand that, in certain jurisdictions, if I have been diagnosed as pregnant and that diagnosis is known to my attending physician, medical treatment providers may refuse to follow my directives and provide life-sustaining treatment including artificially administered nutrition and hydration, as well as CPR and other resuscitation measures.</content>
            </content><br /><br />
                <!-- Added text here for PMOLST -->
                <content ID="GPP_eol_MOLST">
                  <content ID="GPP_eol_MOLST_Type">
                    I DO HAVE a Medical Order regarding Life-Sustaining
                    Treatment (MOLST)</content>
                  <content ID="GPP_eol_MOST_EffectiveTime">
                    Effective Time: 05/1/2020 17:22</content>
                  <content ID="GPP_eol_MOST_FileReference">
                    <linkHtml href="Smith-Johnson_MOLST20200730.pdf">
                      Access to MOLST</linkHtml>
                  </content>
                </content>
              </text>
              <entry>
                <organizer classCode="CLUSTER" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.7" extension="2016-07-01" />
                  <id root="2BF5FF50-BF14-48CF-8E5A-19248F1EBEAF" />
                  <code code="81340-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Order of priorities">
                    <originalText>
                      <reference value="#GPP_eol_1" />
                    </originalText>
                  </code>
                  <statusCode code="completed" />
                  <precondition>
                    <criterion>
                      <value xsi:type="ED">
                        <reference value="#GPP_eol_priorities_criteria" />
                      </value>
                    </criterion>
                  </precondition>
                  <component typeCode="COMP"><sdtc:priorityNumber value="1" />
                    <observation classCode="OBS" moodCode="GOL">
                      <templateId root="2.16.840.1.113883.4.823.1.4.6" extension="2016-07-01" />
                      <id root="3663A0C0-8993-4949-8A66-B06D031843E0" />
                      <code code="81378-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Goals, preferences, and priorities under certain health conditions">
                        <originalText>
                          <reference value="#GPP_eol_1_Q" />
                        </originalText>
                      </code>
                      <text>
                        <reference value="#GPP_eol_priorities_1-1" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="ED">
                        <reference value="#GPP_eol_priorities_1-1" />
                      </value>
                    </observation>
                  </component>
                  <component typeCode="COMP"><sdtc:priorityNumber value="2" />
                    <observation classCode="OBS" moodCode="GOL">
                      <templateId root="2.16.840.1.113883.4.823.1.4.6" extension="2016-07-01" />
                      <id root="9B2B8B7A-A44C-4F88-B7F9-38C0C2B91AC5" />
                      <code code="81378-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Goals, preferences, and priorities under certain health conditions">
                        <originalText>
                          <reference value="#GPP_eol_1_Q" />
                        </originalText>
                      </code>
                      <text>
                        <reference value="#GPP_eol_priorities_1-2" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="ED">
                        <reference value="#GPP_eol_priorities_1-2" />
                      </value>
                    </observation>
                  </component>
                  <component typeCode="COMP"><sdtc:priorityNumber value="3" />
                    <observation classCode="OBS" moodCode="GOL">
                      <templateId root="2.16.840.1.113883.4.823.1.4.6" extension="2016-07-01" />
                      <id root="F4DC47FA-70FD-45FD-8C9C-0147FDDA3724" />
                      <code code="81378-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Goals, preferences, and priorities under certain health conditions">
                        <originalText>
                          <reference value="#GPP_eol_1_Q" />
                        </originalText>
                      </code>
                      <text>
                        <reference value="#GPP_eol_priorities_1-3" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="ED">
                        <reference value="#GPP_eol_priorities_1-3" />
                      </value>
                    </observation>
                  </component>
                </organizer>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="GOL">
                  <templateId root="2.16.840.1.113883.4.823.1.4.6" extension="2016-07-01" />
                  <id root="4FA82E6B-0AC9-40E1-BC68-44773AA9975F" />
                  <code code="75775-7" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Thoughts on role religion, faith, or spirituality play in your life">
                    <originalText>
                      <reference value="#GPP_eol_2_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#GPP_eol_2" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#GPP_eol_2_A" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.5" extension="2016-07-01" />
                  <id root="FD2769B5-F712-4290-BE63-76481C2BC138" />
                  <code code="75776-5" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Preference on consulting a supportive and palliative care team to help treat physical, emotional, and spiritual discomfort and support family" />
                  <text>
                    <reference value="#GPP_eol_3" />
                  </text>
                  <statusCode code="completed" />
                  <entryRelationship typeCode="REFR">
                    <procedure classCode="PROC" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.14" extension="2014-06-09" />
                      <id root="446FFBE6-382E-4474-A2C9-C16622F55168" />
                      <code nullFlavor="OTH" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                        <originalText>
                          <reference value="#GPP_eol_3_I" />
                        </originalText>
                      </code>
                      <statusCode code="completed" />
                    </procedure>
                  </entryRelationship>
                  <precondition>
                    <criterion>
                      <value xsi:type="ED">
                        <reference value="#GPP_eol_3_C" />
                      </value>
                    </criterion>
                  </precondition>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.5" extension="2016-07-01" />
                  <id root="32C2C79A-C96F-440D-8C6D-B67E9F92F13A" />
                  <code code="75777-3" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Thoughts on terminal illness" />
                  <text>
                    <reference value="#GPP_eol_4" />
                  </text>
                  <statusCode code="completed" />
                  <entryRelationship typeCode="REFR">
                    <procedure classCode="PROC" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.14" extension="2014-06-09" />
                      <id root="700F5C01-102E-45CB-BFEF-7091ECA82531" />
                      <code nullFlavor="OTH" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                        <originalText>
                          <reference value="#GPP_eol_4_I" />
                        </originalText>
                      </code>
                      <statusCode code="completed" />
                    </procedure>
                  </entryRelationship>
                  <precondition>
                    <criterion>
                      <value xsi:type="ED">
                        <reference value="#GPP_eol_4_C" />
                      </value>
                    </criterion>
                  </precondition>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.5" extension="2016-07-01" />
                  <id root="26D39681-4763-4093-AA00-4FA34E71C168" />
                  <code code="75778-1" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Thoughts on irreversible debilitating illness" />
                  <text>
                    <reference value="#GPP_eol_6" />
                  </text>
                  <statusCode code="completed" />
                  <entryRelationship typeCode="REFR">
                    <procedure classCode="PROC" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.14" extension="2014-06-09" />
                      <id root="7E13487A-9832-4FF6-89C4-36255BC395FB" />
                      <code nullFlavor="OTH" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                        <originalText>
                          <reference value="#GPP_eol_6_I" />
                        </originalText>
                      </code>
                      <statusCode code="completed" />
                    </procedure>
                  </entryRelationship>
                  <precondition>
                    <criterion>
                      <value xsi:type="ED">
                        <reference value="#GPP_eol_6_C" />
                      </value>
                    </criterion>
                  </precondition>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.5" extension="2016-07-01" />
                  <id root="BEC5A06F-3A87-473A-8A8B-67376436A3A9" />
                  <code code="75779-9" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Thoughts on CPR">
                    <originalText>
                      <reference value="#GPP_eol_8_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#GPP_eol_8" />
                  </text>
                  <statusCode code="completed" />
                  <entryRelationship typeCode="REFR">
                    <procedure classCode="PROC" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.14" extension="2014-06-09" />
                      <id root="89DAB766-9BD9-41B2-866F-0081D5E59037" />
                      <code code="89666000" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="CPR">
                        <originalText>
                          <reference value="#GPP_eol_8_I" />
                        </originalText>
                      </code>
                      <statusCode code="completed" />
                    </procedure>
                  </entryRelationship>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="GOL">
                  <templateId root="2.16.840.1.113883.4.823.1.4.6" extension="2016-07-01" />
                  <id root="A42EC8BE-AA74-44DB-AE68-E4DFAAC3F4F1" />
                  <code code="75780-7" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Thoughts on Final Days">
                    <originalText>
                      <reference value="#GPP_eol_10_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#GPP_eol_10" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#GPP_eol_10_A" />
                  </value>
                </observation>
              </entry>
              <!-- MPOLST Entry -->
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.8"
                    extension="2020-06-10"/>
                  <id root="C7794229-BAF2-400F-B3F5-BDE235922123"/>
                  <code code="81352-7" codeSystem="2.16.840.1.113883.6.1"
                    codeSystemName="LOINC"
                    displayName="Medical Order for Life-Sustaining Treatment,
                    Physician Order for Life-Sustaining Treatment">
                    <originalText>
                      <reference value="#GPP_eol_MOLST_Type"/>
                    </originalText>
                  </code>
                  <text>
                    <reference value="#GPP_eol_MOLST"/>
                  </text>
                  <statusCode code="completed"/>
                  <effectiveTime value="20200501142534-0600"/>
                  <value xsi:type="BL" value="true"/>
                  <reference typeCode="REFR">
                    <externalDocument>
                      <id root="C7794229-BAF2-5555-B3F5-BDE235922987"/>
                        <text>
                          <reference value="Smith-Johnson_MOLST20200730.pdf"/>
                        </text>
                    </externalDocument>
                  </reference>
                </observation>
              </entry>
            </section>
          </component>
          <component>
            <section>
              <templateId root="2.16.840.1.113883.4.823.1.3.5" extension="2016-07-01" />
              <code code="81337-8" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="GPP upon Death" />
              <title mediaType="text/plain" representation="TXT" language="en-US">Goals, Preferences and Priorities upon Death</title>
              <text><content ID="GPP_ud_1">
            <content ID="GPP_ud_1_Q" styleCode="Bold">Consent to Donate</content><br />
            <content ID="GPP_ud_1_A" styleCode="Answer">
I consent to donate all organs and tissues.                                                                                            </content>
        </content><br /><br />
        <content ID="GPP_ud_3">
            <content ID="GPP_ud_3_Q" styleCode="Bold">Autopsy</content><br />
                            <content ID="GPP_ud_3_I" styleCode="Answer">I want an autopsy</content>
                <content ID="GPP_ud_3_C" styleCode="Answer">only if there are questions about my death.</content>
                                            </content><br /><br />
        <content ID="GPP_ud_5">
            <content ID="GPP_ud_5_Q" styleCode="Bold">Here are my thoughts on funeral or burial plans:</content><br />
            <content ID="GPP_ud_5_A" styleCode="Answer">
                If I were to pass away:<br />
                Please call Jim Houston, my lawyer, for arrangements I have already made.
            </content>
        </content><br /><br /></text>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.12" extension="2016-07-01" />
                  <id root="D5C2AED2-6C54-4B87-B3ED-3E7DB452464B" />
                  <code code="75781-5" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Thoughts on Organ and Tissue Donation">
                    <originalText>
                      <reference value="#GPP_ud_1_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#GPP_ud_1" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#GPP_ud_1_A" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="60FB0652-6D14-43F9-B8F4-A228BE809E03" />
                  <code code="75782-3" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Thoughts on Autopsy">
                    <originalText>
                      <reference value="#GPP_ud_3_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#GPP_ud_3" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#GPP_ud_3_I" />
                  </value>
                  <precondition>
                    <criterion>
                      <value xsi:type="ED">
                        <reference value="#GPP_ud_3_C" />
                      </value>
                    </criterion>
                  </precondition>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.5" extension="2016-07-01" />
                  <id root="3AA3A26D-4416-4DD6-A85D-D8DD9CECAA79" />
                  <code code="81356-8" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Death Arrangements">
                    <originalText>
                      <reference value="#GPP_ud_5_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#GPP_ud_5" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#GPP_ud_5_A" />
                  </value>
                </observation>
              </entry>
            </section>
          </component>
          <component>
            <section>
              <templateId root="2.16.840.1.113883.4.823.1.3.6" extension="2016-07-01" />
              <code code="81338-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="GPP for care experience" />
              <title mediaType="text/plain" representation="TXT" language="en-US">My Thoughts</title>
              <text><content styleCode="Italic">
        MyDirectives® offers people a list of optional questions that can be answered by typing text in a text box or by uploading a video or audio file for each question. Only those questions answered by Betsy Smith-Johnson appear here. For a complete list of questions in My Thoughts, please visit www.MyDirectives.com.
    </content><br /><br />
    <content styleCode="Bold">
        In case I’m being cared for by a person(s) who doesn't know me very well, I’d like my following thoughts to be known.
    </content><br /><br />
        <content ID="ME_1">
            <content ID="ME_1_Q" styleCode="Bold">
                My likes / joys:
            </content>
            <content>
                Here are some examples of the things that I would like to have near me, music that I’d like to hear, and other details of my care that would help to keep me happy and relaxed:
            </content>
            <br />
            <content ID="ME_1_A" styleCode="Answer">
                I love the smell of lavender and the feeling of sunshine on my face.
            </content>
        </content><br /><br />
        <content ID="ME_2">
            <content ID="ME_2_Q" styleCode="Bold">
                My dislikes / fears:
            </content>
            <content>
                Here is a list of things that I would like to avoid if at all possible, people that I don’t wish to see, and concerns I have about particular family members, pets, and so on:
            </content>
            <br />
            <content ID="ME_2_A" styleCode="Answer">
                I do not like my feet to be cold.
            </content>
        </content><br /><br />
        <content ID="ME_3">
            <content ID="ME_3_Q" styleCode="Bold">
                How to care for me:
            </content>
            <content>
                If I become incapacitated and cannot express myself, here is what I would like to tell my healthcare agent, family and friends about how I would like for them to care for me:
            </content>
            <br />
            <content ID="ME_3_A" styleCode="Answer">
                I want photos of my family where I can see them.
            </content>
        </content><br /><br />
        <content ID="ME_4">
            <content ID="ME_4_Q" styleCode="Bold">
                My religion:
            </content>
            <content>
                If I appear to be approaching the end of my life, here are some things that I would like for my caregivers to know about my faith and my religion.
            </content>
            <br />
            <content ID="ME_4_A" styleCode="Answer">
                Please call Father Mark if my condition warrants the services of a priest.
            </content>
        </content><br /><br />
        <content ID="ME_5">
            <content ID="ME_5_Q" styleCode="Bold">
                Please attempt to notify someone from my religion at the following phone number:
            </content>
            <content>
                If I have included one
            </content>
            <br />
            <content ID="ME_5_A" styleCode="Answer">
                Catholic
            </content>
        </content><br /><br />
        <content ID="ME_6">
            <content ID="ME_6_Q" styleCode="Bold">
                My unfinished business:
            </content>
            <content ID="ME_6_C">
                If it appears that I am approaching the end of my life, and I cannot communicate with persons around me, I would want my doctors and nurses, my family, and my friends to know about some unfinished business that I need to address:
            </content>
            <br />
            <content ID="ME_6_I" styleCode="Answer">
                I want my sister and I to talk again, and miss her.  I wish we hadn't disagreed all those years ago and regret the time it has cost us.  I'd like to see her face if I were very ill and needed the comfort of family at my side.
            </content>
        </content><br /><br />
        <content ID="ME_7">
            <content ID="ME_7_Q" styleCode="Bold">
                Laughter:
            </content>
            <content>
                These are some of my fondest memories from life that have always brought a smile to my face or made me laugh:
            </content>
            <br />
            <content ID="ME_7_A" styleCode="Answer">
                My dogs make me laugh when they play together, and my grandchildren make me laugh when they put on plays for me.  They bring me great joy.
            </content>
        </content><br /><br /></text>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="1C983019-62EF-4FFA-B81E-448C85DD6A3C" />
                  <code code="81360-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="My likes and joys">
                    <originalText>
                      <reference value="#ME_1_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#ME_1" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#ME_1_A" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="619B808C-D072-49D7-BEC8-36EF01DAF9C5" />
                  <code code="81362-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="My dislikes and fears">
                    <originalText>
                      <reference value="#ME_2_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#ME_2" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#ME_2_A" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="26DD9A43-F12D-49D6-ACAE-3D55F389B66A" />
                  <code code="81380-8" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Goals, preferences, and priorities for care experience">
                    <originalText>
                      <reference value="#ME_3_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#ME_3" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#ME_3_A" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="GOL">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="18C43128-26DA-42E3-AD34-257D9A09278F" />
                  <code code="81364-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Religious beliefs">
                    <originalText>
                      <reference value="#ME_4_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#ME_4" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#ME_4_A" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="B06B860A-20BC-4A84-9D6F-932BD07F46B9" />
                  <code code="81365-9" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Religious affiliation contact to notify">
                    <originalText>
                      <reference value="#ME_5_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#ME_5" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#ME_5_A" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="GOL">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="E3F2C471-9FEE-4A31-B392-FC716ACE25BF" />
                  <code code="81366-7" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Unfinished business">
                    <originalText>
                      <reference value="#ME_6_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#ME_6" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#ME_6_I" />
                  </value>
                  <precondition>
                    <criterion>
                      <value xsi:type="ED">
                        <reference value="#ME_6_C" />
                      </value>
                    </criterion>
                  </precondition>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="958DB424-45A8-4F53-8EC8-BC4164CCFAC5" />
                  <code code="81361-8" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Things that make me laugh">
                    <originalText>
                      <reference value="#ME_7_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#ME_7" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#ME_7_A" />
                  </value>
                </observation>
              </entry>
            </section>
          </component>
          <component>
            <section>
              <templateId root="2.16.840.1.113883.4.823.1.3.7" extension="2016-07-01" />
              <code code="81339-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Witnesses and Notary" />
              <title mediaType="text/plain" representation="TXT" language="en-US">Witnesses and Notary</title>
              <text><paragraph>I am emotionally and mentally competent to make this uADD.  I understand the purpose and effect of this uADD, I agree with everything that is written in this uADD, and I have made this uADD knowingly, willingly and after careful deliberation.</paragraph>


<table>
    <thead>
        <tr styleCode="Bold">
            <td>Data Type</td>
            <td>Information</td>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Signature:</td>
            <td>Betsy Smith-Johnson</td>
        </tr>
        <tr>
            <td>Date:</td>
            <td>3/29/2021</td>
        </tr>
    </tbody>
</table><br />


<br />
<content styleCode="Bold">
    Statement of Witnesses
</content><br /><br />
<content>
    I declare that the person who signed this uADD, or who asked another to sign this uADD on his/her behalf, is the individual identified in the document, and he/she did so in my presence or otherwise provided satisfactory proof to me of his/her identity. I believe him/her to be of sound mind and at least 18 years of age. I personally witnessed him/her sign this document or ask the person indicated to do so, or I received proof of his/her identity that I believe is adequate, and I believe that he/she did so voluntarily.  By signing this document as a witness, I certify that I am:
</content><br /><br />
<list>
    <item>At least 18 years of age.</item>
    <item>Not related to the person signing this document by blood, marriage or adoption.</item>
    <item>Not a healthcare agent appointed by the person signing this document.</item>
    <item>Not directly financially responsible for that person’s healthcare.</item>
    <item>Not a healthcare provider directly serving the person at this time.</item>
    <item>Not an employee (other than a social worker or chaplain), officer, director, or partner of a healthcare provider (or any parent organization of such healthcare provider) directly serving the person at this time.</item>
    <item>Not aware that I am entitled to or have a claim against the person’s estate.</item>
</list><br /><br />

    <table>
        <thead>
            <tr styleCode="Bold">
                <td>Data Type</td>
                <td>Information</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Witness Number:</td>
                <td></td>
            </tr>
            <tr>
                <td>Signature:</td>
                <td></td>
            </tr>
            <tr>
                <td>Date:</td>
                <td></td>
            </tr>
        </tbody>
    </table><br />
        <br /><br /><br /></text>
            </section>
          </component>
        
    </structuredBody>
  </component>
</ClinicalDocument>
"
}