{
  "resourceType": "Binary",
  "id": "P0522-ADIMMD-2021PACP-BinaryBundle",
  "meta": {
    "versionId": "1",
    "lastUpdated": "2022-04-26T16:56:58.000+00:00",
    "source": "#zNzNad5Qaw675g6d"
  },
  "contentType": "application/json",
  "data": "{"resourceType":"Bundle","id":"e0025b6f-e790-47dc-b180-51b7b495191a","type":"document","entry":[{"resource":{"resourceType":"Composition","id":"da2272ff-5e3b-40cc-b98f-1d479daaa8c4","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-PACPComposition"]},"identifier":{"system":"urn:oid:2.16.840.1.113883.3.3208.101.4.8.2","value":"20130607100315-CCDA-CCD-802"},"status":"final","type":{"coding":[{"system":"http://loinc.org","code":"81334-5","display":"Personal advance care plan"}]},"category":[{"coding":[{"system":"http://loinc.org","code":"42348-3","display":"Advance directives"}]}],"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"},"date":"2021-12-17T20:29:44+00:00","author":[{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"},{"reference":"Device/5f64aaab-3232-4d26-a847-62c7e15a5cf6","display":"ADVault RR Portal"}],"title":"Personal Advance Care Plan Document (Version 2)","confidentiality":"N","custodian":{"reference":"Organization/46e1f46a-f9d1-4c95-9ea5-ca72c3922d6c"},"section":[{"extension":[{"url":"http://hl7.org/fhir/us/pacio-adi/StructureDefinition/padi-clause-extension","extension":[{"url":"Clause","valueMarkdown":"<div><p>I am emotionally and mentally competent to make this uADD.  I understand the purpose and effect of this uADD, I agree with everything that is written in this uADD, and I have made this uADD knowingly, willingly and after careful deliberation.</p><table>    <thead>        <tr>            <td>Data Type</td>            <td>Information</td>        </tr>    </thead>    <tbody>        <tr>            <td>Signature:</td>            <td>Betsy Smith-Johnson</td>        </tr>        <tr>            <td>Date:</td>            <td>12/17/2021</td>        </tr>    </tbody></table><br></br><br></br><span>    Statement of Witnesses</span><br></br><br></br><span>    I declare that the person who signed this uADD, or who asked another to sign this uADD on his/her behalf, is the individual identified in the document, and he/she did so in my presence or otherwise provided satisfactory proof to me of his/her identity. I believe him/her to be of sound mind and at least 18 years of age. I personally witnessed him/her sign this document or ask the person indicated to do so, or I received proof of his/her identity that I believe is adequate, and I believe that he/she did so voluntarily.  By signing this document as a witness, I certify that I am:</span><br></br><br></br><ul>    <li>At least 18 years of age.</li>    <li>Not related to the person signing this document by blood, marriage or adoption.</li>    <li>Not a healthcare agent appointed by the person signing this document.</li>    <li>Not directly financially responsible for that person’s healthcare.</li>    <li>Not a healthcare provider directly serving the person at this time.</li>    <li>Not an employee (other than a social worker or chaplain), officer, director, or partner of a healthcare provider (or any parent organization of such healthcare provider) directly serving the person at this time.</li>    <li>Not aware that I am entitled to or have a claim against the person’s estate.</li></ul><br></br><br></br>    <table>        <thead>            <tr>                <td>Data Type</td>                <td>Information</td>            </tr>        </thead>        <tbody>            <tr>                <td>Witness Number:</td>                <td></td>            </tr>            <tr>                <td>Signature:</td>                <td></td>            </tr>            <tr>                <td>Date:</td>                <td></td>            </tr>        </tbody>    </table><br></br>        <br></br><br></br><br></br></div>"}]}],"title":"Witnesses and Notary","code":{"coding":[{"system":"http://loinc.org","code":"81339-4","display":"Witnesses and Notary"}]},"text":{"status":"generated","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>I am emotionally and mentally competent to make this uADD.  I understand the purpose and effect of this uADD, I agree with everything that is written in this uADD, and I have made this uADD knowingly, willingly and after careful deliberation.</p><table>    <thead>        <tr>            <td>Data Type</td>            <td>Information</td>        </tr>    </thead>    <tbody>        <tr>            <td>Signature:</td>            <td>Betsy Smith-Johnson</td>        </tr>        <tr>            <td>Date:</td>            <td>12/17/2021</td>        </tr>    </tbody></table><br/><br/><span>    Statement of Witnesses</span><br/><br/><span>    I declare that the person who signed this uADD, or who asked another to sign this uADD on his/her behalf, is the individual identified in the document, and he/she did so in my presence or otherwise provided satisfactory proof to me of his/her identity. I believe him/her to be of sound mind and at least 18 years of age. I personally witnessed him/her sign this document or ask the person indicated to do so, or I received proof of his/her identity that I believe is adequate, and I believe that he/she did so voluntarily.  By signing this document as a witness, I certify that I am:</span><br/><br/><ul>    <li>At least 18 years of age.</li>    <li>Not related to the person signing this document by blood, marriage or adoption.</li>    <li>Not a healthcare agent appointed by the person signing this document.</li>    <li>Not directly financially responsible for that person’s healthcare.</li>    <li>Not a healthcare provider directly serving the person at this time.</li>    <li>Not an employee (other than a social worker or chaplain), officer, director, or partner of a healthcare provider (or any parent organization of such healthcare provider) directly serving the person at this time.</li>    <li>Not aware that I am entitled to or have a claim against the person’s estate.</li></ul><br/><br/>    <table>        <thead>            <tr>                <td>Data Type</td>                <td>Information</td>            </tr>        </thead>        <tbody>            <tr>                <td>Witness Number:</td>                <td/>            </tr>            <tr>                <td>Signature:</td>                <td/>            </tr>            <tr>                <td>Date:</td>                <td/>            </tr>        </tbody>    </table><br/>        <br/><br/><br/></div>"}},{"extension":[{"url":"http://hl7.org/fhir/us/pacio-adi/StructureDefinition/padi-clause-extension","extension":[{"url":"Clause","valueMarkdown":"<div>                <span>        MyDirectives® offers people a list of optional questions that can be answered by typing text in a text box or by uploading a video or audio file for each question. Only those questions answered by Betsy Smith-Johnson appear here. For a complete list of questions in My Thoughts, please visit www.MyDirectives.com.    </span><br></br><br></br>    <span>        In case I’m being cared for by a person(s) who doesn't know me very well, I’d like my following thoughts to be known.    </span><br></br><br></br>        <span>            <span>                My likes / joys:            </span>            <span>                Here are some examples of the things that I would like to have near me, music that I’d like to hear, and other details of my care that would help to keep me happy and relaxed:            </span>            <br></br>            <span>                I love the smell of lavender and the feeling of sunshine on my face.  I want my grandchildren to be allowed to visit me, either in person or virtually, if I am not feeling well because they bring me great joy and are the little loves of my life.            </span>        </span><br></br><br></br>        <span>            <span>                My dislikes / fears:            </span>            <span>                Here is a list of things that I would like to avoid if at all possible, people that I don’t wish to see, and concerns I have about particular family members, pets, and so on:            </span>            <br></br>            <span>                I do not like my feet to be cold.            </span>        </span><br></br><br></br>        <span>            <span>                How to care for me:            </span>            <span>                If I become incapacitated and cannot express myself, here is what I would like to tell my healthcare agent, family and friends about how I would like for them to care for me:            </span>            <br></br>            <span>                I want photos of my family where I can see them.            </span>        </span><br></br><br></br>        <span>            <span>                My religion:            </span>            <span>                If I appear to be approaching the end of my life, here are some things that I would like for my caregivers to know about my faith and my religion.            </span>            <br></br>            <span>                Please call Father Mark if my condition warrants the services of a priest.  I would like Father Mark to be contacted about my condition and given permission to visit me and pray for my recovery.  He can work with my church to gather additional prayers for me and my family during a time I am ill.  I will need the support of my church community to ensure my family is supported by those I trust to ask for mercy on my behalf.            </span>        </span><br></br><br></br>        <span>            <span>                Please attempt to notify someone from my religion at the following phone number:            </span>            <span>                If I have included one            </span>            <br></br>            <span>                Catholic            </span>        </span><br></br><br></br>        <span>            <span>                My unfinished business:            </span>            <span>                If it appears that I am approaching the end of my life, and I cannot communicate with persons around me, I would want my doctors and nurses, my family, and my friends to know about some unfinished business that I need to address:            </span>            <br></br>            <span>                I want my sister and I to talk again, and miss her.  I wish we hadn't disagreed all those years ago and regret the time it has cost us.  I'd like to see her face if I were very ill and needed the comfort of family at my side.            </span>        </span><br></br><br></br>        <span>            <span>                Laughter:            </span>            <span>                These are some of my fondest memories from life that have always brought a smile to my face or made me laugh:            </span>            <br></br>            <span>                My dogs make me laugh when they play together, and my grandchildren make me laugh when they put on plays for me.  They bring me great joy.            </span>        </span><br></br><br></br>        <span>            <span>                Messages to people who matter to me:            </span>            <span>                If I cannot communicate with persons around me, I want my healthcare agent, my family, and my friends to know the following:            </span>            <br></br>            <span>                Please let me end my life as I lived my life, on my own terms and with my own perspective guiding the way.            </span>        </span><br></br><br></br>        <span>            <span>                Information people may need to know:            </span>            <span>                Provide information about where others can find your important documents or information they may need.            </span>            <br></br>            <span>                I have purchased a funeral plat at Graceful Acres in Belmont NC and have life insurance policies filed with my lawyer that you should access if anything happens to me.            </span>        </span><br></br><br></br></div>"}]}],"title":"My Thoughts","code":{"coding":[{"system":"http://loinc.org","code":"81338-6","display":"GPP for care experience"}]},"text":{"status":"generated","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\">                <span>        MyDirectives® offers people a list of optional questions that can be answered by typing text in a text box or by uploading a video or audio file for each question. Only those questions answered by Betsy Smith-Johnson appear here. For a complete list of questions in My Thoughts, please visit www.MyDirectives.com.    </span><br/><br/>    <span>        In case I’m being cared for by a person(s) who doesn't know me very well, I’d like my following thoughts to be known.    </span><br/><br/>        <span>            <span>                My likes / joys:            </span>            <span>                Here are some examples of the things that I would like to have near me, music that I’d like to hear, and other details of my care that would help to keep me happy and relaxed:            </span>            <br/>            <span>                I love the smell of lavender and the feeling of sunshine on my face.  I want my grandchildren to be allowed to visit me, either in person or virtually, if I am not feeling well because they bring me great joy and are the little loves of my life.            </span>        </span><br/><br/>        <span>            <span>                My dislikes / fears:            </span>            <span>                Here is a list of things that I would like to avoid if at all possible, people that I don’t wish to see, and concerns I have about particular family members, pets, and so on:            </span>            <br/>            <span>                I do not like my feet to be cold.            </span>        </span><br/><br/>        <span>            <span>                How to care for me:            </span>            <span>                If I become incapacitated and cannot express myself, here is what I would like to tell my healthcare agent, family and friends about how I would like for them to care for me:            </span>            <br/>            <span>                I want photos of my family where I can see them.            </span>        </span><br/><br/>        <span>            <span>                My religion:            </span>            <span>                If I appear to be approaching the end of my life, here are some things that I would like for my caregivers to know about my faith and my religion.            </span>            <br/>            <span>                Please call Father Mark if my condition warrants the services of a priest.  I would like Father Mark to be contacted about my condition and given permission to visit me and pray for my recovery.  He can work with my church to gather additional prayers for me and my family during a time I am ill.  I will need the support of my church community to ensure my family is supported by those I trust to ask for mercy on my behalf.            </span>        </span><br/><br/>        <span>            <span>                Please attempt to notify someone from my religion at the following phone number:            </span>            <span>                If I have included one            </span>            <br/>            <span>                Catholic            </span>        </span><br/><br/>        <span>            <span>                My unfinished business:            </span>            <span>                If it appears that I am approaching the end of my life, and I cannot communicate with persons around me, I would want my doctors and nurses, my family, and my friends to know about some unfinished business that I need to address:            </span>            <br/>            <span>                I want my sister and I to talk again, and miss her.  I wish we hadn't disagreed all those years ago and regret the time it has cost us.  I'd like to see her face if I were very ill and needed the comfort of family at my side.            </span>        </span><br/><br/>        <span>            <span>                Laughter:            </span>            <span>                These are some of my fondest memories from life that have always brought a smile to my face or made me laugh:            </span>            <br/>            <span>                My dogs make me laugh when they play together, and my grandchildren make me laugh when they put on plays for me.  They bring me great joy.            </span>        </span><br/><br/>        <span>            <span>                Messages to people who matter to me:            </span>            <span>                If I cannot communicate with persons around me, I want my healthcare agent, my family, and my friends to know the following:            </span>            <br/>            <span>                Please let me end my life as I lived my life, on my own terms and with my own perspective guiding the way.            </span>        </span><br/><br/>        <span>            <span>                Information people may need to know:            </span>            <span>                Provide information about where others can find your important documents or information they may need.            </span>            <br/>            <span>                I have purchased a funeral plat at Graceful Acres in Belmont NC and have life insurance policies filed with my lawyer that you should access if anything happens to me.            </span>        </span><br/><br/></div>"},"entry":[{"reference":"Goal/f2e92636-e048-4c35-afc3-c4a977eb6b61"},{"reference":"Goal/8aecc4bf-0fd1-414a-8b92-8d13d563efaa"},{"reference":"Goal/025ddd82-4d53-4cf2-a44a-c103b9690f72"},{"reference":"Goal/ee89e9db-d9cb-4a80-ba4e-02d3a4594b20"},{"reference":"Goal/9d74aea9-609a-4c35-bf54-88312cbf9a9c"},{"reference":"Goal/9940ee98-603b-417b-b220-8513c1d2cb72"},{"reference":"Goal/c9eb6654-9394-455a-a6a0-1db7cf5c6677"},{"reference":"Goal/492e9967-0dda-417c-9d21-7f98b2853bf1"},{"reference":"Goal/5a4ee011-51aa-4fd3-ac58-be83b95fd1ac"}]},{"extension":[{"url":"http://hl7.org/fhir/us/pacio-adi/StructureDefinition/padi-clause-extension","extension":[{"url":"Clause","valueMarkdown":"<div>                <span>My Advance Care Goals</span><br></br><br></br>            <span>                <span>                    <span>If I am so sick or seriously injured that I cannot express my own medical treatment preferences, and if I am not expected to live without additional treatment for my illness, disease, condition or injury, then I want my medical care team to know that these are the things that are most important to me:</span>                </span>            </span>            <ol>                    <li>                        Avoiding prolonged dependence on machines                    </li>                    <li>                        Not being a physical burden to my family                    </li>                    <li>                        Dying at home                    </li>            </ol>            <span>                <span>                    Here are some thoughts that I would like for my medical care team and my healthcare agent(s) to know about the role that religion, faith or spirituality play in my life:                </span><br></br>                <span>                    I am Catholic, please call Father Mark at Saint Catherine's on Main Street.                </span>            </span><br></br><br></br>            <span>                <span>                    If I am having significant pain or suffering,                </span>                <span>                    I would like my doctors to consult a Supportive and Palliative Care Team to help treat my physical, emotional and spiritual discomfort, and to support my family.                </span>            </span><br></br><br></br>    <span>My Preferences in Specific Circumstances</span><br></br><br></br>    <span>In addition to the general advance care goals provided above, below are specific treatment preferences with respect to certain specific circumstances or situations.</span><br></br><br></br>        <span>            <span>If my health ever deteriorates due to a terminal illness, and my doctors believe I will not be able to interact meaningfully with my family, friends, or surroundings,</span>                            <span>                    I would like for them to keep trying life-sustaining treatments                                                            until my healthcare agent decides it is time to stop and such treatments and let me die gently.                </span>                                </span><br></br><br></br>        <span>            <span>                If I have a severe, irreversible brain injury or illness and can’t dress, feed, or bathe myself, or communicate my medical wishes, but doctors can keep me alive in this condition for a long period of time,            </span>                <span>                    I would like for them to keep trying life-sustaining treatments                                                            until my healthcare agent decides it is time to stop and such treatments and let me die gently.                </span>                                </span><br></br><br></br>        <span>            <span>                Although I understand that, depending on the situation and circumstances, medical personnel may not be able to follow my wishes, here are my general thoughts on cardiopulmonary resuscitation (CPR):            </span><br></br>            <span>                I want my healthcare agent to decide for me.            </span>        </span><br></br><br></br>        <span>Other Instructions</span><br></br><br></br>            <span>                <span>If it were possible to choose, here is where I would like to spend my final days:</span>                <span>At home.I would like to receive hospice care at home if possible.                </span>            </span>            <br></br><br></br>            <span>                <span>I understand that, in certain jurisdictions, if I have been diagnosed as pregnant and that diagnosis is known to my attending physician, medical treatment providers may refuse to follow my directives and provide life-sustaining treatment including artificially administered nutrition and hydration, as well as CPR and other resuscitation measures.</span>            </span><br></br><br></br></div>"}]}],"title":"Expression of Healthcare Treatment Wishes and Desires","code":{"coding":[{"system":"http://loinc.org","code":"81336-0","display":"GPP certain health cond"}]},"text":{"status":"generated","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\">                <span>My Advance Care Goals</span><br/><br/>            <span>                <span>                    <span>If I am so sick or seriously injured that I cannot express my own medical treatment preferences, and if I am not expected to live without additional treatment for my illness, disease, condition or injury, then I want my medical care team to know that these are the things that are most important to me:</span>                </span>            </span>            <ol>                    <li>                        Avoiding prolonged dependence on machines                    </li>                    <li>                        Not being a physical burden to my family                    </li>                    <li>                        Dying at home                    </li>            </ol>            <span>                <span>                    Here are some thoughts that I would like for my medical care team and my healthcare agent(s) to know about the role that religion, faith or spirituality play in my life:                </span><br/>                <span>                    I am Catholic, please call Father Mark at Saint Catherine's on Main Street.                </span>            </span><br/><br/>            <span>                <span>                    If I am having significant pain or suffering,                </span>                <span>                    I would like my doctors to consult a Supportive and Palliative Care Team to help treat my physical, emotional and spiritual discomfort, and to support my family.                </span>            </span><br/><br/>    <span>My Preferences in Specific Circumstances</span><br/><br/>    <span>In addition to the general advance care goals provided above, below are specific treatment preferences with respect to certain specific circumstances or situations.</span><br/><br/>        <span>            <span>If my health ever deteriorates due to a terminal illness, and my doctors believe I will not be able to interact meaningfully with my family, friends, or surroundings,</span>                            <span>                    I would like for them to keep trying life-sustaining treatments                                                            until my healthcare agent decides it is time to stop and such treatments and let me die gently.                </span>                                </span><br/><br/>        <span>            <span>                If I have a severe, irreversible brain injury or illness and can’t dress, feed, or bathe myself, or communicate my medical wishes, but doctors can keep me alive in this condition for a long period of time,            </span>                <span>                    I would like for them to keep trying life-sustaining treatments                                                            until my healthcare agent decides it is time to stop and such treatments and let me die gently.                </span>                                </span><br/><br/>        <span>            <span>                Although I understand that, depending on the situation and circumstances, medical personnel may not be able to follow my wishes, here are my general thoughts on cardiopulmonary resuscitation (CPR):            </span><br/>            <span>                I want my healthcare agent to decide for me.            </span>        </span><br/><br/>        <span>Other Instructions</span><br/><br/>            <span>                <span>If it were possible to choose, here is where I would like to spend my final days:</span>                <span>At home.I would like to receive hospice care at home if possible.                </span>            </span>            <br/><br/>            <span>                <span>I understand that, in certain jurisdictions, if I have been diagnosed as pregnant and that diagnosis is known to my attending physician, medical treatment providers may refuse to follow my directives and provide life-sustaining treatment including artificially administered nutrition and hydration, as well as CPR and other resuscitation measures.</span>            </span><br/><br/></div>"},"entry":[{"reference":"CarePlan/0bff5658-a5d1-4d35-aa5c-ab2de5951bca"}]},{"extension":[{"url":"http://hl7.org/fhir/us/pacio-adi/StructureDefinition/padi-clause-extension","extension":[{"url":"Clause","valueMarkdown":"<div>                <span>            <span>Consent to Donate</span><br></br>            <span>I consent to donate all organs and tissues.                                                                                            </span>        </span><br></br><br></br>        <span>            <span>Autopsy</span><br></br>                            <span>I want an autopsy</span>                <span>only if there are questions about my death.</span>                                            </span><br></br><br></br>        <span>            <span>Here are my thoughts on funeral or burial plans:</span><br></br>            <span>                If I were to pass away:<br></br>                Please call Jim Houston, my lawyer, for arrangements I have already made.            </span>        </span><br></br><br></br></div>"}]}],"title":"Goals, Preferences and Priorities upon Death","code":{"coding":[{"system":"http://loinc.org","code":"81337-8","display":"GPP upon Death"}]},"text":{"status":"generated","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\">                <span>            <span>Consent to Donate</span><br/>            <span>I consent to donate all organs and tissues.                                                                                            </span>        </span><br/><br/>        <span>            <span>Autopsy</span><br/>                            <span>I want an autopsy</span>                <span>only if there are questions about my death.</span>                                            </span><br/><br/>        <span>            <span>Here are my thoughts on funeral or burial plans:</span><br/>            <span>                If I were to pass away:<br/>                Please call Jim Houston, my lawyer, for arrangements I have already made.            </span>        </span><br/><br/></div>"},"entry":[{"reference":"Observation/cfd9768a-b1e3-47c3-8217-6157f83a5986"},{"reference":"Goal/a94ec9ff-2c6b-4c37-b29d-43e46d46a921"},{"reference":"Goal/551b1dc7-2051-475d-9f21-085d7eda9b6a"}]},{"extension":[{"url":"http://hl7.org/fhir/us/pacio-adi/StructureDefinition/padi-clause-extension","extension":[{"url":"Clause","valueMarkdown":"<div><p>IF THIS PART OF THE uADD™ IS LEFT BLANK, I DO NOT WANT TO DESIGNATE A<br></br>HEALTHCARE AGENT AT THIS TIME, AND I DO NOT WANT A<br></br>DEFAULT HEALTHCARE AGENT DESIGNATED FOR ME UNDER APPLICABLE LAW. <br></br>I TRUST THE DOCTORS AND NURSES TREATING ME TO MAKE<br></br>MEDICAL TREATMENT DECISIONS REGARDING MY TREATMENT AND CARE.</p>    <p>I am appointing the person or persons below as my healthcare agent and, if applicable, as my alternate healthcare agent(s), and I am granting to each of them the legal authority to make medical treatment decisions on my behalf and to consult with my physician and others.  The power to make medical treatment decisions that I am granting to my healthcare agent(s) is expressly subject to, and limited by, the choices that I have expressed elsewhere in my uADD.  If my medical treatment choices are not clear, I am authorizing and directing my healthcare agent to make decisions in my best interests and based on what is known of my wishes.</p>            <span>                    <span>Primary Healthcare Agent</span><br></br>                    <span>The person I choose as my Primary Healthcare Agent is:</span><br></br>                <span>                        <span>        Charles Johnson            <span>(Son)</span>    </span><br></br>        <span>          CharlesSJ@example.com        </span><br></br>        <span>            [SELECTED to act as a healthcare agent on 12/17/2021, at 5:49 PM CDT]        </span><br></br>        <span>          [ACCEPTED to act as a healthcare agent on 12/17/2021, at 6:49 PM CDT]        </span><br></br>                </span>            </span><br></br>            <span>                    <span>First Alternate Healthcare Agent</span><br></br>                    <span>If this healthcare agent is unable or unwilling to make medical treatment decisions for me, or if my spouse is designated as my primary healthcare agent and our marriage is annulled, or we are divorced or legally separated, then my next choice for a healthcare agent is:</span><br></br>                <span>                        <span>        Lisa Johnson            <span>(Daughter-in-law)</span>    </span><br></br>        <span>          maria.LisaJ@example.com        </span><br></br>        <span>          [SELECTED to act as a healthcare agent on  12/17/2021, at 5:49 PM CDT]        </span><br></br>        <span>            [As of 12/17/2021, at 11:29 AM CDT, a response is still PENDING]        </span><br></br>                </span>            </span><br></br>            <span>                    <span>Second Alternate Healthcare Agent</span><br></br>                    <span>If this alternate healthcare agent is unable or unwilling to make medical treatment decisions for me, or if my spouse is designated as my first alternate healthcare agent and our marriage is annulled, or we are divorced or legally separated, then my next choice for a healthcare agent is:</span><br></br>                <span>                        <span>        Debra Johnson            <span>(Daughter)</span>    </span><br></br>        <span>          DebraSJ@example.com        </span><br></br>        <span>          [SELECTED to act as a healthcare agent on 12/17/2021, at 5:49 PM CDT]        </span><br></br>        <span>            [As of 12/17/2021, at 11:29 AM CDT, a response is still PENDING]        </span><br></br>                </span>            </span><br></br>        <span>            <span>                My Healthcare Agent’s General Authority            </span><br></br>            <span>                    <span>Subject to my medical treatment choices expressed elsewhere in this uADD™ and applicable law that requires otherwise, I grant to my healthcare agent the power to make all choices and medical treatment decisions for me.</span>            </span>        </span><br></br>    <span>        <span>            If I cannot express my own wishes for medical treatment,        </span>        <span>            I would like the doctors treating me, as well as my healthcare agent if I have chosen one, to make decisions based as much as possible and appropriate on my instructions below.        </span>    </span>        <span>            <span>                If at some point in the future I am declared incompetent,            </span>            <span>                I DO NOT want to be allowed to override these preferences. I want my doctors to follow the preferences I express in this document.            </span>        </span><br></br><br></br>    <span>        <span>            Unless I have stated otherwise somewhere else in this uADD™, I understand that my healthcare agent may reconsider my medical treatment choices expressed above in light of my other instructions contained elsewhere in this uADD™ or new medical information.        </span>    </span><br></br></div>"}]}],"title":"Appointment of a Primary Healthcare Agent and Alternate Healthcare Agents","code":{"coding":[{"system":"http://loinc.org","code":"81335-2","display":"Healthcare agent"}]},"text":{"status":"generated","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p>IF THIS PART OF THE uADD™ IS LEFT BLANK, I DO NOT WANT TO DESIGNATE A<br/>HEALTHCARE AGENT AT THIS TIME, AND I DO NOT WANT A<br/>DEFAULT HEALTHCARE AGENT DESIGNATED FOR ME UNDER APPLICABLE LAW. <br/>I TRUST THE DOCTORS AND NURSES TREATING ME TO MAKE<br/>MEDICAL TREATMENT DECISIONS REGARDING MY TREATMENT AND CARE.</p>    <p>I am appointing the person or persons below as my healthcare agent and, if applicable, as my alternate healthcare agent(s), and I am granting to each of them the legal authority to make medical treatment decisions on my behalf and to consult with my physician and others.  The power to make medical treatment decisions that I am granting to my healthcare agent(s) is expressly subject to, and limited by, the choices that I have expressed elsewhere in my uADD.  If my medical treatment choices are not clear, I am authorizing and directing my healthcare agent to make decisions in my best interests and based on what is known of my wishes.</p>            <span>                    <span>Primary Healthcare Agent</span><br/>                    <span>The person I choose as my Primary Healthcare Agent is:</span><br/>                <span>                        <span>        Charles Johnson            <span>(Son)</span>    </span><br/>        <span>          CharlesSJ@example.com        </span><br/>        <span>            [SELECTED to act as a healthcare agent on 12/17/2021, at 5:49 PM CDT]        </span><br/>        <span>          [ACCEPTED to act as a healthcare agent on 12/17/2021, at 6:49 PM CDT]        </span><br/>                </span>            </span><br/>            <span>                    <span>First Alternate Healthcare Agent</span><br/>                    <span>If this healthcare agent is unable or unwilling to make medical treatment decisions for me, or if my spouse is designated as my primary healthcare agent and our marriage is annulled, or we are divorced or legally separated, then my next choice for a healthcare agent is:</span><br/>                <span>                        <span>        Lisa Johnson            <span>(Daughter-in-law)</span>    </span><br/>        <span>          maria.LisaJ@example.com        </span><br/>        <span>          [SELECTED to act as a healthcare agent on  12/17/2021, at 5:49 PM CDT]        </span><br/>        <span>            [As of 12/17/2021, at 11:29 AM CDT, a response is still PENDING]        </span><br/>                </span>            </span><br/>            <span>                    <span>Second Alternate Healthcare Agent</span><br/>                    <span>If this alternate healthcare agent is unable or unwilling to make medical treatment decisions for me, or if my spouse is designated as my first alternate healthcare agent and our marriage is annulled, or we are divorced or legally separated, then my next choice for a healthcare agent is:</span><br/>                <span>                        <span>        Debra Johnson            <span>(Daughter)</span>    </span><br/>        <span>          DebraSJ@example.com        </span><br/>        <span>          [SELECTED to act as a healthcare agent on 12/17/2021, at 5:49 PM CDT]        </span><br/>        <span>            [As of 12/17/2021, at 11:29 AM CDT, a response is still PENDING]        </span><br/>                </span>            </span><br/>        <span>            <span>                My Healthcare Agent’s General Authority            </span><br/>            <span>                    <span>Subject to my medical treatment choices expressed elsewhere in this uADD™ and applicable law that requires otherwise, I grant to my healthcare agent the power to make all choices and medical treatment decisions for me.</span>            </span>        </span><br/>    <span>        <span>            If I cannot express my own wishes for medical treatment,        </span>        <span>            I would like the doctors treating me, as well as my healthcare agent if I have chosen one, to make decisions based as much as possible and appropriate on my instructions below.        </span>    </span>        <span>            <span>                If at some point in the future I am declared incompetent,            </span>            <span>                I DO NOT want to be allowed to override these preferences. I want my doctors to follow the preferences I express in this document.            </span>        </span><br/><br/>    <span>        <span>            Unless I have stated otherwise somewhere else in this uADD™, I understand that my healthcare agent may reconsider my medical treatment choices expressed above in light of my other instructions contained elsewhere in this uADD™ or new medical information.        </span>    </span><br/></div>"},"entry":[{"reference":"RelatedPerson/b1fdfb8f-da3f-484f-b628-a43a92a4ee55"},{"reference":"Consent/cd662066-57d7-4151-bd87-1cff95f1cd82"},{"reference":"RelatedPerson/3b9d2463-35c5-49c4-83d2-bfb0cb44c119"},{"reference":"Consent/b803be54-9cf3-4a22-893d-b7b4a4975ec6"},{"reference":"RelatedPerson/c5a0f7ac-acf9-4110-9b9d-31653eb0c046"},{"reference":"Consent/49b89d8d-9fd3-4eac-8635-005de32b1ea1"},{"reference":"RelatedPerson/1c57d8ff-1eee-463e-806b-1b1043ccc931"},{"reference":"Consent/d7a6b3b5-77b3-43a0-9249-42186bb6f609"}]}]}},{"resource":{"resourceType":"Patient","id":"3e0a479f-375c-46ba-857b-9ed4cca7db9f","meta":{"versionId":"1","lastUpdated":"2021-05-13T18:20:53.000+00:00","source":"#v54vBzC0N0I2RN3w","profile":["http://hl7.org/fhir/StructureDefinition/daf-patient"]},"text":{"status":"generated","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"hapiHeaderText\">Betsy <b>SMITH-JOHNSON </b></div><table class=\"hapiPropertyTable\"><tbody><tr><td>Identifier</td><td>87f37989294a408897aacd1fc5d8fd16</td></tr><tr><td>Address</td><td><span>111 Maple Court </span><br/><span>San Antonio </span><span>TX </span><span>US </span></td></tr><tr><td>Date of birth</td><td><span>15 November 1950</span></td></tr></tbody></table></div>"},"identifier":[{"system":"urn:oid:2.16.840.1.113883.4.823.1","value":"87f37989294a408897aacd1fc5d8fd16"}],"name":[{"use":"usual","family":"Smith-Johnson","given":["Betsy"]}],"telecom":[{"system":"email","value":"advault.test54@jettelabs.com","use":"home"}],"gender":"female","birthDate":"1950-11-15","address":[{"use":"home","line":["111 Maple Court"],"city":"San Antonio","state":"TX","postalCode":"78212","country":"US"}],"communication":[{"language":{"coding":[{"code":"eng"}]}}]}},{"resource":{"resourceType":"Organization","id":"46e1f46a-f9d1-4c95-9ea5-ca72c3922d6c","meta":{"versionId":"1","lastUpdated":"2021-05-11T22:24:56.000+00:00","source":"#QO6q5Kw0Chy02Qpg"},"identifier":[{"system":"urn:oid:1.3.6.1.4.1.42424242.4.99930.4","value":"12c5dcee5089494ca1ca0cb428ed3fff"}],"name":"ADVault, Inc.","telecom":[{"system":"phone","value":"+1(202)776-7700","use":"work"}],"address":[{"use":"work","line":["740 E. Campbell Rd.","STE 825"],"city":"Richardson","state":"TX","postalCode":"75081","country":"US"}],"endpoint":[{"reference":"Endpoint/13fb9789-b1f9-47f7-bc22-4219a4bba0a5"}]}},{"resource":{"resourceType":"Device","id":"5f64aaab-3232-4d26-a847-62c7e15a5cf6","meta":{"versionId":"1","lastUpdated":"2021-05-11T22:24:56.000+00:00","source":"#QO6q5Kw0Chy02Qpg"},"identifier":[{"system":"urn:oid:2.16.840.1.113883.4.6","value":"ed6f4f50c6cb47dd89cb5d8f3007ecb0"}],"modelNumber":"ADVault RR Portal","version":[{"value":"1.0"}],"owner":{"reference":"Organization/46e1f46a-f9d1-4c95-9ea5-ca72c3922d6c","display":"ADVault, Inc."}}},{"resource":{"resourceType":"Goal","id":"f2e92636-e048-4c35-afc3-c4a977eb6b61","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-CareExperiencePreference"]},"text":{"status":"additional","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><span>                My likes / joys:            </span>            <span>                Here are some examples of the things that I would like to have near me, music that I’d like to hear, and other details of my care that would help to keep me happy and relaxed:            </span>            <br/>            <span>                I love the smell of lavender and the feeling of sunshine on my face.  I want my grandchildren to be allowed to visit me, either in person or virtually, if I am not feeling well because they bring me great joy and are the little loves of my life.            </span></div>"},"identifier":[{"value":"A52B2B7F-2408-42AB-B519-B342D819173D"}],"lifecycleStatus":"proposed","category":[{"coding":[{"system":"http://loinc.org","code":"81360-0","display":"My likes and joys"}],"text":"My likes / joys:"},{"coding":[{"system":"http://hl7.org/fhir/us/pacio-adi/CodeSystem/PADIGoalCategoryCS","code":"care-experience-preference"}]}],"description":{"text":"<span>                My likes / joys:            </span>            <span>                Here are some examples of the things that I would like to have near me, music that I’d like to hear, and other details of my care that would help to keep me happy and relaxed:            </span>            <br></br>            <span>                I love the smell of lavender and the feeling of sunshine on my face.  I want my grandchildren to be allowed to visit me, either in person or virtually, if I am not feeling well because they bring me great joy and are the little loves of my life.            </span>"},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"Goal","id":"8aecc4bf-0fd1-414a-8b92-8d13d563efaa","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-CareExperiencePreference"]},"text":{"status":"additional","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><span>                My dislikes / fears:            </span>            <span>                Here is a list of things that I would like to avoid if at all possible, people that I don’t wish to see, and concerns I have about particular family members, pets, and so on:            </span>            <br/>            <span>                I do not like my feet to be cold.            </span></div>"},"identifier":[{"value":"F73DD134-ED6C-4255-BC83-1FFE7FAE9D44"}],"lifecycleStatus":"proposed","category":[{"coding":[{"system":"http://loinc.org","code":"81362-6","display":"My dislikes and fears"}],"text":"My dislikes / fears:"},{"coding":[{"system":"http://hl7.org/fhir/us/pacio-adi/CodeSystem/PADIGoalCategoryCS","code":"care-experience-preference"}]}],"description":{"text":"<span>                My dislikes / fears:            </span>            <span>                Here is a list of things that I would like to avoid if at all possible, people that I don’t wish to see, and concerns I have about particular family members, pets, and so on:            </span>            <br></br>            <span>                I do not like my feet to be cold.            </span>"},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"Goal","id":"025ddd82-4d53-4cf2-a44a-c103b9690f72","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-CareExperiencePreference"]},"text":{"status":"additional","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><span>                How to care for me:            </span>            <span>                If I become incapacitated and cannot express myself, here is what I would like to tell my healthcare agent, family and friends about how I would like for them to care for me:            </span>            <br/>            <span>                I want photos of my family where I can see them.            </span></div>"},"identifier":[{"value":"0FF4092F-EB78-4D16-BFCB-1F34DE0BEEFF"}],"lifecycleStatus":"proposed","category":[{"coding":[{"system":"http://loinc.org","code":"81380-8","display":"Goals, preferences, and priorities for care experience"}],"text":"How to care for me:"},{"coding":[{"system":"http://hl7.org/fhir/us/pacio-adi/CodeSystem/PADIGoalCategoryCS","code":"care-experience-preference"}]}],"description":{"text":"<span>                How to care for me:            </span>            <span>                If I become incapacitated and cannot express myself, here is what I would like to tell my healthcare agent, family and friends about how I would like for them to care for me:            </span>            <br></br>            <span>                I want photos of my family where I can see them.            </span>"},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"Goal","id":"ee89e9db-d9cb-4a80-ba4e-02d3a4594b20","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-CareExperiencePreference"]},"text":{"status":"additional","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><span>                My religion:            </span>            <span>                If I appear to be approaching the end of my life, here are some things that I would like for my caregivers to know about my faith and my religion.            </span>            <br/>            <span>                Please call Father Mark if my condition warrants the services of a priest.  I would like Father Mark to be contacted about my condition and given permission to visit me and pray for my recovery.  He can work with my church to gather additional prayers for me and my family during a time I am ill.  I will need the support of my church community to ensure my family is supported by those I trust to ask for mercy on my behalf.            </span></div>"},"identifier":[{"value":"62921CAC-CC7C-4734-AC7C-76788B5B2DDC"}],"lifecycleStatus":"proposed","category":[{"coding":[{"system":"http://loinc.org","code":"81364-2","display":"Religious beliefs"}],"text":"My religion:"},{"coding":[{"system":"http://hl7.org/fhir/us/pacio-adi/CodeSystem/PADIGoalCategoryCS","code":"care-experience-preference"}]}],"description":{"text":"<span>                My religion:            </span>            <span>                If I appear to be approaching the end of my life, here are some things that I would like for my caregivers to know about my faith and my religion.            </span>            <br></br>            <span>                Please call Father Mark if my condition warrants the services of a priest.  I would like Father Mark to be contacted about my condition and given permission to visit me and pray for my recovery.  He can work with my church to gather additional prayers for me and my family during a time I am ill.  I will need the support of my church community to ensure my family is supported by those I trust to ask for mercy on my behalf.            </span>"},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"Goal","id":"9d74aea9-609a-4c35-bf54-88312cbf9a9c","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-CareExperiencePreference"]},"text":{"status":"additional","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><span>                Please attempt to notify someone from my religion at the following phone number:            </span>            <span>                If I have included one            </span>            <br/>            <span>                Catholic            </span></div>"},"identifier":[{"value":"C831809D-FEA1-4E0B-A707-2A32A1C305D8"}],"lifecycleStatus":"proposed","category":[{"coding":[{"system":"http://loinc.org","code":"81365-9","display":"Religious affiliation contact to notify"}],"text":"Please attempt to notify someone from my religion at the following phone number:"},{"coding":[{"system":"http://hl7.org/fhir/us/pacio-adi/CodeSystem/PADIGoalCategoryCS","code":"care-experience-preference"}]}],"description":{"text":"<span>                Please attempt to notify someone from my religion at the following phone number:            </span>            <span>                If I have included one            </span>            <br></br>            <span>                Catholic            </span>"},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"Goal","id":"9940ee98-603b-417b-b220-8513c1d2cb72","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-CareExperiencePreference"]},"text":{"status":"additional","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><span>                My unfinished business:            </span>            <span>                If it appears that I am approaching the end of my life, and I cannot communicate with persons around me, I would want my doctors and nurses, my family, and my friends to know about some unfinished business that I need to address:            </span>            <br/>            <span>                I want my sister and I to talk again, and miss her.  I wish we hadn't disagreed all those years ago and regret the time it has cost us.  I'd like to see her face if I were very ill and needed the comfort of family at my side.            </span></div>"},"identifier":[{"value":"652F79B3-3C7D-483D-867B-D4C18156C581"}],"lifecycleStatus":"proposed","category":[{"coding":[{"system":"http://loinc.org","code":"81366-7","display":"Unfinished business"}],"text":"My unfinished business:"},{"coding":[{"system":"http://hl7.org/fhir/us/pacio-adi/CodeSystem/PADIGoalCategoryCS","code":"care-experience-preference"}]}],"description":{"text":"<span>                My unfinished business:            </span>            <span>                If it appears that I am approaching the end of my life, and I cannot communicate with persons around me, I would want my doctors and nurses, my family, and my friends to know about some unfinished business that I need to address:            </span>            <br></br>            <span>                I want my sister and I to talk again, and miss her.  I wish we hadn't disagreed all those years ago and regret the time it has cost us.  I'd like to see her face if I were very ill and needed the comfort of family at my side.            </span>"},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"Goal","id":"c9eb6654-9394-455a-a6a0-1db7cf5c6677","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-CareExperiencePreference"]},"text":{"status":"additional","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><span>                Laughter:            </span>            <span>                These are some of my fondest memories from life that have always brought a smile to my face or made me laugh:            </span>            <br/>            <span>                My dogs make me laugh when they play together, and my grandchildren make me laugh when they put on plays for me.  They bring me great joy.            </span></div>"},"identifier":[{"value":"D59EADF3-B63A-4B23-B792-4196833F0F77"}],"lifecycleStatus":"proposed","category":[{"coding":[{"system":"http://loinc.org","code":"81361-8","display":"Things that make me laugh"}],"text":"Laughter:"},{"coding":[{"system":"http://hl7.org/fhir/us/pacio-adi/CodeSystem/PADIGoalCategoryCS","code":"care-experience-preference"}]}],"description":{"text":"<span>                Laughter:            </span>            <span>                These are some of my fondest memories from life that have always brought a smile to my face or made me laugh:            </span>            <br></br>            <span>                My dogs make me laugh when they play together, and my grandchildren make me laugh when they put on plays for me.  They bring me great joy.            </span>"},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"Goal","id":"492e9967-0dda-417c-9d21-7f98b2853bf1","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-CareExperiencePreference"]},"text":{"status":"additional","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><span>                Messages to people who matter to me:            </span>            <span>                If I cannot communicate with persons around me, I want my healthcare agent, my family, and my friends to know the following:            </span>            <br/>            <span>                Please let me end my life as I lived my life, on my own terms and with my own perspective guiding the way.            </span></div>"},"identifier":[{"value":"1695405F-E78F-4B9C-9492-D4B9910CE6F4"}],"lifecycleStatus":"proposed","category":[{"coding":[{"system":"http://loinc.org","code":"81357-6","display":"Messages to be delivered after death"}],"text":"Messages to people who matter to me:"},{"coding":[{"system":"http://hl7.org/fhir/us/pacio-adi/CodeSystem/PADIGoalCategoryCS","code":"care-experience-preference"}]}],"description":{"text":"<span>                Messages to people who matter to me:            </span>            <span>                If I cannot communicate with persons around me, I want my healthcare agent, my family, and my friends to know the following:            </span>            <br></br>            <span>                Please let me end my life as I lived my life, on my own terms and with my own perspective guiding the way.            </span>"},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"Goal","id":"5a4ee011-51aa-4fd3-ac58-be83b95fd1ac","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-CareExperiencePreference"]},"text":{"status":"additional","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><span>                Information people may need to know:            </span>            <span>                Provide information about where others can find your important documents or information they may need.            </span>            <br/>            <span>                I have purchased a funeral plat at Graceful Acres in Belmont NC and have life insurance policies filed with my lawyer that you should access if anything happens to me.            </span></div>"},"identifier":[{"value":"F6E1F2DA-A05C-4DF0-A12A-74418193AF10"}],"lifecycleStatus":"proposed","category":[{"coding":[{"system":"http://loinc.org","code":"81382-4","display":"Statement of document creator"}],"text":"Information people may need to know:"},{"coding":[{"system":"http://hl7.org/fhir/us/pacio-adi/CodeSystem/PADIGoalCategoryCS","code":"care-experience-preference"}]}],"description":{"text":"<span>                Information people may need to know:            </span>            <span>                Provide information about where others can find your important documents or information they may need.            </span>            <br></br>            <span>                I have purchased a funeral plat at Graceful Acres in Belmont NC and have life insurance policies filed with my lawyer that you should access if anything happens to me.            </span>"},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"CarePlan","id":"0bff5658-a5d1-4d35-aa5c-ab2de5951bca","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-PreferenceCarePlan"]},"status":"active","intent":"proposal","category":[{"coding":[{"system":"http://snomed.info/sct","code":"736366004","display":"Advance care plan"}]}],"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"},"addresses":[{"reference":"Condition/d2acc2b0-d26f-4c70-ae53-f5569816f936"},{"reference":"Condition/cf67ed3b-ce27-4b74-8a4b-39737a01459e"},{"reference":"Condition/74192d9a-0023-4256-ada5-616c4eb62123"},{"reference":"Condition/05805d76-6195-4675-a8c4-ea3d3ad5fe86"}],"goal":[{"reference":"Goal/bdf36324-53cc-409d-8aa7-45397b628550"},{"reference":"Goal/1be66dcd-66da-48e6-a730-70352410b48e"},{"reference":"Goal/8f029dad-3207-4892-b89d-5f6b8733bdc4"}]}},{"resource":{"resourceType":"Goal","id":"bdf36324-53cc-409d-8aa7-45397b628550","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-PersonalGoal"]},"text":{"status":"additional","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\">Avoiding prolonged dependence on machines</div>"},"identifier":[{"value":"E2A88267-CA2F-42CF-820A-79A089358C98"}],"lifecycleStatus":"proposed","category":[{"coding":[{"system":"http://loinc.org","code":"81378-2","display":"Goals, preferences, and priorities under certain health conditions"}]}],"description":{"extension":[{"url":"Context","valueCodeableConcept":{"coding":[{"system":"http://loinc.org","code":"81378-2","display":"Goals, preferences, and priorities under certain health conditions"}]}},{"url":"Value","valueString":"Avoiding prolonged dependence on machines"}]},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"Goal","id":"1be66dcd-66da-48e6-a730-70352410b48e","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-PersonalGoal"]},"text":{"status":"additional","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\">Not being a physical burden to my family</div>"},"identifier":[{"value":"E27EBADB-E9C8-4FB6-878C-F091D3E35372"}],"lifecycleStatus":"proposed","category":[{"coding":[{"system":"http://loinc.org","code":"81378-2","display":"Goals, preferences, and priorities under certain health conditions"}]}],"description":{"extension":[{"url":"Context","valueCodeableConcept":{"coding":[{"system":"http://loinc.org","code":"81378-2","display":"Goals, preferences, and priorities under certain health conditions"}]}},{"url":"Value","valueString":"Not being a physical burden to my family"}]},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"Goal","id":"8f029dad-3207-4892-b89d-5f6b8733bdc4","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-PersonalGoal"]},"text":{"status":"additional","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\">Dying at home</div>"},"identifier":[{"value":"26D1A9CE-642F-467D-9D6D-C71DA756C0F5"}],"lifecycleStatus":"proposed","category":[{"coding":[{"system":"http://loinc.org","code":"81378-2","display":"Goals, preferences, and priorities under certain health conditions"}]}],"description":{"extension":[{"url":"Context","valueCodeableConcept":{"coding":[{"system":"http://loinc.org","code":"81378-2","display":"Goals, preferences, and priorities under certain health conditions"}]}},{"url":"Value","valueString":"Dying at home"}]},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"Condition","id":"d2acc2b0-d26f-4c70-ae53-f5569816f936","code":{"text":"If I am so sick or seriously injured that I cannot express my own medical treatment preferences, and if I am not expected to live without additional treatment for my illness, disease, condition or injury, then I want my medical care team to know that these are the things that are most important to me:"},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"Condition","id":"cf67ed3b-ce27-4b74-8a4b-39737a01459e","code":{"text":"If I am having significant pain or suffering,"},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"Condition","id":"74192d9a-0023-4256-ada5-616c4eb62123","code":{"text":"If my health ever deteriorates due to a terminal illness, and my doctors believe I will not be able to interact meaningfully with my family, friends, or surroundings,"},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"Condition","id":"05805d76-6195-4675-a8c4-ea3d3ad5fe86","code":{"text":"If I have a severe, irreversible brain injury or illness and can’t dress, feed, or bathe myself, or communicate my medical wishes, but doctors can keep me alive in this condition for a long period of time,"},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"Observation","id":"cfd9768a-b1e3-47c3-8217-6157f83a5986","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-OrganDonationObservation"]},"text":{"status":"additional","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><span>Consent to Donate</span><br/>            <span>I consent to donate all organs and tissues.                                                                                            </span></div>"},"identifier":[{"value":"E9C0C416-5B1A-4A09-A246-7108035D8BEE"}],"status":"final","code":{"coding":[{"system":"http://loinc.org","code":"75781-5","display":"Thoughts on organ and tissue donations"}]},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"},"valueString":"I consent to donate all organs and tissues."}},{"resource":{"resourceType":"Goal","id":"a94ec9ff-2c6b-4c37-b29d-43e46d46a921","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-CareExperiencePreference"]},"text":{"status":"additional","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><span>Autopsy</span><br/>                            <span>I want an autopsy</span>                <span>only if there are questions about my death.</span></div>"},"identifier":[{"value":"E6F6E2E3-EA61-4272-A042-A9EAACD45861"}],"lifecycleStatus":"proposed","category":[{"coding":[{"system":"http://loinc.org","code":"75782-3","display":"Thoughts on Autopsy"}],"text":"Autopsy"},{"coding":[{"system":"http://hl7.org/fhir/us/pacio-adi/CodeSystem/PADIGoalCategoryCS","code":"care-experience-preference"}]}],"description":{"text":"<span>Autopsy</span><br></br>                            <span>I want an autopsy</span>                <span>only if there are questions about my death.</span>"},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"Goal","id":"551b1dc7-2051-475d-9f21-085d7eda9b6a","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-PersonalInterventionPreference"]},"text":{"status":"additional","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><span>Here are my thoughts on funeral or burial plans:</span><br/>            <span>                If I were to pass away:<br/>                Please call Jim Houston, my lawyer, for arrangements I have already made.            </span></div>"},"identifier":[{"value":"22E8DC22-B0E5-4D73-8E19-8F0B2BF4C566"}],"lifecycleStatus":"proposed","category":[{"coding":[{"system":"http://hl7.org/fhir/us/pacio-adi/CodeSystem/PADIGoalCategoryCS","code":"intervention-preference"}]}],"description":{"text":"<span>Here are my thoughts on funeral or burial plans:</span><br></br>            <span>                If I were to pass away:<br></br>                Please call Jim Houston, my lawyer, for arrangements I have already made.            </span>"},"subject":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"}}},{"resource":{"resourceType":"RelatedPerson","id":"b1fdfb8f-da3f-484f-b628-a43a92a4ee55","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-HealthcareAgent"]},"patient":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"},"relationship":[{"coding":[{"system":"2.16.840.1.113883.6.1","code":"75783-1","display":"Primary healthcare agent"}],"text":"Primary healthcare agent"},{"text":"Son"}],"name":[{"family":"Johnson","given":["Charles"]}],"telecom":[{"system":"email","value":"CharlesSJ@example.com","use":"home"}]}},{"resource":{"resourceType":"Consent","id":"cd662066-57d7-4151-bd87-1cff95f1cd82","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-ParticipantConsent"]},"status":"active","scope":{"coding":[{"system":"http://loinc.org","code":"75783-1","display":"Primary healthcare agent"}]},"category":[{"coding":[{"system":"http://terminology.hl7.org/CodeSystem/consentcategorycodes","code":"acd","display":"Advance Directive"}]}],"patient":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"},"provision":{"actor":[{"role":{"coding":[{"system":"http://loinc.org","code":"75783-1","display":"Primary healthcare agent"}]},"reference":{"reference":"RelatedPerson/b1fdfb8f-da3f-484f-b628-a43a92a4ee55"}}],"action":[{"coding":[{"system":"http://loinc.org","code":"75786-4","display":"Powers Granted to Health Agent"}]}]}}},{"resource":{"resourceType":"RelatedPerson","id":"3b9d2463-35c5-49c4-83d2-bfb0cb44c119","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-HealthcareAgent"]},"patient":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"},"relationship":[{"coding":[{"system":"2.16.840.1.113883.6.1","code":"75783-1","display":"Primary healthcare agent"}],"text":"Primary healthcare agent"},{"text":"Son"}],"name":[{"family":"Johnson","given":["Charles"]}],"telecom":[{"system":"email","value":"CharlesSJ@example.com","use":"home"}]}},{"resource":{"resourceType":"Consent","id":"b803be54-9cf3-4a22-893d-b7b4a4975ec6","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-ParticipantConsent"]},"status":"active","scope":{"coding":[{"system":"http://loinc.org","code":"75783-1","display":"Primary healthcare agent"}]},"category":[{"coding":[{"system":"http://terminology.hl7.org/CodeSystem/consentcategorycodes","code":"acd","display":"Advance Directive"}]}],"patient":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"},"provision":{"actor":[{"role":{"coding":[{"system":"http://loinc.org","code":"75783-1","display":"Primary healthcare agent"}]},"reference":{"reference":"RelatedPerson/3b9d2463-35c5-49c4-83d2-bfb0cb44c119"}}],"action":[{"coding":[{"system":"http://loinc.org","code":"75786-4","display":"Powers Granted to Health Agent"}]}]}}},{"resource":{"resourceType":"RelatedPerson","id":"c5a0f7ac-acf9-4110-9b9d-31653eb0c046","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-HealthcareAgent"]},"patient":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"},"relationship":[{"coding":[{"system":"2.16.840.1.113883.6.1","code":"75784-9","display":"First alternate healthcare agent"}],"text":"First alternate healthcare agent"},{"text":"Daughter-in-law"}],"name":[{"family":"Johnson","given":["Lisa"]}],"telecom":[{"system":"email","value":"LisaJ@example.com","use":"home"}]}},{"resource":{"resourceType":"Consent","id":"49b89d8d-9fd3-4eac-8635-005de32b1ea1","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-ParticipantConsent"]},"status":"active","scope":{"coding":[{"system":"http://loinc.org","code":"75784-9","display":"First alternate healthcare agent"}]},"category":[{"coding":[{"system":"http://terminology.hl7.org/CodeSystem/consentcategorycodes","code":"acd","display":"Advance Directive"}]}],"patient":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"},"provision":{"actor":[{"role":{"coding":[{"system":"http://loinc.org","code":"75784-9","display":"First alternate healthcare agent"}]},"reference":{"reference":"RelatedPerson/c5a0f7ac-acf9-4110-9b9d-31653eb0c046"}}],"action":[{"coding":[{"system":"http://loinc.org","code":"75786-4","display":"Powers Granted to Health Agent"}]}]}}},{"resource":{"resourceType":"RelatedPerson","id":"1c57d8ff-1eee-463e-806b-1b1043ccc931","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-HealthcareAgent"]},"patient":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"},"relationship":[{"coding":[{"system":"2.16.840.1.113883.6.1","code":"75785-6","display":"Second alternate healthcare agent"}],"text":"Second alternate healthcare agent"},{"text":"Daughter"}],"name":[{"family":"Johnson","given":["Debra"]}],"telecom":[{"system":"email","value":"DebraSJ@example.com","use":"home"}]}},{"resource":{"resourceType":"Consent","id":"d7a6b3b5-77b3-43a0-9249-42186bb6f609","meta":{"profile":["http://hl7.org/fhir/us/pacio-adi/StructureDefinition/PADI-ParticipantConsent"]},"status":"active","scope":{"coding":[{"system":"http://loinc.org","code":"75785-6","display":"Second alternate healthcare agent"}]},"category":[{"coding":[{"system":"http://terminology.hl7.org/CodeSystem/consentcategorycodes","code":"acd","display":"Advance Directive"}]}],"patient":{"reference":"Patient/3e0a479f-375c-46ba-857b-9ed4cca7db9f","display":"Smith-Johnson, Betsy"},"provision":{"actor":[{"role":{"coding":[{"system":"http://loinc.org","code":"75785-6","display":"Second alternate healthcare agent"}]},"reference":{"reference":"RelatedPerson/1c57d8ff-1eee-463e-806b-1b1043ccc931"}}],"action":[{"coding":[{"system":"http://loinc.org","code":"75786-4","display":"Powers Granted to Health Agent"}]}]}}}]}"
}