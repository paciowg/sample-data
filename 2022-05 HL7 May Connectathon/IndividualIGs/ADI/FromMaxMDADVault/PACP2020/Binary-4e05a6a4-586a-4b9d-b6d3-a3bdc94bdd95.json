{
  "resourceType": "Binary",
  "id": "P0522-ADIMMD-2020PACP-BinaryBundle",
  "meta": {
    "versionId": "1",
    "lastUpdated": "2022-04-26T16:56:41.000+00:00",
    "source": "#ujceAxZsutBuNvqY"
  },
  "contentType": "application/json",
  "data": "eyJyZXNvdXJjZVR5cGUiOiJCdW5kbGUiLCJpZCI6IjI5ZWIzNGI0LWQ3YjctNDIyMi04Yjk1LWUxZmVhYTVjZDVlNSIsInR5cGUiOiJkb2N1bWVudCIsImVudHJ5IjpbeyJyZXNvdXJjZSI6eyJyZXNvdXJjZVR5cGUiOiJDb21wb3NpdGlvbiIsImlkIjoiZWVmZjQyODItMWI1YS00Njg3LWE3NWYtMmZkYWMyMmNjMmY0IiwibWV0YSI6eyJwcm9maWxlIjpbImh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvcGFjaW8tYWRpL1N0cnVjdHVyZURlZmluaXRpb24vUEFESS1QQUNQQ29tcG9zaXRpb24iXX0sImlkZW50aWZpZXIiOnsic3lzdGVtIjoidXJuOm9pZDoyLjE2Ljg0MC4xLjExMzg4My4zLjMyMDguMTAxLjQuOC4xIiwidmFsdWUiOiIyMDEzMDYwNzEwMDMxNS1DQ0RBLUNDRC04MDEifSwic3RhdHVzIjoiZmluYWwiLCJ0eXBlIjp7ImNvZGluZyI6W3sic3lzdGVtIjoiaHR0cDovL2xvaW5jLm9yZyIsImNvZGUiOiI4MTMzNC01IiwiZGlzcGxheSI6IlBlcnNvbmFsIGFkdmFuY2UgY2FyZSBwbGFuIn1dfSwiY2F0ZWdvcnkiOlt7ImNvZGluZyI6W3sic3lzdGVtIjoiaHR0cDovL2xvaW5jLm9yZyIsImNvZGUiOiI0MjM0OC0zIiwiZGlzcGxheSI6IkFkdmFuY2UgZGlyZWN0aXZlcyJ9XX1dLCJzdWJqZWN0Ijp7InJlZmVyZW5jZSI6IlBhdGllbnQvM2UwYTQ3OWYtMzc1Yy00NmJhLTg1N2ItOWVkNGNjYTdkYjlmIiwiZGlzcGxheSI6IlNtaXRoLUpvaG5zb24sIEJldHN5In0sImRhdGUiOiIyMDIwLTA1LTAxVDIwOjI1OjM0KzAwOjAwIiwiYXV0aG9yIjpbeyJyZWZlcmVuY2UiOiJQYXRpZW50LzNlMGE0NzlmLTM3NWMtNDZiYS04NTdiLTllZDRjY2E3ZGI5ZiIsImRpc3BsYXkiOiJTbWl0aC1Kb2huc29uLCBCZXRzeSJ9LHsicmVmZXJlbmNlIjoiRGV2aWNlLzVmNjRhYWFiLTMyMzItNGQyNi1hODQ3LTYyYzdlMTVhNWNmNiIsImRpc3BsYXkiOiJBRFZhdWx0IFJSIFBvcnRhbCJ9XSwidGl0bGUiOiJQZXJzb25hbCBBZHZhbmNlIENhcmUgUGxhbiBEb2N1bWVudCAoVmVyc2lvbiAxKSIsImNvbmZpZGVudGlhbGl0eSI6Ik4iLCJjdXN0b2RpYW4iOnsicmVmZXJlbmNlIjoiT3JnYW5pemF0aW9uLzQ2ZTFmNDZhLWY5ZDEtNGM5NS05ZWE1LWNhNzJjMzkyMmQ2YyJ9LCJzZWN0aW9uIjpbeyJleHRlbnNpb24iOlt7InVybCI6Imh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvcGFjaW8tYWRpL1N0cnVjdHVyZURlZmluaXRpb24vcGFkaS1jbGF1c2UtZXh0ZW5zaW9uIiwiZXh0ZW5zaW9uIjpbeyJ1cmwiOiJDbGF1c2UiLCJ2YWx1ZU1hcmtkb3duIjoiPGRpdj48c3Bhbj5NeSBBZHZhbmNlIENhcmUgR29hbHM8L3NwYW4+PGJyPjwvYnI+PGJyPjwvYnI+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICAgICAgPHNwYW4+SWYgSSBhbSBzbyBzaWNrIG9yIHNlcmlvdXNseSBpbmp1cmVkIHRoYXQgSSBjYW5ub3QgZXhwcmVzcyBteSBvd24gbWVkaWNhbCB0cmVhdG1lbnQgcHJlZmVyZW5jZXMsIGFuZCBpZiBJIGFtIG5vdCBleHBlY3RlZCB0byBsaXZlIHdpdGhvdXQgYWRkaXRpb25hbCB0cmVhdG1lbnQgZm9yIG15IGlsbG5lc3MsIGRpc2Vhc2UsIGNvbmRpdGlvbiBvciBpbmp1cnksIHRoZW4gSSB3YW50IG15IG1lZGljYWwgY2FyZSB0ZWFtIHRvIGtub3cgdGhhdCB0aGVzZSBhcmUgdGhlIHRoaW5ncyB0aGF0IGFyZSBtb3N0IGltcG9ydGFudCB0byBtZTo8L3NwYW4+ICAgICAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPG9sPiAgICAgICAgICAgICAgICAgICAgPGxpPiAgICAgICAgICAgICAgICAgICAgICAgIEF2b2lkaW5nIHByb2xvbmdlZCBkZXBlbmRlbmNlIG9uIG1hY2hpbmVzICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgPGxpPiAgICAgICAgICAgICAgICAgICAgICAgIE5vdCBiZWluZyBhIHBoeXNpY2FsIGJ1cmRlbiB0byBteSBmYW1pbHkgICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgICAgICAgICA8bGk+ICAgICAgICAgICAgICAgICAgICAgICAgRHlpbmcgYXQgaG9tZSAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICA8L29sPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgICAgIEhlcmUgYXJlIHNvbWUgdGhvdWdodHMgdGhhdCBJIHdvdWxkIGxpa2UgZm9yIG15IG1lZGljYWwgY2FyZSB0ZWFtIGFuZCBteSBoZWFsdGhjYXJlIGFnZW50KHMpIHRvIGtub3cgYWJvdXQgdGhlIHJvbGUgdGhhdCByZWxpZ2lvbiwgZmFpdGggb3Igc3Bpcml0dWFsaXR5IHBsYXkgaW4gbXkgbGlmZTogICAgICAgICAgICAgICAgPC9zcGFuPjxicj48L2JyPiAgICAgICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgICAgIEkgYW0gQ2F0aG9saWMsIHBsZWFzZSBjYWxsIEZhdGhlciBNYXJrIGF0IFNhaW50IENhdGhlcmluZSdzIG9uIE1haW4gU3RyZWV0LiAgICAgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPC9zcGFuPjxicj48L2JyPjxicj48L2JyPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgICAgIElmIEkgYW0gaGF2aW5nIHNpZ25pZmljYW50IHBhaW4gb3Igc3VmZmVyaW5nLCAgICAgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICAgICAgSSB3b3VsZCBsaWtlIG15IGRvY3RvcnMgdG8gY29uc3VsdCBhIFN1cHBvcnRpdmUgYW5kIFBhbGxpYXRpdmUgQ2FyZSBUZWFtIHRvIGhlbHAgdHJlYXQgbXkgcGh5c2ljYWwsIGVtb3Rpb25hbCBhbmQgc3Bpcml0dWFsIGRpc2NvbWZvcnQsIGFuZCB0byBzdXBwb3J0IG15IGZhbWlseS4gICAgICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDwvc3Bhbj48YnI+PC9icj48YnI+PC9icj4gICAgPHNwYW4+TXkgUHJlZmVyZW5jZXMgaW4gU3BlY2lmaWMgQ2lyY3Vtc3RhbmNlczwvc3Bhbj48YnI+PC9icj48YnI+PC9icj4gICAgPHNwYW4+SW4gYWRkaXRpb24gdG8gdGhlIGdlbmVyYWwgYWR2YW5jZSBjYXJlIGdvYWxzIHByb3ZpZGVkIGFib3ZlLCBiZWxvdyBhcmUgc3BlY2lmaWMgdHJlYXRtZW50IHByZWZlcmVuY2VzIHdpdGggcmVzcGVjdCB0byBjZXJ0YWluIHNwZWNpZmljIGNpcmN1bXN0YW5jZXMgb3Igc2l0dWF0aW9ucy48L3NwYW4+PGJyPjwvYnI+PGJyPjwvYnI+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICA8c3Bhbj5JZiBteSBoZWFsdGggZXZlciBkZXRlcmlvcmF0ZXMgZHVlIHRvIGEgdGVybWluYWwgaWxsbmVzcywgYW5kIG15IGRvY3RvcnMgYmVsaWV2ZSBJIHdpbGwgbm90IGJlIGFibGUgdG8gaW50ZXJhY3QgbWVhbmluZ2Z1bGx5IHdpdGggbXkgZmFtaWx5LCBmcmllbmRzLCBvciBzdXJyb3VuZGluZ3MsPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgICAgIEkgd291bGQgbGlrZSBmb3IgdGhlbSB0byBrZWVwIHRyeWluZyBsaWZlLXN1c3RhaW5pbmcgdHJlYXRtZW50cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVudGlsIG15IGhlYWx0aGNhcmUgYWdlbnQgZGVjaWRlcyBpdCBpcyB0aW1lIHRvIHN0b3AgYW5kIHN1Y2ggdHJlYXRtZW50cyBhbmQgbGV0IG1lIGRpZSBnZW50bHkuICAgICAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj48YnI+PC9icj48YnI+PC9icj4gICAgICAgIDxzcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBJZiBJIGhhdmUgYSBzZXZlcmUsIGlycmV2ZXJzaWJsZSBicmFpbiBpbmp1cnkgb3IgaWxsbmVzcyBhbmQgY2Fu4oCZdCBkcmVzcywgZmVlZCwgb3IgYmF0aGUgbXlzZWxmLCBvciBjb21tdW5pY2F0ZSBteSBtZWRpY2FsIHdpc2hlcywgYnV0IGRvY3RvcnMgY2FuIGtlZXAgbWUgYWxpdmUgaW4gdGhpcyBjb25kaXRpb24gZm9yIGEgbG9uZyBwZXJpb2Qgb2YgdGltZSwgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICAgICAgSSB3b3VsZCBsaWtlIGZvciB0aGVtIHRvIGtlZXAgdHJ5aW5nIGxpZmUtc3VzdGFpbmluZyB0cmVhdG1lbnRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW50aWwgbXkgaGVhbHRoY2FyZSBhZ2VudCBkZWNpZGVzIGl0IGlzIHRpbWUgdG8gc3RvcCBhbmQgc3VjaCB0cmVhdG1lbnRzIGFuZCBsZXQgbWUgZGllIGdlbnRseS4gICAgICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPjxicj48L2JyPjxicj48L2JyPiAgICAgICAgPHNwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIEFsdGhvdWdoIEkgdW5kZXJzdGFuZCB0aGF0LCBkZXBlbmRpbmcgb24gdGhlIHNpdHVhdGlvbiBhbmQgY2lyY3Vtc3RhbmNlcywgbWVkaWNhbCBwZXJzb25uZWwgbWF5IG5vdCBiZSBhYmxlIHRvIGZvbGxvdyBteSB3aXNoZXMsIGhlcmUgYXJlIG15IGdlbmVyYWwgdGhvdWdodHMgb24gY2FyZGlvcHVsbW9uYXJ5IHJlc3VzY2l0YXRpb24gKENQUik6ICAgICAgICAgICAgPC9zcGFuPjxicj48L2JyPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBJIHdhbnQgbXkgaGVhbHRoY2FyZSBhZ2VudCB0byBkZWNpZGUgZm9yIG1lLiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgIDwvc3Bhbj48YnI+PC9icj48YnI+PC9icj4gICAgICAgIDxzcGFuPk90aGVyIEluc3RydWN0aW9uczwvc3Bhbj48YnI+PC9icj48YnI+PC9icj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4+SWYgaXQgd2VyZSBwb3NzaWJsZSB0byBjaG9vc2UsIGhlcmUgaXMgd2hlcmUgSSB3b3VsZCBsaWtlIHRvIHNwZW5kIG15IGZpbmFsIGRheXM6PC9zcGFuPiAgICAgICAgICAgICAgICA8c3Bhbj5BdCBob21lLkkgd291bGQgbGlrZSB0byByZWNlaXZlIGhvc3BpY2UgY2FyZSBhdCBob21lIGlmIHBvc3NpYmxlLiAgICAgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxicj48L2JyPjxicj48L2JyPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICA8c3Bhbj5JIHVuZGVyc3RhbmQgdGhhdCwgaW4gY2VydGFpbiBqdXJpc2RpY3Rpb25zLCBpZiBJIGhhdmUgYmVlbiBkaWFnbm9zZWQgYXMgcHJlZ25hbnQgYW5kIHRoYXQgZGlhZ25vc2lzIGlzIGtub3duIHRvIG15IGF0dGVuZGluZyBwaHlzaWNpYW4sIG1lZGljYWwgdHJlYXRtZW50IHByb3ZpZGVycyBtYXkgcmVmdXNlIHRvIGZvbGxvdyBteSBkaXJlY3RpdmVzIGFuZCBwcm92aWRlIGxpZmUtc3VzdGFpbmluZyB0cmVhdG1lbnQgaW5jbHVkaW5nIGFydGlmaWNpYWxseSBhZG1pbmlzdGVyZWQgbnV0cml0aW9uIGFuZCBoeWRyYXRpb24sIGFzIHdlbGwgYXMgQ1BSIGFuZCBvdGhlciByZXN1c2NpdGF0aW9uIG1lYXN1cmVzLjwvc3Bhbj4gICAgICAgICAgICA8L3NwYW4+PGJyPjwvYnI+PGJyPjwvYnI+ICAgICAgICAgICAgICAgIDwhLS0gIEFkZGVkIHRleHQgaGVyZSBmb3IgUE1PTFNUICAtLT4gICAgICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgICAgICBJIERPIEhBVkUgYSBNZWRpY2FsIE9yZGVyIHJlZ2FyZGluZyBMaWZlLVN1c3RhaW5pbmcgICAgICAgICAgICAgICAgICAgIFRyZWF0bWVudCAoTU9MU1QpPC9zcGFuPiAgICAgICAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICAgICAgRWZmZWN0aXZlIFRpbWU6IDA1LzEvMjAyMCAxNzoyMjwvc3Bhbj4gICAgICAgICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJTbWl0aC1Kb2huc29uX01PTFNUMjAyMDA3MzAucGRmXCI+ICAgICAgICAgICAgICAgICAgICAgIEFjY2VzcyB0byBNT0xTVDwvYT4gICAgICAgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICAgIDwvZGl2PiJ9XX1dLCJ0aXRsZSI6IkV4cHJlc3Npb24gb2YgSGVhbHRoY2FyZSBUcmVhdG1lbnQgV2lzaGVzIGFuZCBEZXNpcmVzIiwiY29kZSI6eyJjb2RpbmciOlt7InN5c3RlbSI6Imh0dHA6Ly9sb2luYy5vcmciLCJjb2RlIjoiODEzMzYtMCIsImRpc3BsYXkiOiJHUFAgY2VydGFpbiBoZWFsdGggY29uZCJ9XX0sInRleHQiOnsic3RhdHVzIjoiZ2VuZXJhdGVkIiwiZGl2IjoiPGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj48c3Bhbj5NeSBBZHZhbmNlIENhcmUgR29hbHM8L3NwYW4+PGJyLz48YnIvPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgICAgIDxzcGFuPklmIEkgYW0gc28gc2ljayBvciBzZXJpb3VzbHkgaW5qdXJlZCB0aGF0IEkgY2Fubm90IGV4cHJlc3MgbXkgb3duIG1lZGljYWwgdHJlYXRtZW50IHByZWZlcmVuY2VzLCBhbmQgaWYgSSBhbSBub3QgZXhwZWN0ZWQgdG8gbGl2ZSB3aXRob3V0IGFkZGl0aW9uYWwgdHJlYXRtZW50IGZvciBteSBpbGxuZXNzLCBkaXNlYXNlLCBjb25kaXRpb24gb3IgaW5qdXJ5LCB0aGVuIEkgd2FudCBteSBtZWRpY2FsIGNhcmUgdGVhbSB0byBrbm93IHRoYXQgdGhlc2UgYXJlIHRoZSB0aGluZ3MgdGhhdCBhcmUgbW9zdCBpbXBvcnRhbnQgdG8gbWU6PC9zcGFuPiAgICAgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxvbD4gICAgICAgICAgICAgICAgICAgIDxsaT4gICAgICAgICAgICAgICAgICAgICAgICBBdm9pZGluZyBwcm9sb25nZWQgZGVwZW5kZW5jZSBvbiBtYWNoaW5lcyAgICAgICAgICAgICAgICAgICAgPC9saT4gICAgICAgICAgICAgICAgICAgIDxsaT4gICAgICAgICAgICAgICAgICAgICAgICBOb3QgYmVpbmcgYSBwaHlzaWNhbCBidXJkZW4gdG8gbXkgZmFtaWx5ICAgICAgICAgICAgICAgICAgICA8L2xpPiAgICAgICAgICAgICAgICAgICAgPGxpPiAgICAgICAgICAgICAgICAgICAgICAgIER5aW5nIGF0IGhvbWUgICAgICAgICAgICAgICAgICAgIDwvbGk+ICAgICAgICAgICAgPC9vbD4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgICAgICBIZXJlIGFyZSBzb21lIHRob3VnaHRzIHRoYXQgSSB3b3VsZCBsaWtlIGZvciBteSBtZWRpY2FsIGNhcmUgdGVhbSBhbmQgbXkgaGVhbHRoY2FyZSBhZ2VudChzKSB0byBrbm93IGFib3V0IHRoZSByb2xlIHRoYXQgcmVsaWdpb24sIGZhaXRoIG9yIHNwaXJpdHVhbGl0eSBwbGF5IGluIG15IGxpZmU6ICAgICAgICAgICAgICAgIDwvc3Bhbj48YnIvPiAgICAgICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgICAgIEkgYW0gQ2F0aG9saWMsIHBsZWFzZSBjYWxsIEZhdGhlciBNYXJrIGF0IFNhaW50IENhdGhlcmluZSdzIG9uIE1haW4gU3RyZWV0LiAgICAgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPC9zcGFuPjxici8+PGJyLz4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgICAgICBJZiBJIGFtIGhhdmluZyBzaWduaWZpY2FudCBwYWluIG9yIHN1ZmZlcmluZywgICAgICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgICAgIEkgd291bGQgbGlrZSBteSBkb2N0b3JzIHRvIGNvbnN1bHQgYSBTdXBwb3J0aXZlIGFuZCBQYWxsaWF0aXZlIENhcmUgVGVhbSB0byBoZWxwIHRyZWF0IG15IHBoeXNpY2FsLCBlbW90aW9uYWwgYW5kIHNwaXJpdHVhbCBkaXNjb21mb3J0LCBhbmQgdG8gc3VwcG9ydCBteSBmYW1pbHkuICAgICAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICA8L3NwYW4+PGJyLz48YnIvPiAgICA8c3Bhbj5NeSBQcmVmZXJlbmNlcyBpbiBTcGVjaWZpYyBDaXJjdW1zdGFuY2VzPC9zcGFuPjxici8+PGJyLz4gICAgPHNwYW4+SW4gYWRkaXRpb24gdG8gdGhlIGdlbmVyYWwgYWR2YW5jZSBjYXJlIGdvYWxzIHByb3ZpZGVkIGFib3ZlLCBiZWxvdyBhcmUgc3BlY2lmaWMgdHJlYXRtZW50IHByZWZlcmVuY2VzIHdpdGggcmVzcGVjdCB0byBjZXJ0YWluIHNwZWNpZmljIGNpcmN1bXN0YW5jZXMgb3Igc2l0dWF0aW9ucy48L3NwYW4+PGJyLz48YnIvPiAgICAgICAgPHNwYW4+ICAgICAgICAgICAgPHNwYW4+SWYgbXkgaGVhbHRoIGV2ZXIgZGV0ZXJpb3JhdGVzIGR1ZSB0byBhIHRlcm1pbmFsIGlsbG5lc3MsIGFuZCBteSBkb2N0b3JzIGJlbGlldmUgSSB3aWxsIG5vdCBiZSBhYmxlIHRvIGludGVyYWN0IG1lYW5pbmdmdWxseSB3aXRoIG15IGZhbWlseSwgZnJpZW5kcywgb3Igc3Vycm91bmRpbmdzLDwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgICAgICBJIHdvdWxkIGxpa2UgZm9yIHRoZW0gdG8ga2VlcCB0cnlpbmcgbGlmZS1zdXN0YWluaW5nIHRyZWF0bWVudHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnRpbCBteSBoZWFsdGhjYXJlIGFnZW50IGRlY2lkZXMgaXQgaXMgdGltZSB0byBzdG9wIGFuZCBzdWNoIHRyZWF0bWVudHMgYW5kIGxldCBtZSBkaWUgZ2VudGx5LiAgICAgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+PGJyLz48YnIvPiAgICAgICAgPHNwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIElmIEkgaGF2ZSBhIHNldmVyZSwgaXJyZXZlcnNpYmxlIGJyYWluIGluanVyeSBvciBpbGxuZXNzIGFuZCBjYW7igJl0IGRyZXNzLCBmZWVkLCBvciBiYXRoZSBteXNlbGYsIG9yIGNvbW11bmljYXRlIG15IG1lZGljYWwgd2lzaGVzLCBidXQgZG9jdG9ycyBjYW4ga2VlcCBtZSBhbGl2ZSBpbiB0aGlzIGNvbmRpdGlvbiBmb3IgYSBsb25nIHBlcmlvZCBvZiB0aW1lLCAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgICAgICBJIHdvdWxkIGxpa2UgZm9yIHRoZW0gdG8ga2VlcCB0cnlpbmcgbGlmZS1zdXN0YWluaW5nIHRyZWF0bWVudHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnRpbCBteSBoZWFsdGhjYXJlIGFnZW50IGRlY2lkZXMgaXQgaXMgdGltZSB0byBzdG9wIGFuZCBzdWNoIHRyZWF0bWVudHMgYW5kIGxldCBtZSBkaWUgZ2VudGx5LiAgICAgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+PGJyLz48YnIvPiAgICAgICAgPHNwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIEFsdGhvdWdoIEkgdW5kZXJzdGFuZCB0aGF0LCBkZXBlbmRpbmcgb24gdGhlIHNpdHVhdGlvbiBhbmQgY2lyY3Vtc3RhbmNlcywgbWVkaWNhbCBwZXJzb25uZWwgbWF5IG5vdCBiZSBhYmxlIHRvIGZvbGxvdyBteSB3aXNoZXMsIGhlcmUgYXJlIG15IGdlbmVyYWwgdGhvdWdodHMgb24gY2FyZGlvcHVsbW9uYXJ5IHJlc3VzY2l0YXRpb24gKENQUik6ICAgICAgICAgICAgPC9zcGFuPjxici8+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIEkgd2FudCBteSBoZWFsdGhjYXJlIGFnZW50IHRvIGRlY2lkZSBmb3IgbWUuICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9zcGFuPjxici8+PGJyLz4gICAgICAgIDxzcGFuPk90aGVyIEluc3RydWN0aW9uczwvc3Bhbj48YnIvPjxici8+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIDxzcGFuPklmIGl0IHdlcmUgcG9zc2libGUgdG8gY2hvb3NlLCBoZXJlIGlzIHdoZXJlIEkgd291bGQgbGlrZSB0byBzcGVuZCBteSBmaW5hbCBkYXlzOjwvc3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4+QXQgaG9tZS5JIHdvdWxkIGxpa2UgdG8gcmVjZWl2ZSBob3NwaWNlIGNhcmUgYXQgaG9tZSBpZiBwb3NzaWJsZS4gICAgICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICA8YnIvPjxici8+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIDxzcGFuPkkgdW5kZXJzdGFuZCB0aGF0LCBpbiBjZXJ0YWluIGp1cmlzZGljdGlvbnMsIGlmIEkgaGF2ZSBiZWVuIGRpYWdub3NlZCBhcyBwcmVnbmFudCBhbmQgdGhhdCBkaWFnbm9zaXMgaXMga25vd24gdG8gbXkgYXR0ZW5kaW5nIHBoeXNpY2lhbiwgbWVkaWNhbCB0cmVhdG1lbnQgcHJvdmlkZXJzIG1heSByZWZ1c2UgdG8gZm9sbG93IG15IGRpcmVjdGl2ZXMgYW5kIHByb3ZpZGUgbGlmZS1zdXN0YWluaW5nIHRyZWF0bWVudCBpbmNsdWRpbmcgYXJ0aWZpY2lhbGx5IGFkbWluaXN0ZXJlZCBudXRyaXRpb24gYW5kIGh5ZHJhdGlvbiwgYXMgd2VsbCBhcyBDUFIgYW5kIG90aGVyIHJlc3VzY2l0YXRpb24gbWVhc3VyZXMuPC9zcGFuPiAgICAgICAgICAgIDwvc3Bhbj48YnIvPjxici8+ICAgICAgICAgICAgICAgICAgPCEtLSBBZGRlZCB0ZXh0IGhlcmUgZm9yIFBNT0xTVCAtLT4gICAgICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgICAgICBJIERPIEhBVkUgYSBNZWRpY2FsIE9yZGVyIHJlZ2FyZGluZyBMaWZlLVN1c3RhaW5pbmcgICAgICAgICAgICAgICAgICAgIFRyZWF0bWVudCAoTU9MU1QpPC9zcGFuPiAgICAgICAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICAgICAgRWZmZWN0aXZlIFRpbWU6IDA1LzEvMjAyMCAxNzoyMjwvc3Bhbj4gICAgICAgICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJTbWl0aC1Kb2huc29uX01PTFNUMjAyMDA3MzAucGRmXCI+ICAgICAgICAgICAgICAgICAgICAgIEFjY2VzcyB0byBNT0xTVDwvYT4gICAgICAgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICAgIDwvZGl2PiJ9LCJlbnRyeSI6W3sicmVmZXJlbmNlIjoiQ2FyZVBsYW4vNGViNTc2NTAtY2Q1ZC00NDgwLWE0NzktNjg0ZGZiZjU5NTlhIn1dfSx7ImV4dGVuc2lvbiI6W3sidXJsIjoiaHR0cDovL2hsNy5vcmcvZmhpci91cy9wYWNpby1hZGkvU3RydWN0dXJlRGVmaW5pdGlvbi9wYWRpLWNsYXVzZS1leHRlbnNpb24iLCJleHRlbnNpb24iOlt7InVybCI6IkNsYXVzZSIsInZhbHVlTWFya2Rvd24iOiI8ZGl2PjxwPklGIFRISVMgUEFSVCBPRiBUSEUgdUFEROKEoiBJUyBMRUZUIEJMQU5LLCBJIERPIE5PVCBXQU5UIFRPIERFU0lHTkFURSBBPGJyPjwvYnI+SEVBTFRIQ0FSRSBBR0VOVCBBVCBUSElTIFRJTUUsIEFORCBJIERPIE5PVCBXQU5UIEE8YnI+PC9icj5ERUZBVUxUIEhFQUxUSENBUkUgQUdFTlQgREVTSUdOQVRFRCBGT1IgTUUgVU5ERVIgQVBQTElDQUJMRSBMQVcuIDxicj48L2JyPkkgVFJVU1QgVEhFIERPQ1RPUlMgQU5EIE5VUlNFUyBUUkVBVElORyBNRSBUTyBNQUtFPGJyPjwvYnI+TUVESUNBTCBUUkVBVE1FTlQgREVDSVNJT05TIFJFR0FSRElORyBNWSBUUkVBVE1FTlQgQU5EIENBUkUuPC9wPiAgICA8cD5JIGFtIGFwcG9pbnRpbmcgdGhlIHBlcnNvbiBvciBwZXJzb25zIGJlbG93IGFzIG15IGhlYWx0aGNhcmUgYWdlbnQgYW5kLCBpZiBhcHBsaWNhYmxlLCBhcyBteSBhbHRlcm5hdGUgaGVhbHRoY2FyZSBhZ2VudChzKSwgYW5kIEkgYW0gZ3JhbnRpbmcgdG8gZWFjaCBvZiB0aGVtIHRoZSBsZWdhbCBhdXRob3JpdHkgdG8gbWFrZSBtZWRpY2FsIHRyZWF0bWVudCBkZWNpc2lvbnMgb24gbXkgYmVoYWxmIGFuZCB0byBjb25zdWx0IHdpdGggbXkgcGh5c2ljaWFuIGFuZCBvdGhlcnMuICBUaGUgcG93ZXIgdG8gbWFrZSBtZWRpY2FsIHRyZWF0bWVudCBkZWNpc2lvbnMgdGhhdCBJIGFtIGdyYW50aW5nIHRvIG15IGhlYWx0aGNhcmUgYWdlbnQocykgaXMgZXhwcmVzc2x5IHN1YmplY3QgdG8sIGFuZCBsaW1pdGVkIGJ5LCB0aGUgY2hvaWNlcyB0aGF0IEkgaGF2ZSBleHByZXNzZWQgZWxzZXdoZXJlIGluIG15IHVBREQuICBJZiBteSBtZWRpY2FsIHRyZWF0bWVudCBjaG9pY2VzIGFyZSBub3QgY2xlYXIsIEkgYW0gYXV0aG9yaXppbmcgYW5kIGRpcmVjdGluZyBteSBoZWFsdGhjYXJlIGFnZW50IHRvIG1ha2UgZGVjaXNpb25zIGluIG15IGJlc3QgaW50ZXJlc3RzIGFuZCBiYXNlZCBvbiB3aGF0IGlzIGtub3duIG9mIG15IHdpc2hlcy48L3A+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgICAgICA8c3Bhbj5QcmltYXJ5IEhlYWx0aGNhcmUgQWdlbnQ8L3NwYW4+PGJyPjwvYnI+ICAgICAgICAgICAgICAgICAgICA8c3Bhbj5UaGUgcGVyc29uIEkgY2hvb3NlIGFzIG15IFByaW1hcnkgSGVhbHRoY2FyZSBBZ2VudCBpczo8L3NwYW4+PGJyPjwvYnI+ICAgICAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPiAgICAgICAgQ2hhcmxlcyBKb2huc29uICAgICAgICAgICAgPHNwYW4+KFNvbik8L3NwYW4+ICAgIDwvc3Bhbj48YnI+PC9icj4gICAgICAgIDxzcGFuPiAgICAgICAgICAgIENoYXJsZXNTSkBleGFtcGxlLmNvbSAgICAgICAgPC9zcGFuPjxicj48L2JyPiAgICAgICAgPHNwYW4+ICAgICAgICAgICAgW1NFTEVDVEVEIHRvIGFjdCBhcyBhIGhlYWx0aGNhcmUgYWdlbnQgb24gMy8yOS8yMDIxLCBhdCAyOjI1IFBNIENEVF0gICAgICAgIDwvc3Bhbj48YnI+PC9icj4gICAgICAgIDxzcGFuPiAgICAgICAgICAgIFtBQ0NFUFRFRCB0byBhY3QgYXMgYSBoZWFsdGhjYXJlIGFnZW50IG9uIDQvMS8yMDIxLCBhdCAzOjM5IFBNIENEVF0gICAgICAgIDwvc3Bhbj48YnI+PC9icj4gICAgICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDwvc3Bhbj48YnI+PC9icj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgICAgIDxzcGFuPkZpcnN0IEFsdGVybmF0ZSBIZWFsdGhjYXJlIEFnZW50PC9zcGFuPjxicj48L2JyPiAgICAgICAgICAgICAgICAgICAgPHNwYW4+SWYgdGhpcyBoZWFsdGhjYXJlIGFnZW50IGlzIHVuYWJsZSBvciB1bndpbGxpbmcgdG8gbWFrZSBtZWRpY2FsIHRyZWF0bWVudCBkZWNpc2lvbnMgZm9yIG1lLCBvciBpZiBteSBzcG91c2UgaXMgZGVzaWduYXRlZCBhcyBteSBwcmltYXJ5IGhlYWx0aGNhcmUgYWdlbnQgYW5kIG91ciBtYXJyaWFnZSBpcyBhbm51bGxlZCwgb3Igd2UgYXJlIGRpdm9yY2VkIG9yIGxlZ2FsbHkgc2VwYXJhdGVkLCB0aGVuIG15IG5leHQgY2hvaWNlIGZvciBhIGhlYWx0aGNhcmUgYWdlbnQgaXM6PC9zcGFuPjxicj48L2JyPiAgICAgICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4gICAgICAgIERlYnJhIEpvaG5zb24gICAgICAgICAgICA8c3Bhbj4oRGF1Z2h0ZXIpPC9zcGFuPiAgICA8L3NwYW4+PGJyPjwvYnI+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICBEZWJyYVNKQGV4YW1wbGUuY29tICAgICAgICA8L3NwYW4+PGJyPjwvYnI+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICBbU0VMRUNURUQgdG8gYWN0IGFzIGEgaGVhbHRoY2FyZSBhZ2VudCBvbiAzLzI5LzIwMjEsIGF0IDI6MjUgUE0gQ0RUXSAgICAgICAgPC9zcGFuPjxicj48L2JyPiAgICAgICAgPHNwYW4+ICAgICAgICAgICAgW0FzIG9mIDQvMS8yMDIxLCBhdCAzOjQwIFBNIENEVCwgYSByZXNwb25zZSBpcyBzdGlsbCBQRU5ESU5HXSAgICAgICAgPC9zcGFuPjxicj48L2JyPiAgICAgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPC9zcGFuPjxicj48L2JyPiAgICAgICAgPHNwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIE15IEhlYWx0aGNhcmUgQWdlbnTigJlzIEdlbmVyYWwgQXV0aG9yaXR5ICAgICAgICAgICAgPC9zcGFuPjxicj48L2JyPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICAgICAgPHNwYW4+U3ViamVjdCB0byBteSBtZWRpY2FsIHRyZWF0bWVudCBjaG9pY2VzIGV4cHJlc3NlZCBlbHNld2hlcmUgaW4gdGhpcyB1QURE4oSiIGFuZCBhcHBsaWNhYmxlIGxhdyB0aGF0IHJlcXVpcmVzIG90aGVyd2lzZSwgSSBncmFudCB0byBteSBoZWFsdGhjYXJlIGFnZW50IHRoZSBwb3dlciB0byBtYWtlIGFsbCBjaG9pY2VzIGFuZCBtZWRpY2FsIHRyZWF0bWVudCBkZWNpc2lvbnMgZm9yIG1lLjwvc3Bhbj4gICAgICAgICAgICA8L3NwYW4+ICAgICAgICA8L3NwYW4+PGJyPjwvYnI+ICAgIDxzcGFuPiAgICAgICAgPHNwYW4+ICAgICAgICAgICAgSWYgSSBjYW5ub3QgZXhwcmVzcyBteSBvd24gd2lzaGVzIGZvciBtZWRpY2FsIHRyZWF0bWVudCwgICAgICAgIDwvc3Bhbj4gICAgICAgIDxzcGFuPiAgICAgICAgICAgIEkgd291bGQgbGlrZSB0aGUgZG9jdG9ycyB0cmVhdGluZyBtZSwgYXMgd2VsbCBhcyBteSBoZWFsdGhjYXJlIGFnZW50IGlmIEkgaGF2ZSBjaG9zZW4gb25lLCB0byBtYWtlIGRlY2lzaW9ucyBiYXNlZCBhcyBtdWNoIGFzIHBvc3NpYmxlIGFuZCBhcHByb3ByaWF0ZSBvbiBteSBpbnN0cnVjdGlvbnMgYmVsb3cuICAgICAgICA8L3NwYW4+ICAgIDwvc3Bhbj4gICAgICAgIDxzcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBJZiBhdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUgSSBhbSBkZWNsYXJlZCBpbmNvbXBldGVudCwgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIEkgRE8gTk9UIHdhbnQgdG8gYmUgYWxsb3dlZCB0byBvdmVycmlkZSB0aGVzZSBwcmVmZXJlbmNlcy4gSSB3YW50IG15IGRvY3RvcnMgdG8gZm9sbG93IHRoZSBwcmVmZXJlbmNlcyBJIGV4cHJlc3MgaW4gdGhpcyBkb2N1bWVudC4gICAgICAgICAgICA8L3NwYW4+ICAgICAgICA8L3NwYW4+PGJyPjwvYnI+PGJyPjwvYnI+ICAgIDxzcGFuPiAgICAgICAgPHNwYW4+ICAgICAgICAgICAgVW5sZXNzIEkgaGF2ZSBzdGF0ZWQgb3RoZXJ3aXNlIHNvbWV3aGVyZSBlbHNlIGluIHRoaXMgdUFEROKEoiwgSSB1bmRlcnN0YW5kIHRoYXQgbXkgaGVhbHRoY2FyZSBhZ2VudCBtYXkgcmVjb25zaWRlciBteSBtZWRpY2FsIHRyZWF0bWVudCBjaG9pY2VzIGV4cHJlc3NlZCBhYm92ZSBpbiBsaWdodCBvZiBteSBvdGhlciBpbnN0cnVjdGlvbnMgY29udGFpbmVkIGVsc2V3aGVyZSBpbiB0aGlzIHVBRETihKIgb3IgbmV3IG1lZGljYWwgaW5mb3JtYXRpb24uICAgICAgICA8L3NwYW4+ICAgIDwvc3Bhbj48YnI+PC9icj48L2Rpdj4ifV19XSwidGl0bGUiOiJBcHBvaW50bWVudCBvZiBhIFByaW1hcnkgSGVhbHRoY2FyZSBBZ2VudCBhbmQgQWx0ZXJuYXRlIEhlYWx0aGNhcmUgQWdlbnRzIiwiY29kZSI6eyJjb2RpbmciOlt7InN5c3RlbSI6Imh0dHA6Ly9sb2luYy5vcmciLCJjb2RlIjoiODEzMzUtMiIsImRpc3BsYXkiOiJIZWFsdGhjYXJlIGFnZW50In1dfSwidGV4dCI6eyJzdGF0dXMiOiJnZW5lcmF0ZWQiLCJkaXYiOiI8ZGl2IHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPjxwPklGIFRISVMgUEFSVCBPRiBUSEUgdUFEROKEoiBJUyBMRUZUIEJMQU5LLCBJIERPIE5PVCBXQU5UIFRPIERFU0lHTkFURSBBPGJyLz5IRUFMVEhDQVJFIEFHRU5UIEFUIFRISVMgVElNRSwgQU5EIEkgRE8gTk9UIFdBTlQgQTxici8+REVGQVVMVCBIRUFMVEhDQVJFIEFHRU5UIERFU0lHTkFURUQgRk9SIE1FIFVOREVSIEFQUExJQ0FCTEUgTEFXLiA8YnIvPkkgVFJVU1QgVEhFIERPQ1RPUlMgQU5EIE5VUlNFUyBUUkVBVElORyBNRSBUTyBNQUtFPGJyLz5NRURJQ0FMIFRSRUFUTUVOVCBERUNJU0lPTlMgUkVHQVJESU5HIE1ZIFRSRUFUTUVOVCBBTkQgQ0FSRS48L3A+ICAgIDxwPkkgYW0gYXBwb2ludGluZyB0aGUgcGVyc29uIG9yIHBlcnNvbnMgYmVsb3cgYXMgbXkgaGVhbHRoY2FyZSBhZ2VudCBhbmQsIGlmIGFwcGxpY2FibGUsIGFzIG15IGFsdGVybmF0ZSBoZWFsdGhjYXJlIGFnZW50KHMpLCBhbmQgSSBhbSBncmFudGluZyB0byBlYWNoIG9mIHRoZW0gdGhlIGxlZ2FsIGF1dGhvcml0eSB0byBtYWtlIG1lZGljYWwgdHJlYXRtZW50IGRlY2lzaW9ucyBvbiBteSBiZWhhbGYgYW5kIHRvIGNvbnN1bHQgd2l0aCBteSBwaHlzaWNpYW4gYW5kIG90aGVycy4gIFRoZSBwb3dlciB0byBtYWtlIG1lZGljYWwgdHJlYXRtZW50IGRlY2lzaW9ucyB0aGF0IEkgYW0gZ3JhbnRpbmcgdG8gbXkgaGVhbHRoY2FyZSBhZ2VudChzKSBpcyBleHByZXNzbHkgc3ViamVjdCB0bywgYW5kIGxpbWl0ZWQgYnksIHRoZSBjaG9pY2VzIHRoYXQgSSBoYXZlIGV4cHJlc3NlZCBlbHNld2hlcmUgaW4gbXkgdUFERC4gIElmIG15IG1lZGljYWwgdHJlYXRtZW50IGNob2ljZXMgYXJlIG5vdCBjbGVhciwgSSBhbSBhdXRob3JpemluZyBhbmQgZGlyZWN0aW5nIG15IGhlYWx0aGNhcmUgYWdlbnQgdG8gbWFrZSBkZWNpc2lvbnMgaW4gbXkgYmVzdCBpbnRlcmVzdHMgYW5kIGJhc2VkIG9uIHdoYXQgaXMga25vd24gb2YgbXkgd2lzaGVzLjwvcD4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgICAgIDxzcGFuPlByaW1hcnkgSGVhbHRoY2FyZSBBZ2VudDwvc3Bhbj48YnIvPiAgICAgICAgICAgICAgICAgICAgPHNwYW4+VGhlIHBlcnNvbiBJIGNob29zZSBhcyBteSBQcmltYXJ5IEhlYWx0aGNhcmUgQWdlbnQgaXM6PC9zcGFuPjxici8+ICAgICAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPiAgICAgICAgQ2hhcmxlcyBKb2huc29uICAgICAgICAgICAgPHNwYW4+KFNvbik8L3NwYW4+ICAgIDwvc3Bhbj48YnIvPiAgICAgICAgPHNwYW4+ICAgICAgICAgICAgQ2hhcmxlc1NKQGV4YW1wbGUuY29tICAgICAgICA8L3NwYW4+PGJyLz4gICAgICAgIDxzcGFuPiAgICAgICAgICAgIFtTRUxFQ1RFRCB0byBhY3QgYXMgYSBoZWFsdGhjYXJlIGFnZW50IG9uIDMvMjkvMjAyMSwgYXQgMjoyNSBQTSBDRFRdICAgICAgICA8L3NwYW4+PGJyLz4gICAgICAgIDxzcGFuPiAgICAgICAgICAgIFtBQ0NFUFRFRCB0byBhY3QgYXMgYSBoZWFsdGhjYXJlIGFnZW50IG9uIDQvMS8yMDIxLCBhdCAzOjM5IFBNIENEVF0gICAgICAgIDwvc3Bhbj48YnIvPiAgICAgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPC9zcGFuPjxici8+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgICAgICA8c3Bhbj5GaXJzdCBBbHRlcm5hdGUgSGVhbHRoY2FyZSBBZ2VudDwvc3Bhbj48YnIvPiAgICAgICAgICAgICAgICAgICAgPHNwYW4+SWYgdGhpcyBoZWFsdGhjYXJlIGFnZW50IGlzIHVuYWJsZSBvciB1bndpbGxpbmcgdG8gbWFrZSBtZWRpY2FsIHRyZWF0bWVudCBkZWNpc2lvbnMgZm9yIG1lLCBvciBpZiBteSBzcG91c2UgaXMgZGVzaWduYXRlZCBhcyBteSBwcmltYXJ5IGhlYWx0aGNhcmUgYWdlbnQgYW5kIG91ciBtYXJyaWFnZSBpcyBhbm51bGxlZCwgb3Igd2UgYXJlIGRpdm9yY2VkIG9yIGxlZ2FsbHkgc2VwYXJhdGVkLCB0aGVuIG15IG5leHQgY2hvaWNlIGZvciBhIGhlYWx0aGNhcmUgYWdlbnQgaXM6PC9zcGFuPjxici8+ICAgICAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPiAgICAgICAgRGVicmEgSm9obnNvbiAgICAgICAgICAgIDxzcGFuPihEYXVnaHRlcik8L3NwYW4+ICAgIDwvc3Bhbj48YnIvPiAgICAgICAgPHNwYW4+ICAgICAgICAgICAgRGVicmFTSkBleGFtcGxlLmNvbSAgICAgICAgPC9zcGFuPjxici8+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICBbU0VMRUNURUQgdG8gYWN0IGFzIGEgaGVhbHRoY2FyZSBhZ2VudCBvbiAzLzI5LzIwMjEsIGF0IDI6MjUgUE0gQ0RUXSAgICAgICAgPC9zcGFuPjxici8+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICBbQXMgb2YgNC8xLzIwMjEsIGF0IDM6NDAgUE0gQ0RULCBhIHJlc3BvbnNlIGlzIHN0aWxsIFBFTkRJTkddICAgICAgICA8L3NwYW4+PGJyLz4gICAgICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDwvc3Bhbj48YnIvPiAgICAgICAgPHNwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIE15IEhlYWx0aGNhcmUgQWdlbnTigJlzIEdlbmVyYWwgQXV0aG9yaXR5ICAgICAgICAgICAgPC9zcGFuPjxici8+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TdWJqZWN0IHRvIG15IG1lZGljYWwgdHJlYXRtZW50IGNob2ljZXMgZXhwcmVzc2VkIGVsc2V3aGVyZSBpbiB0aGlzIHVBRETihKIgYW5kIGFwcGxpY2FibGUgbGF3IHRoYXQgcmVxdWlyZXMgb3RoZXJ3aXNlLCBJIGdyYW50IHRvIG15IGhlYWx0aGNhcmUgYWdlbnQgdGhlIHBvd2VyIHRvIG1ha2UgYWxsIGNob2ljZXMgYW5kIG1lZGljYWwgdHJlYXRtZW50IGRlY2lzaW9ucyBmb3IgbWUuPC9zcGFuPiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgIDwvc3Bhbj48YnIvPiAgICA8c3Bhbj4gICAgICAgIDxzcGFuPiAgICAgICAgICAgIElmIEkgY2Fubm90IGV4cHJlc3MgbXkgb3duIHdpc2hlcyBmb3IgbWVkaWNhbCB0cmVhdG1lbnQsICAgICAgICA8L3NwYW4+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICBJIHdvdWxkIGxpa2UgdGhlIGRvY3RvcnMgdHJlYXRpbmcgbWUsIGFzIHdlbGwgYXMgbXkgaGVhbHRoY2FyZSBhZ2VudCBpZiBJIGhhdmUgY2hvc2VuIG9uZSwgdG8gbWFrZSBkZWNpc2lvbnMgYmFzZWQgYXMgbXVjaCBhcyBwb3NzaWJsZSBhbmQgYXBwcm9wcmlhdGUgb24gbXkgaW5zdHJ1Y3Rpb25zIGJlbG93LiAgICAgICAgPC9zcGFuPiAgICA8L3NwYW4+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSWYgYXQgc29tZSBwb2ludCBpbiB0aGUgZnV0dXJlIEkgYW0gZGVjbGFyZWQgaW5jb21wZXRlbnQsICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBJIERPIE5PVCB3YW50IHRvIGJlIGFsbG93ZWQgdG8gb3ZlcnJpZGUgdGhlc2UgcHJlZmVyZW5jZXMuIEkgd2FudCBteSBkb2N0b3JzIHRvIGZvbGxvdyB0aGUgcHJlZmVyZW5jZXMgSSBleHByZXNzIGluIHRoaXMgZG9jdW1lbnQuICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9zcGFuPjxici8+PGJyLz4gICAgPHNwYW4+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICBVbmxlc3MgSSBoYXZlIHN0YXRlZCBvdGhlcndpc2Ugc29tZXdoZXJlIGVsc2UgaW4gdGhpcyB1QURE4oSiLCBJIHVuZGVyc3RhbmQgdGhhdCBteSBoZWFsdGhjYXJlIGFnZW50IG1heSByZWNvbnNpZGVyIG15IG1lZGljYWwgdHJlYXRtZW50IGNob2ljZXMgZXhwcmVzc2VkIGFib3ZlIGluIGxpZ2h0IG9mIG15IG90aGVyIGluc3RydWN0aW9ucyBjb250YWluZWQgZWxzZXdoZXJlIGluIHRoaXMgdUFEROKEoiBvciBuZXcgbWVkaWNhbCBpbmZvcm1hdGlvbi4gICAgICAgIDwvc3Bhbj4gICAgPC9zcGFuPjxici8+PC9kaXY+In0sImVudHJ5IjpbeyJyZWZlcmVuY2UiOiJSZWxhdGVkUGVyc29uLzc4MDFjNTMwLTk0OWItNGNhZC1iY2E0LWUyMDMyMGUwOTllYiJ9LHsicmVmZXJlbmNlIjoiQ29uc2VudC82YmFjMzAzNS1jZGIwLTQ5ZWMtOWRmNC1lODYyOTZjMzAyYzkifSx7InJlZmVyZW5jZSI6IlJlbGF0ZWRQZXJzb24vZDJjMDdmMTItNTg1ZS00MTNhLWI5OWQtMzhkNjk4MmQ3ZjgxIn0seyJyZWZlcmVuY2UiOiJDb25zZW50LzYyM2ZiZWNiLTY5OWYtNDBlNi05ZTNhLWI4NjQ3NDAyNDc1MiJ9LHsicmVmZXJlbmNlIjoiUmVsYXRlZFBlcnNvbi83MGNlNjJjMS1hNDc1LTRmNTItYWMxMi1lOTM0NWFkYWU2NzEifSx7InJlZmVyZW5jZSI6IkNvbnNlbnQvMWRhMjVhMzctYzc3NC00ZmZkLWFhODEtYjg3MjJhZDJjZGE4In1dfSx7ImV4dGVuc2lvbiI6W3sidXJsIjoiaHR0cDovL2hsNy5vcmcvZmhpci91cy9wYWNpby1hZGkvU3RydWN0dXJlRGVmaW5pdGlvbi9wYWRpLWNsYXVzZS1leHRlbnNpb24iLCJleHRlbnNpb24iOlt7InVybCI6IkNsYXVzZSIsInZhbHVlTWFya2Rvd24iOiI8ZGl2PjxzcGFuPiAgICAgICAgTXlEaXJlY3RpdmVzwq4gb2ZmZXJzIHBlb3BsZSBhIGxpc3Qgb2Ygb3B0aW9uYWwgcXVlc3Rpb25zIHRoYXQgY2FuIGJlIGFuc3dlcmVkIGJ5IHR5cGluZyB0ZXh0IGluIGEgdGV4dCBib3ggb3IgYnkgdXBsb2FkaW5nIGEgdmlkZW8gb3IgYXVkaW8gZmlsZSBmb3IgZWFjaCBxdWVzdGlvbi4gT25seSB0aG9zZSBxdWVzdGlvbnMgYW5zd2VyZWQgYnkgQmV0c3kgU21pdGgtSm9obnNvbiBhcHBlYXIgaGVyZS4gRm9yIGEgY29tcGxldGUgbGlzdCBvZiBxdWVzdGlvbnMgaW4gTXkgVGhvdWdodHMsIHBsZWFzZSB2aXNpdCB3d3cuTXlEaXJlY3RpdmVzLmNvbS4gICAgPC9zcGFuPjxicj48L2JyPjxicj48L2JyPiAgICA8c3Bhbj4gICAgICAgIEluIGNhc2UgSeKAmW0gYmVpbmcgY2FyZWQgZm9yIGJ5IGEgcGVyc29uKHMpIHdobyBkb2Vzbid0IGtub3cgbWUgdmVyeSB3ZWxsLCBJ4oCZZCBsaWtlIG15IGZvbGxvd2luZyB0aG91Z2h0cyB0byBiZSBrbm93bi4gICAgPC9zcGFuPjxicj48L2JyPjxicj48L2JyPiAgICAgICAgPHNwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIE15IGxpa2VzIC8gam95czogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIEhlcmUgYXJlIHNvbWUgZXhhbXBsZXMgb2YgdGhlIHRoaW5ncyB0aGF0IEkgd291bGQgbGlrZSB0byBoYXZlIG5lYXIgbWUsIG11c2ljIHRoYXQgSeKAmWQgbGlrZSB0byBoZWFyLCBhbmQgb3RoZXIgZGV0YWlscyBvZiBteSBjYXJlIHRoYXQgd291bGQgaGVscCB0byBrZWVwIG1lIGhhcHB5IGFuZCByZWxheGVkOiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICA8YnI+PC9icj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSSBsb3ZlIHRoZSBzbWVsbCBvZiBsYXZlbmRlciBhbmQgdGhlIGZlZWxpbmcgb2Ygc3Vuc2hpbmUgb24gbXkgZmFjZS4gICAgICAgICAgICA8L3NwYW4+ICAgICAgICA8L3NwYW4+PGJyPjwvYnI+PGJyPjwvYnI+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgTXkgZGlzbGlrZXMgLyBmZWFyczogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIEhlcmUgaXMgYSBsaXN0IG9mIHRoaW5ncyB0aGF0IEkgd291bGQgbGlrZSB0byBhdm9pZCBpZiBhdCBhbGwgcG9zc2libGUsIHBlb3BsZSB0aGF0IEkgZG9u4oCZdCB3aXNoIHRvIHNlZSwgYW5kIGNvbmNlcm5zIEkgaGF2ZSBhYm91dCBwYXJ0aWN1bGFyIGZhbWlseSBtZW1iZXJzLCBwZXRzLCBhbmQgc28gb246ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxicj48L2JyPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBJIGRvIG5vdCBsaWtlIG15IGZlZXQgdG8gYmUgY29sZC4gICAgICAgICAgICA8L3NwYW4+ICAgICAgICA8L3NwYW4+PGJyPjwvYnI+PGJyPjwvYnI+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSG93IHRvIGNhcmUgZm9yIG1lOiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSWYgSSBiZWNvbWUgaW5jYXBhY2l0YXRlZCBhbmQgY2Fubm90IGV4cHJlc3MgbXlzZWxmLCBoZXJlIGlzIHdoYXQgSSB3b3VsZCBsaWtlIHRvIHRlbGwgbXkgaGVhbHRoY2FyZSBhZ2VudCwgZmFtaWx5IGFuZCBmcmllbmRzIGFib3V0IGhvdyBJIHdvdWxkIGxpa2UgZm9yIHRoZW0gdG8gY2FyZSBmb3IgbWU6ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxicj48L2JyPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBJIHdhbnQgcGhvdG9zIG9mIG15IGZhbWlseSB3aGVyZSBJIGNhbiBzZWUgdGhlbS4gICAgICAgICAgICA8L3NwYW4+ICAgICAgICA8L3NwYW4+PGJyPjwvYnI+PGJyPjwvYnI+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgTXkgcmVsaWdpb246ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBJZiBJIGFwcGVhciB0byBiZSBhcHByb2FjaGluZyB0aGUgZW5kIG9mIG15IGxpZmUsIGhlcmUgYXJlIHNvbWUgdGhpbmdzIHRoYXQgSSB3b3VsZCBsaWtlIGZvciBteSBjYXJlZ2l2ZXJzIHRvIGtub3cgYWJvdXQgbXkgZmFpdGggYW5kIG15IHJlbGlnaW9uLiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICA8YnI+PC9icj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgUGxlYXNlIGNhbGwgRmF0aGVyIE1hcmsgaWYgbXkgY29uZGl0aW9uIHdhcnJhbnRzIHRoZSBzZXJ2aWNlcyBvZiBhIHByaWVzdC4gICAgICAgICAgICA8L3NwYW4+ICAgICAgICA8L3NwYW4+PGJyPjwvYnI+PGJyPjwvYnI+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgUGxlYXNlIGF0dGVtcHQgdG8gbm90aWZ5IHNvbWVvbmUgZnJvbSBteSByZWxpZ2lvbiBhdCB0aGUgZm9sbG93aW5nIHBob25lIG51bWJlcjogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIElmIEkgaGF2ZSBpbmNsdWRlZCBvbmUgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPGJyPjwvYnI+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIENhdGhvbGljICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9zcGFuPjxicj48L2JyPjxicj48L2JyPiAgICAgICAgPHNwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIE15IHVuZmluaXNoZWQgYnVzaW5lc3M6ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBJZiBpdCBhcHBlYXJzIHRoYXQgSSBhbSBhcHByb2FjaGluZyB0aGUgZW5kIG9mIG15IGxpZmUsIGFuZCBJIGNhbm5vdCBjb21tdW5pY2F0ZSB3aXRoIHBlcnNvbnMgYXJvdW5kIG1lLCBJIHdvdWxkIHdhbnQgbXkgZG9jdG9ycyBhbmQgbnVyc2VzLCBteSBmYW1pbHksIGFuZCBteSBmcmllbmRzIHRvIGtub3cgYWJvdXQgc29tZSB1bmZpbmlzaGVkIGJ1c2luZXNzIHRoYXQgSSBuZWVkIHRvIGFkZHJlc3M6ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxicj48L2JyPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBJIHdhbnQgbXkgc2lzdGVyIGFuZCBJIHRvIHRhbGsgYWdhaW4sIGFuZCBtaXNzIGhlci4gIEkgd2lzaCB3ZSBoYWRuJ3QgZGlzYWdyZWVkIGFsbCB0aG9zZSB5ZWFycyBhZ28gYW5kIHJlZ3JldCB0aGUgdGltZSBpdCBoYXMgY29zdCB1cy4gIEknZCBsaWtlIHRvIHNlZSBoZXIgZmFjZSBpZiBJIHdlcmUgdmVyeSBpbGwgYW5kIG5lZWRlZCB0aGUgY29tZm9ydCBvZiBmYW1pbHkgYXQgbXkgc2lkZS4gICAgICAgICAgICA8L3NwYW4+ICAgICAgICA8L3NwYW4+PGJyPjwvYnI+PGJyPjwvYnI+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgTGF1Z2h0ZXI6ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBUaGVzZSBhcmUgc29tZSBvZiBteSBmb25kZXN0IG1lbW9yaWVzIGZyb20gbGlmZSB0aGF0IGhhdmUgYWx3YXlzIGJyb3VnaHQgYSBzbWlsZSB0byBteSBmYWNlIG9yIG1hZGUgbWUgbGF1Z2g6ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxicj48L2JyPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBNeSBkb2dzIG1ha2UgbWUgbGF1Z2ggd2hlbiB0aGV5IHBsYXkgdG9nZXRoZXIsIGFuZCBteSBncmFuZGNoaWxkcmVuIG1ha2UgbWUgbGF1Z2ggd2hlbiB0aGV5IHB1dCBvbiBwbGF5cyBmb3IgbWUuICBUaGV5IGJyaW5nIG1lIGdyZWF0IGpveS4gICAgICAgICAgICA8L3NwYW4+ICAgICAgICA8L3NwYW4+PGJyPjwvYnI+PGJyPjwvYnI+PC9kaXY+In1dfV0sInRpdGxlIjoiTXkgVGhvdWdodHMiLCJjb2RlIjp7ImNvZGluZyI6W3sic3lzdGVtIjoiaHR0cDovL2xvaW5jLm9yZyIsImNvZGUiOiI4MTMzOC02IiwiZGlzcGxheSI6IkdQUCBmb3IgY2FyZSBleHBlcmllbmNlIn1dfSwidGV4dCI6eyJzdGF0dXMiOiJnZW5lcmF0ZWQiLCJkaXYiOiI8ZGl2IHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPjxzcGFuPiAgICAgICAgTXlEaXJlY3RpdmVzwq4gb2ZmZXJzIHBlb3BsZSBhIGxpc3Qgb2Ygb3B0aW9uYWwgcXVlc3Rpb25zIHRoYXQgY2FuIGJlIGFuc3dlcmVkIGJ5IHR5cGluZyB0ZXh0IGluIGEgdGV4dCBib3ggb3IgYnkgdXBsb2FkaW5nIGEgdmlkZW8gb3IgYXVkaW8gZmlsZSBmb3IgZWFjaCBxdWVzdGlvbi4gT25seSB0aG9zZSBxdWVzdGlvbnMgYW5zd2VyZWQgYnkgQmV0c3kgU21pdGgtSm9obnNvbiBhcHBlYXIgaGVyZS4gRm9yIGEgY29tcGxldGUgbGlzdCBvZiBxdWVzdGlvbnMgaW4gTXkgVGhvdWdodHMsIHBsZWFzZSB2aXNpdCB3d3cuTXlEaXJlY3RpdmVzLmNvbS4gICAgPC9zcGFuPjxici8+PGJyLz4gICAgPHNwYW4+ICAgICAgICBJbiBjYXNlIEnigJltIGJlaW5nIGNhcmVkIGZvciBieSBhIHBlcnNvbihzKSB3aG8gZG9lc24ndCBrbm93IG1lIHZlcnkgd2VsbCwgSeKAmWQgbGlrZSBteSBmb2xsb3dpbmcgdGhvdWdodHMgdG8gYmUga25vd24uICAgIDwvc3Bhbj48YnIvPjxici8+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgTXkgbGlrZXMgLyBqb3lzOiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSGVyZSBhcmUgc29tZSBleGFtcGxlcyBvZiB0aGUgdGhpbmdzIHRoYXQgSSB3b3VsZCBsaWtlIHRvIGhhdmUgbmVhciBtZSwgbXVzaWMgdGhhdCBJ4oCZZCBsaWtlIHRvIGhlYXIsIGFuZCBvdGhlciBkZXRhaWxzIG9mIG15IGNhcmUgdGhhdCB3b3VsZCBoZWxwIHRvIGtlZXAgbWUgaGFwcHkgYW5kIHJlbGF4ZWQ6ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxici8+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIEkgbG92ZSB0aGUgc21lbGwgb2YgbGF2ZW5kZXIgYW5kIHRoZSBmZWVsaW5nIG9mIHN1bnNoaW5lIG9uIG15IGZhY2UuICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9zcGFuPjxici8+PGJyLz4gICAgICAgIDxzcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBNeSBkaXNsaWtlcyAvIGZlYXJzOiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSGVyZSBpcyBhIGxpc3Qgb2YgdGhpbmdzIHRoYXQgSSB3b3VsZCBsaWtlIHRvIGF2b2lkIGlmIGF0IGFsbCBwb3NzaWJsZSwgcGVvcGxlIHRoYXQgSSBkb27igJl0IHdpc2ggdG8gc2VlLCBhbmQgY29uY2VybnMgSSBoYXZlIGFib3V0IHBhcnRpY3VsYXIgZmFtaWx5IG1lbWJlcnMsIHBldHMsIGFuZCBzbyBvbjogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPGJyLz4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSSBkbyBub3QgbGlrZSBteSBmZWV0IHRvIGJlIGNvbGQuICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9zcGFuPjxici8+PGJyLz4gICAgICAgIDxzcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBIb3cgdG8gY2FyZSBmb3IgbWU6ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBJZiBJIGJlY29tZSBpbmNhcGFjaXRhdGVkIGFuZCBjYW5ub3QgZXhwcmVzcyBteXNlbGYsIGhlcmUgaXMgd2hhdCBJIHdvdWxkIGxpa2UgdG8gdGVsbCBteSBoZWFsdGhjYXJlIGFnZW50LCBmYW1pbHkgYW5kIGZyaWVuZHMgYWJvdXQgaG93IEkgd291bGQgbGlrZSBmb3IgdGhlbSB0byBjYXJlIGZvciBtZTogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPGJyLz4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSSB3YW50IHBob3RvcyBvZiBteSBmYW1pbHkgd2hlcmUgSSBjYW4gc2VlIHRoZW0uICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9zcGFuPjxici8+PGJyLz4gICAgICAgIDxzcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBNeSByZWxpZ2lvbjogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIElmIEkgYXBwZWFyIHRvIGJlIGFwcHJvYWNoaW5nIHRoZSBlbmQgb2YgbXkgbGlmZSwgaGVyZSBhcmUgc29tZSB0aGluZ3MgdGhhdCBJIHdvdWxkIGxpa2UgZm9yIG15IGNhcmVnaXZlcnMgdG8ga25vdyBhYm91dCBteSBmYWl0aCBhbmQgbXkgcmVsaWdpb24uICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxici8+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIFBsZWFzZSBjYWxsIEZhdGhlciBNYXJrIGlmIG15IGNvbmRpdGlvbiB3YXJyYW50cyB0aGUgc2VydmljZXMgb2YgYSBwcmllc3QuICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9zcGFuPjxici8+PGJyLz4gICAgICAgIDxzcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBQbGVhc2UgYXR0ZW1wdCB0byBub3RpZnkgc29tZW9uZSBmcm9tIG15IHJlbGlnaW9uIGF0IHRoZSBmb2xsb3dpbmcgcGhvbmUgbnVtYmVyOiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSWYgSSBoYXZlIGluY2x1ZGVkIG9uZSAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICA8YnIvPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBDYXRob2xpYyAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgIDwvc3Bhbj48YnIvPjxici8+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgTXkgdW5maW5pc2hlZCBidXNpbmVzczogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIElmIGl0IGFwcGVhcnMgdGhhdCBJIGFtIGFwcHJvYWNoaW5nIHRoZSBlbmQgb2YgbXkgbGlmZSwgYW5kIEkgY2Fubm90IGNvbW11bmljYXRlIHdpdGggcGVyc29ucyBhcm91bmQgbWUsIEkgd291bGQgd2FudCBteSBkb2N0b3JzIGFuZCBudXJzZXMsIG15IGZhbWlseSwgYW5kIG15IGZyaWVuZHMgdG8ga25vdyBhYm91dCBzb21lIHVuZmluaXNoZWQgYnVzaW5lc3MgdGhhdCBJIG5lZWQgdG8gYWRkcmVzczogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPGJyLz4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSSB3YW50IG15IHNpc3RlciBhbmQgSSB0byB0YWxrIGFnYWluLCBhbmQgbWlzcyBoZXIuICBJIHdpc2ggd2UgaGFkbid0IGRpc2FncmVlZCBhbGwgdGhvc2UgeWVhcnMgYWdvIGFuZCByZWdyZXQgdGhlIHRpbWUgaXQgaGFzIGNvc3QgdXMuICBJJ2QgbGlrZSB0byBzZWUgaGVyIGZhY2UgaWYgSSB3ZXJlIHZlcnkgaWxsIGFuZCBuZWVkZWQgdGhlIGNvbWZvcnQgb2YgZmFtaWx5IGF0IG15IHNpZGUuICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9zcGFuPjxici8+PGJyLz4gICAgICAgIDxzcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBMYXVnaHRlcjogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIFRoZXNlIGFyZSBzb21lIG9mIG15IGZvbmRlc3QgbWVtb3JpZXMgZnJvbSBsaWZlIHRoYXQgaGF2ZSBhbHdheXMgYnJvdWdodCBhIHNtaWxlIHRvIG15IGZhY2Ugb3IgbWFkZSBtZSBsYXVnaDogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPGJyLz4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgTXkgZG9ncyBtYWtlIG1lIGxhdWdoIHdoZW4gdGhleSBwbGF5IHRvZ2V0aGVyLCBhbmQgbXkgZ3JhbmRjaGlsZHJlbiBtYWtlIG1lIGxhdWdoIHdoZW4gdGhleSBwdXQgb24gcGxheXMgZm9yIG1lLiAgVGhleSBicmluZyBtZSBncmVhdCBqb3kuICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9zcGFuPjxici8+PGJyLz48L2Rpdj4ifSwiZW50cnkiOlt7InJlZmVyZW5jZSI6IkdvYWwvNDY2OTI3NGYtNzU3Yi00YWE4LWI3MTYtYWQ4NzExNTgwZDgyIn0seyJyZWZlcmVuY2UiOiJHb2FsL2Y2OTRlYTNmLTI0ZDQtNGE5ZC04YmZlLTJiMWEwYTk1ODg3OSJ9LHsicmVmZXJlbmNlIjoiR29hbC9hNzMyMmE5NC01ZTAzLTQxYjgtOTQ0Mi1iM2EwZTYwNDQ5ZGUifSx7InJlZmVyZW5jZSI6IkdvYWwvYjZjY2YxOGUtMTVhZC00OTY3LTk4NGUtNmZjMmYwNzQ5MWRlIn0seyJyZWZlcmVuY2UiOiJHb2FsLzgxMzI5NGU1LTAzYzAtNDAzZi04Njc1LWE3ZDBmNDRjOTE4ZiJ9LHsicmVmZXJlbmNlIjoiR29hbC8zMjRlMWRjNy1jNzA4LTQ2Y2EtYjg4Yi1jYjE1YzJiNGU3OTQifSx7InJlZmVyZW5jZSI6IkdvYWwvN2NiMWUzOTktOWJlMi00MWU1LTg3OWMtYzZmNzcwNjEyM2RkIn1dfSx7ImV4dGVuc2lvbiI6W3sidXJsIjoiaHR0cDovL2hsNy5vcmcvZmhpci91cy9wYWNpby1hZGkvU3RydWN0dXJlRGVmaW5pdGlvbi9wYWRpLWNsYXVzZS1leHRlbnNpb24iLCJleHRlbnNpb24iOlt7InVybCI6IkNsYXVzZSIsInZhbHVlTWFya2Rvd24iOiI8ZGl2PjxwPkkgYW0gZW1vdGlvbmFsbHkgYW5kIG1lbnRhbGx5IGNvbXBldGVudCB0byBtYWtlIHRoaXMgdUFERC4gIEkgdW5kZXJzdGFuZCB0aGUgcHVycG9zZSBhbmQgZWZmZWN0IG9mIHRoaXMgdUFERCwgSSBhZ3JlZSB3aXRoIGV2ZXJ5dGhpbmcgdGhhdCBpcyB3cml0dGVuIGluIHRoaXMgdUFERCwgYW5kIEkgaGF2ZSBtYWRlIHRoaXMgdUFERCBrbm93aW5nbHksIHdpbGxpbmdseSBhbmQgYWZ0ZXIgY2FyZWZ1bCBkZWxpYmVyYXRpb24uPC9wPjx0YWJsZT4gICAgPHRoZWFkPiAgICAgICAgPHRyPiAgICAgICAgICAgIDx0ZD5EYXRhIFR5cGU8L3RkPiAgICAgICAgICAgIDx0ZD5JbmZvcm1hdGlvbjwvdGQ+ICAgICAgICA8L3RyPiAgICA8L3RoZWFkPiAgICA8dGJvZHk+ICAgICAgICA8dHI+ICAgICAgICAgICAgPHRkPlNpZ25hdHVyZTo8L3RkPiAgICAgICAgICAgIDx0ZD5CZXRzeSBTbWl0aC1Kb2huc29uPC90ZD4gICAgICAgIDwvdHI+ICAgICAgICA8dHI+ICAgICAgICAgICAgPHRkPkRhdGU6PC90ZD4gICAgICAgICAgICA8dGQ+My8yOS8yMDIxPC90ZD4gICAgICAgIDwvdHI+ICAgIDwvdGJvZHk+PC90YWJsZT48YnI+PC9icj48YnI+PC9icj48c3Bhbj4gICAgU3RhdGVtZW50IG9mIFdpdG5lc3Nlczwvc3Bhbj48YnI+PC9icj48YnI+PC9icj48c3Bhbj4gICAgSSBkZWNsYXJlIHRoYXQgdGhlIHBlcnNvbiB3aG8gc2lnbmVkIHRoaXMgdUFERCwgb3Igd2hvIGFza2VkIGFub3RoZXIgdG8gc2lnbiB0aGlzIHVBREQgb24gaGlzL2hlciBiZWhhbGYsIGlzIHRoZSBpbmRpdmlkdWFsIGlkZW50aWZpZWQgaW4gdGhlIGRvY3VtZW50LCBhbmQgaGUvc2hlIGRpZCBzbyBpbiBteSBwcmVzZW5jZSBvciBvdGhlcndpc2UgcHJvdmlkZWQgc2F0aXNmYWN0b3J5IHByb29mIHRvIG1lIG9mIGhpcy9oZXIgaWRlbnRpdHkuIEkgYmVsaWV2ZSBoaW0vaGVyIHRvIGJlIG9mIHNvdW5kIG1pbmQgYW5kIGF0IGxlYXN0IDE4IHllYXJzIG9mIGFnZS4gSSBwZXJzb25hbGx5IHdpdG5lc3NlZCBoaW0vaGVyIHNpZ24gdGhpcyBkb2N1bWVudCBvciBhc2sgdGhlIHBlcnNvbiBpbmRpY2F0ZWQgdG8gZG8gc28sIG9yIEkgcmVjZWl2ZWQgcHJvb2Ygb2YgaGlzL2hlciBpZGVudGl0eSB0aGF0IEkgYmVsaWV2ZSBpcyBhZGVxdWF0ZSwgYW5kIEkgYmVsaWV2ZSB0aGF0IGhlL3NoZSBkaWQgc28gdm9sdW50YXJpbHkuICBCeSBzaWduaW5nIHRoaXMgZG9jdW1lbnQgYXMgYSB3aXRuZXNzLCBJIGNlcnRpZnkgdGhhdCBJIGFtOjwvc3Bhbj48YnI+PC9icj48YnI+PC9icj48dWw+ICAgIDxsaT5BdCBsZWFzdCAxOCB5ZWFycyBvZiBhZ2UuPC9saT4gICAgPGxpPk5vdCByZWxhdGVkIHRvIHRoZSBwZXJzb24gc2lnbmluZyB0aGlzIGRvY3VtZW50IGJ5IGJsb29kLCBtYXJyaWFnZSBvciBhZG9wdGlvbi48L2xpPiAgICA8bGk+Tm90IGEgaGVhbHRoY2FyZSBhZ2VudCBhcHBvaW50ZWQgYnkgdGhlIHBlcnNvbiBzaWduaW5nIHRoaXMgZG9jdW1lbnQuPC9saT4gICAgPGxpPk5vdCBkaXJlY3RseSBmaW5hbmNpYWxseSByZXNwb25zaWJsZSBmb3IgdGhhdCBwZXJzb27igJlzIGhlYWx0aGNhcmUuPC9saT4gICAgPGxpPk5vdCBhIGhlYWx0aGNhcmUgcHJvdmlkZXIgZGlyZWN0bHkgc2VydmluZyB0aGUgcGVyc29uIGF0IHRoaXMgdGltZS48L2xpPiAgICA8bGk+Tm90IGFuIGVtcGxveWVlIChvdGhlciB0aGFuIGEgc29jaWFsIHdvcmtlciBvciBjaGFwbGFpbiksIG9mZmljZXIsIGRpcmVjdG9yLCBvciBwYXJ0bmVyIG9mIGEgaGVhbHRoY2FyZSBwcm92aWRlciAob3IgYW55IHBhcmVudCBvcmdhbml6YXRpb24gb2Ygc3VjaCBoZWFsdGhjYXJlIHByb3ZpZGVyKSBkaXJlY3RseSBzZXJ2aW5nIHRoZSBwZXJzb24gYXQgdGhpcyB0aW1lLjwvbGk+ICAgIDxsaT5Ob3QgYXdhcmUgdGhhdCBJIGFtIGVudGl0bGVkIHRvIG9yIGhhdmUgYSBjbGFpbSBhZ2FpbnN0IHRoZSBwZXJzb27igJlzIGVzdGF0ZS48L2xpPjwvdWw+PGJyPjwvYnI+PGJyPjwvYnI+ICAgIDx0YWJsZT4gICAgICAgIDx0aGVhZD4gICAgICAgICAgICA8dHI+ICAgICAgICAgICAgICAgIDx0ZD5EYXRhIFR5cGU8L3RkPiAgICAgICAgICAgICAgICA8dGQ+SW5mb3JtYXRpb248L3RkPiAgICAgICAgICAgIDwvdHI+ICAgICAgICA8L3RoZWFkPiAgICAgICAgPHRib2R5PiAgICAgICAgICAgIDx0cj4gICAgICAgICAgICAgICAgPHRkPldpdG5lc3MgTnVtYmVyOjwvdGQ+ICAgICAgICAgICAgICAgIDx0ZD48L3RkPiAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICA8dGQ+U2lnbmF0dXJlOjwvdGQ+ICAgICAgICAgICAgICAgIDx0ZD48L3RkPiAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICA8dGQ+RGF0ZTo8L3RkPiAgICAgICAgICAgICAgICA8dGQ+PC90ZD4gICAgICAgICAgICA8L3RyPiAgICAgICAgPC90Ym9keT4gICAgPC90YWJsZT48YnI+PC9icj4gICAgICAgIDxicj48L2JyPjxicj48L2JyPjxicj48L2JyPjwvZGl2PiJ9XX1dLCJ0aXRsZSI6IldpdG5lc3NlcyBhbmQgTm90YXJ5IiwiY29kZSI6eyJjb2RpbmciOlt7InN5c3RlbSI6Imh0dHA6Ly9sb2luYy5vcmciLCJjb2RlIjoiODEzMzktNCIsImRpc3BsYXkiOiJXaXRuZXNzZXMgYW5kIE5vdGFyeSJ9XX0sInRleHQiOnsic3RhdHVzIjoiZ2VuZXJhdGVkIiwiZGl2IjoiPGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj48cD5JIGFtIGVtb3Rpb25hbGx5IGFuZCBtZW50YWxseSBjb21wZXRlbnQgdG8gbWFrZSB0aGlzIHVBREQuICBJIHVuZGVyc3RhbmQgdGhlIHB1cnBvc2UgYW5kIGVmZmVjdCBvZiB0aGlzIHVBREQsIEkgYWdyZWUgd2l0aCBldmVyeXRoaW5nIHRoYXQgaXMgd3JpdHRlbiBpbiB0aGlzIHVBREQsIGFuZCBJIGhhdmUgbWFkZSB0aGlzIHVBREQga25vd2luZ2x5LCB3aWxsaW5nbHkgYW5kIGFmdGVyIGNhcmVmdWwgZGVsaWJlcmF0aW9uLjwvcD48dGFibGU+ICAgIDx0aGVhZD4gICAgICAgIDx0cj4gICAgICAgICAgICA8dGQ+RGF0YSBUeXBlPC90ZD4gICAgICAgICAgICA8dGQ+SW5mb3JtYXRpb248L3RkPiAgICAgICAgPC90cj4gICAgPC90aGVhZD4gICAgPHRib2R5PiAgICAgICAgPHRyPiAgICAgICAgICAgIDx0ZD5TaWduYXR1cmU6PC90ZD4gICAgICAgICAgICA8dGQ+QmV0c3kgU21pdGgtSm9obnNvbjwvdGQ+ICAgICAgICA8L3RyPiAgICAgICAgPHRyPiAgICAgICAgICAgIDx0ZD5EYXRlOjwvdGQ+ICAgICAgICAgICAgPHRkPjMvMjkvMjAyMTwvdGQ+ICAgICAgICA8L3RyPiAgICA8L3Rib2R5PjwvdGFibGU+PGJyLz48YnIvPjxzcGFuPiAgICBTdGF0ZW1lbnQgb2YgV2l0bmVzc2VzPC9zcGFuPjxici8+PGJyLz48c3Bhbj4gICAgSSBkZWNsYXJlIHRoYXQgdGhlIHBlcnNvbiB3aG8gc2lnbmVkIHRoaXMgdUFERCwgb3Igd2hvIGFza2VkIGFub3RoZXIgdG8gc2lnbiB0aGlzIHVBREQgb24gaGlzL2hlciBiZWhhbGYsIGlzIHRoZSBpbmRpdmlkdWFsIGlkZW50aWZpZWQgaW4gdGhlIGRvY3VtZW50LCBhbmQgaGUvc2hlIGRpZCBzbyBpbiBteSBwcmVzZW5jZSBvciBvdGhlcndpc2UgcHJvdmlkZWQgc2F0aXNmYWN0b3J5IHByb29mIHRvIG1lIG9mIGhpcy9oZXIgaWRlbnRpdHkuIEkgYmVsaWV2ZSBoaW0vaGVyIHRvIGJlIG9mIHNvdW5kIG1pbmQgYW5kIGF0IGxlYXN0IDE4IHllYXJzIG9mIGFnZS4gSSBwZXJzb25hbGx5IHdpdG5lc3NlZCBoaW0vaGVyIHNpZ24gdGhpcyBkb2N1bWVudCBvciBhc2sgdGhlIHBlcnNvbiBpbmRpY2F0ZWQgdG8gZG8gc28sIG9yIEkgcmVjZWl2ZWQgcHJvb2Ygb2YgaGlzL2hlciBpZGVudGl0eSB0aGF0IEkgYmVsaWV2ZSBpcyBhZGVxdWF0ZSwgYW5kIEkgYmVsaWV2ZSB0aGF0IGhlL3NoZSBkaWQgc28gdm9sdW50YXJpbHkuICBCeSBzaWduaW5nIHRoaXMgZG9jdW1lbnQgYXMgYSB3aXRuZXNzLCBJIGNlcnRpZnkgdGhhdCBJIGFtOjwvc3Bhbj48YnIvPjxici8+PHVsPiAgICA8bGk+QXQgbGVhc3QgMTggeWVhcnMgb2YgYWdlLjwvbGk+ICAgIDxsaT5Ob3QgcmVsYXRlZCB0byB0aGUgcGVyc29uIHNpZ25pbmcgdGhpcyBkb2N1bWVudCBieSBibG9vZCwgbWFycmlhZ2Ugb3IgYWRvcHRpb24uPC9saT4gICAgPGxpPk5vdCBhIGhlYWx0aGNhcmUgYWdlbnQgYXBwb2ludGVkIGJ5IHRoZSBwZXJzb24gc2lnbmluZyB0aGlzIGRvY3VtZW50LjwvbGk+ICAgIDxsaT5Ob3QgZGlyZWN0bHkgZmluYW5jaWFsbHkgcmVzcG9uc2libGUgZm9yIHRoYXQgcGVyc29u4oCZcyBoZWFsdGhjYXJlLjwvbGk+ICAgIDxsaT5Ob3QgYSBoZWFsdGhjYXJlIHByb3ZpZGVyIGRpcmVjdGx5IHNlcnZpbmcgdGhlIHBlcnNvbiBhdCB0aGlzIHRpbWUuPC9saT4gICAgPGxpPk5vdCBhbiBlbXBsb3llZSAob3RoZXIgdGhhbiBhIHNvY2lhbCB3b3JrZXIgb3IgY2hhcGxhaW4pLCBvZmZpY2VyLCBkaXJlY3Rvciwgb3IgcGFydG5lciBvZiBhIGhlYWx0aGNhcmUgcHJvdmlkZXIgKG9yIGFueSBwYXJlbnQgb3JnYW5pemF0aW9uIG9mIHN1Y2ggaGVhbHRoY2FyZSBwcm92aWRlcikgZGlyZWN0bHkgc2VydmluZyB0aGUgcGVyc29uIGF0IHRoaXMgdGltZS48L2xpPiAgICA8bGk+Tm90IGF3YXJlIHRoYXQgSSBhbSBlbnRpdGxlZCB0byBvciBoYXZlIGEgY2xhaW0gYWdhaW5zdCB0aGUgcGVyc29u4oCZcyBlc3RhdGUuPC9saT48L3VsPjxici8+PGJyLz4gICAgPHRhYmxlPiAgICAgICAgPHRoZWFkPiAgICAgICAgICAgIDx0cj4gICAgICAgICAgICAgICAgPHRkPkRhdGEgVHlwZTwvdGQ+ICAgICAgICAgICAgICAgIDx0ZD5JbmZvcm1hdGlvbjwvdGQ+ICAgICAgICAgICAgPC90cj4gICAgICAgIDwvdGhlYWQ+ICAgICAgICA8dGJvZHk+ICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICA8dGQ+V2l0bmVzcyBOdW1iZXI6PC90ZD4gICAgICAgICAgICAgICAgPHRkLz4gICAgICAgICAgICA8L3RyPiAgICAgICAgICAgIDx0cj4gICAgICAgICAgICAgICAgPHRkPlNpZ25hdHVyZTo8L3RkPiAgICAgICAgICAgICAgICA8dGQvPiAgICAgICAgICAgIDwvdHI+ICAgICAgICAgICAgPHRyPiAgICAgICAgICAgICAgICA8dGQ+RGF0ZTo8L3RkPiAgICAgICAgICAgICAgICA8dGQvPiAgICAgICAgICAgIDwvdHI+ICAgICAgICA8L3Rib2R5PiAgICA8L3RhYmxlPjxici8+ICAgICAgICA8YnIvPjxici8+PGJyLz48L2Rpdj4ifX0seyJleHRlbnNpb24iOlt7InVybCI6Imh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvcGFjaW8tYWRpL1N0cnVjdHVyZURlZmluaXRpb24vcGFkaS1jbGF1c2UtZXh0ZW5zaW9uIiwiZXh0ZW5zaW9uIjpbeyJ1cmwiOiJDbGF1c2UiLCJ2YWx1ZU1hcmtkb3duIjoiPGRpdj48c3Bhbj4gICAgICAgICAgICA8c3Bhbj5Db25zZW50IHRvIERvbmF0ZTwvc3Bhbj48YnI+PC9icj4gICAgICAgICAgICA8c3Bhbj5JIGNvbnNlbnQgdG8gZG9uYXRlIGFsbCBvcmdhbnMgYW5kIHRpc3N1ZXMuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+ICAgICAgICA8L3NwYW4+PGJyPjwvYnI+PGJyPjwvYnI+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICA8c3Bhbj5BdXRvcHN5PC9zcGFuPjxicj48L2JyPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5JIHdhbnQgYW4gYXV0b3BzeTwvc3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4+b25seSBpZiB0aGVyZSBhcmUgcXVlc3Rpb25zIGFib3V0IG15IGRlYXRoLjwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj48YnI+PC9icj48YnI+PC9icj4gICAgICAgIDxzcGFuPiAgICAgICAgICAgIDxzcGFuPkhlcmUgYXJlIG15IHRob3VnaHRzIG9uIGZ1bmVyYWwgb3IgYnVyaWFsIHBsYW5zOjwvc3Bhbj48YnI+PC9icj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSWYgSSB3ZXJlIHRvIHBhc3MgYXdheTo8YnI+PC9icj4gICAgICAgICAgICAgICAgUGxlYXNlIGNhbGwgSmltIEhvdXN0b24sIG15IGxhd3llciwgZm9yIGFycmFuZ2VtZW50cyBJIGhhdmUgYWxyZWFkeSBtYWRlLiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgIDwvc3Bhbj48YnI+PC9icj48YnI+PC9icj48L2Rpdj4ifV19XSwidGl0bGUiOiJHb2FscywgUHJlZmVyZW5jZXMgYW5kIFByaW9yaXRpZXMgdXBvbiBEZWF0aCIsImNvZGUiOnsiY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vbG9pbmMub3JnIiwiY29kZSI6IjgxMzM3LTgiLCJkaXNwbGF5IjoiR1BQIHVwb24gRGVhdGgifV19LCJ0ZXh0Ijp7InN0YXR1cyI6ImdlbmVyYXRlZCIsImRpdiI6IjxkaXYgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI+PHNwYW4+ICAgICAgICAgICAgPHNwYW4+Q29uc2VudCB0byBEb25hdGU8L3NwYW4+PGJyLz4gICAgICAgICAgICA8c3Bhbj5JIGNvbnNlbnQgdG8gZG9uYXRlIGFsbCBvcmdhbnMgYW5kIHRpc3N1ZXMuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+ICAgICAgICA8L3NwYW4+PGJyLz48YnIvPiAgICAgICAgPHNwYW4+ICAgICAgICAgICAgPHNwYW4+QXV0b3BzeTwvc3Bhbj48YnIvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5JIHdhbnQgYW4gYXV0b3BzeTwvc3Bhbj4gICAgICAgICAgICAgICAgPHNwYW4+b25seSBpZiB0aGVyZSBhcmUgcXVlc3Rpb25zIGFib3V0IG15IGRlYXRoLjwvc3Bhbj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj48YnIvPjxici8+ICAgICAgICA8c3Bhbj4gICAgICAgICAgICA8c3Bhbj5IZXJlIGFyZSBteSB0aG91Z2h0cyBvbiBmdW5lcmFsIG9yIGJ1cmlhbCBwbGFuczo8L3NwYW4+PGJyLz4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSWYgSSB3ZXJlIHRvIHBhc3MgYXdheTo8YnIvPiAgICAgICAgICAgICAgICBQbGVhc2UgY2FsbCBKaW0gSG91c3RvbiwgbXkgbGF3eWVyLCBmb3IgYXJyYW5nZW1lbnRzIEkgaGF2ZSBhbHJlYWR5IG1hZGUuICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgPC9zcGFuPjxici8+PGJyLz48L2Rpdj4ifSwiZW50cnkiOlt7InJlZmVyZW5jZSI6Ik9ic2VydmF0aW9uL2VjZWQ1YTdmLWM5MDYtNGUwMC1iMDczLWEzNTUzNmM2NzNhYyJ9LHsicmVmZXJlbmNlIjoiR29hbC82NWViNzUzMy0zZjVmLTQyN2QtOTUxYS00ODFjODJkNDQxOGYifSx7InJlZmVyZW5jZSI6IkdvYWwvOGVhMzk0NjYtOWRlOC00Njc3LWI2NWUtNzdlNjBjYzcyNGM4In1dfV19fSx7InJlc291cmNlIjp7InJlc291cmNlVHlwZSI6IlBhdGllbnQiLCJpZCI6IjNlMGE0NzlmLTM3NWMtNDZiYS04NTdiLTllZDRjY2E3ZGI5ZiIsIm1ldGEiOnsidmVyc2lvbklkIjoiMSIsImxhc3RVcGRhdGVkIjoiMjAyMS0wNS0xM1QxODoyMDo1My4wMDArMDA6MDAiLCJzb3VyY2UiOiIjdjU0dkJ6QzBOMEkyUk4zdyIsInByb2ZpbGUiOlsiaHR0cDovL2hsNy5vcmcvZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2RhZi1wYXRpZW50Il19LCJ0ZXh0Ijp7InN0YXR1cyI6ImdlbmVyYXRlZCIsImRpdiI6IjxkaXYgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI+PGRpdiBjbGFzcz1cImhhcGlIZWFkZXJUZXh0XCI+QmV0c3kgPGI+U01JVEgtSk9ITlNPTiA8L2I+PC9kaXY+PHRhYmxlIGNsYXNzPVwiaGFwaVByb3BlcnR5VGFibGVcIj48dGJvZHk+PHRyPjx0ZD5JZGVudGlmaWVyPC90ZD48dGQ+ODdmMzc5ODkyOTRhNDA4ODk3YWFjZDFmYzVkOGZkMTY8L3RkPjwvdHI+PHRyPjx0ZD5BZGRyZXNzPC90ZD48dGQ+PHNwYW4+MTExIE1hcGxlIENvdXJ0IDwvc3Bhbj48YnIvPjxzcGFuPlNhbiBBbnRvbmlvIDwvc3Bhbj48c3Bhbj5UWCA8L3NwYW4+PHNwYW4+VVMgPC9zcGFuPjwvdGQ+PC90cj48dHI+PHRkPkRhdGUgb2YgYmlydGg8L3RkPjx0ZD48c3Bhbj4xNSBOb3ZlbWJlciAxOTUwPC9zcGFuPjwvdGQ+PC90cj48L3Rib2R5PjwvdGFibGU+PC9kaXY+In0sImlkZW50aWZpZXIiOlt7InN5c3RlbSI6InVybjpvaWQ6Mi4xNi44NDAuMS4xMTM4ODMuNC44MjMuMSIsInZhbHVlIjoiODdmMzc5ODkyOTRhNDA4ODk3YWFjZDFmYzVkOGZkMTYifV0sIm5hbWUiOlt7InVzZSI6InVzdWFsIiwiZmFtaWx5IjoiU21pdGgtSm9obnNvbiIsImdpdmVuIjpbIkJldHN5Il19XSwidGVsZWNvbSI6W3sic3lzdGVtIjoiZW1haWwiLCJ2YWx1ZSI6ImFkdmF1bHQudGVzdDU0QGpldHRlbGFicy5jb20iLCJ1c2UiOiJob21lIn1dLCJnZW5kZXIiOiJmZW1hbGUiLCJiaXJ0aERhdGUiOiIxOTUwLTExLTE1IiwiYWRkcmVzcyI6W3sidXNlIjoiaG9tZSIsImxpbmUiOlsiMTExIE1hcGxlIENvdXJ0Il0sImNpdHkiOiJTYW4gQW50b25pbyIsInN0YXRlIjoiVFgiLCJwb3N0YWxDb2RlIjoiNzgyMTIiLCJjb3VudHJ5IjoiVVMifV0sImNvbW11bmljYXRpb24iOlt7Imxhbmd1YWdlIjp7ImNvZGluZyI6W3siY29kZSI6ImVuZyJ9XX19XX19LHsicmVzb3VyY2UiOnsicmVzb3VyY2VUeXBlIjoiT3JnYW5pemF0aW9uIiwiaWQiOiI0NmUxZjQ2YS1mOWQxLTRjOTUtOWVhNS1jYTcyYzM5MjJkNmMiLCJtZXRhIjp7InZlcnNpb25JZCI6IjEiLCJsYXN0VXBkYXRlZCI6IjIwMjEtMDUtMTFUMjI6MjQ6NTYuMDAwKzAwOjAwIiwic291cmNlIjoiI1FPNnE1S3cwQ2h5MDJRcGcifSwiaWRlbnRpZmllciI6W3sic3lzdGVtIjoidXJuOm9pZDoxLjMuNi4xLjQuMS40MjQyNDI0Mi40Ljk5OTMwLjQiLCJ2YWx1ZSI6IjEyYzVkY2VlNTA4OTQ5NGNhMWNhMGNiNDI4ZWQzZmZmIn1dLCJuYW1lIjoiQURWYXVsdCwgSW5jLiIsInRlbGVjb20iOlt7InN5c3RlbSI6InBob25lIiwidmFsdWUiOiIrMSgyMDIpNzc2LTc3MDAiLCJ1c2UiOiJ3b3JrIn1dLCJhZGRyZXNzIjpbeyJ1c2UiOiJ3b3JrIiwibGluZSI6WyI3NDAgRS4gQ2FtcGJlbGwgUmQuIiwiU1RFIDgyNSJdLCJjaXR5IjoiUmljaGFyZHNvbiIsInN0YXRlIjoiVFgiLCJwb3N0YWxDb2RlIjoiNzUwODEiLCJjb3VudHJ5IjoiVVMifV0sImVuZHBvaW50IjpbeyJyZWZlcmVuY2UiOiJFbmRwb2ludC9mNmJiZmFlOS00YjZjLTQ1ZTAtYWVhNS1kNzA5MmY3ZTExZGQifV19fSx7InJlc291cmNlIjp7InJlc291cmNlVHlwZSI6IkRldmljZSIsImlkIjoiNWY2NGFhYWItMzIzMi00ZDI2LWE4NDctNjJjN2UxNWE1Y2Y2IiwibWV0YSI6eyJ2ZXJzaW9uSWQiOiIxIiwibGFzdFVwZGF0ZWQiOiIyMDIxLTA1LTExVDIyOjI0OjU2LjAwMCswMDowMCIsInNvdXJjZSI6IiNRTzZxNUt3MENoeTAyUXBnIn0sImlkZW50aWZpZXIiOlt7InN5c3RlbSI6InVybjpvaWQ6Mi4xNi44NDAuMS4xMTM4ODMuNC42IiwidmFsdWUiOiJlZDZmNGY1MGM2Y2I0N2RkODljYjVkOGYzMDA3ZWNiMCJ9XSwibW9kZWxOdW1iZXIiOiJBRFZhdWx0IFJSIFBvcnRhbCIsInZlcnNpb24iOlt7InZhbHVlIjoiMS4wIn1dLCJvd25lciI6eyJyZWZlcmVuY2UiOiJPcmdhbml6YXRpb24vNDZlMWY0NmEtZjlkMS00Yzk1LTllYTUtY2E3MmMzOTIyZDZjIiwiZGlzcGxheSI6IkFEVmF1bHQsIEluYy4ifX19LHsicmVzb3VyY2UiOnsicmVzb3VyY2VUeXBlIjoiQ2FyZVBsYW4iLCJpZCI6IjRlYjU3NjUwLWNkNWQtNDQ4MC1hNDc5LTY4NGRmYmY1OTU5YSIsIm1ldGEiOnsicHJvZmlsZSI6WyJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL3BhY2lvLWFkaS9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BBREktUHJlZmVyZW5jZUNhcmVQbGFuIl19LCJzdGF0dXMiOiJhY3RpdmUiLCJpbnRlbnQiOiJwcm9wb3NhbCIsImNhdGVnb3J5IjpbeyJjb2RpbmciOlt7InN5c3RlbSI6Imh0dHA6Ly9zbm9tZWQuaW5mby9zY3QiLCJjb2RlIjoiNzM2MzY2MDA0IiwiZGlzcGxheSI6IkFkdmFuY2UgY2FyZSBwbGFuIn1dfV0sInN1YmplY3QiOnsicmVmZXJlbmNlIjoiUGF0aWVudC8zZTBhNDc5Zi0zNzVjLTQ2YmEtODU3Yi05ZWQ0Y2NhN2RiOWYiLCJkaXNwbGF5IjoiU21pdGgtSm9obnNvbiwgQmV0c3kifSwiYWRkcmVzc2VzIjpbeyJyZWZlcmVuY2UiOiJDb25kaXRpb24vZTY0Y2QxYTUtNDNjYi00OTk4LTkxYmUtNDNiZDA4NGMxZDQyIn0seyJyZWZlcmVuY2UiOiJDb25kaXRpb24vNzNkZmIzMTMtZWRjMC00ZjQ3LTg4ODAtMTljZDJiNWI4NzhmIn0seyJyZWZlcmVuY2UiOiJDb25kaXRpb24vNWY1ZTJjMDgtMGI1Yy00YTI0LTlhNjUtMjcxOTRkOWQyNzVkIn0seyJyZWZlcmVuY2UiOiJDb25kaXRpb24vZGJlNjdmMjYtNzYzZS00Y2IyLThiOGYtMmRlZDAwMDEwZjY3In1dLCJnb2FsIjpbeyJyZWZlcmVuY2UiOiJHb2FsL2NjMmQzNjViLTdlNDctNGRiMS1iZjA2LWFmYTI2NDkyMmNlOSJ9LHsicmVmZXJlbmNlIjoiR29hbC8yM2VlMzA5Yy04ODQwLTRhMmUtYTdlZC0zNDFlY2Y1NTE5OGEifSx7InJlZmVyZW5jZSI6IkdvYWwvM2ZhMWZlZmMtOTBmZC00ZDE1LWJkMzctZmU5MjRmOWI1MjZjIn1dfX0seyJyZXNvdXJjZSI6eyJyZXNvdXJjZVR5cGUiOiJHb2FsIiwiaWQiOiJjYzJkMzY1Yi03ZTQ3LTRkYjEtYmYwNi1hZmEyNjQ5MjJjZTkiLCJtZXRhIjp7InByb2ZpbGUiOlsiaHR0cDovL2hsNy5vcmcvZmhpci91cy9wYWNpby1hZGkvU3RydWN0dXJlRGVmaW5pdGlvbi9QQURJLVBlcnNvbmFsR29hbCJdfSwidGV4dCI6eyJzdGF0dXMiOiJhZGRpdGlvbmFsIiwiZGl2IjoiPGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj5Bdm9pZGluZyBwcm9sb25nZWQgZGVwZW5kZW5jZSBvbiBtYWNoaW5lczwvZGl2PiJ9LCJpZGVudGlmaWVyIjpbeyJ2YWx1ZSI6IjM2NjNBMEMwLTg5OTMtNDk0OS04QTY2LUIwNkQwMzE4NDNFMCJ9XSwibGlmZWN5Y2xlU3RhdHVzIjoicHJvcG9zZWQiLCJjYXRlZ29yeSI6W3siY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vbG9pbmMub3JnIiwiY29kZSI6IjgxMzc4LTIiLCJkaXNwbGF5IjoiR29hbHMsIHByZWZlcmVuY2VzLCBhbmQgcHJpb3JpdGllcyB1bmRlciBjZXJ0YWluIGhlYWx0aCBjb25kaXRpb25zIn1dfV0sImRlc2NyaXB0aW9uIjp7ImV4dGVuc2lvbiI6W3sidXJsIjoiQ29udGV4dCIsInZhbHVlQ29kZWFibGVDb25jZXB0Ijp7ImNvZGluZyI6W3sic3lzdGVtIjoiaHR0cDovL2xvaW5jLm9yZyIsImNvZGUiOiI4MTM3OC0yIiwiZGlzcGxheSI6IkdvYWxzLCBwcmVmZXJlbmNlcywgYW5kIHByaW9yaXRpZXMgdW5kZXIgY2VydGFpbiBoZWFsdGggY29uZGl0aW9ucyJ9XX19LHsidXJsIjoiVmFsdWUiLCJ2YWx1ZVN0cmluZyI6IkF2b2lkaW5nIHByb2xvbmdlZCBkZXBlbmRlbmNlIG9uIG1hY2hpbmVzIn1dfSwic3ViamVjdCI6eyJyZWZlcmVuY2UiOiJQYXRpZW50LzNlMGE0NzlmLTM3NWMtNDZiYS04NTdiLTllZDRjY2E3ZGI5ZiIsImRpc3BsYXkiOiJTbWl0aC1Kb2huc29uLCBCZXRzeSJ9fX0seyJyZXNvdXJjZSI6eyJyZXNvdXJjZVR5cGUiOiJHb2FsIiwiaWQiOiIyM2VlMzA5Yy04ODQwLTRhMmUtYTdlZC0zNDFlY2Y1NTE5OGEiLCJtZXRhIjp7InByb2ZpbGUiOlsiaHR0cDovL2hsNy5vcmcvZmhpci91cy9wYWNpby1hZGkvU3RydWN0dXJlRGVmaW5pdGlvbi9QQURJLVBlcnNvbmFsR29hbCJdfSwidGV4dCI6eyJzdGF0dXMiOiJhZGRpdGlvbmFsIiwiZGl2IjoiPGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj5Ob3QgYmVpbmcgYSBwaHlzaWNhbCBidXJkZW4gdG8gbXkgZmFtaWx5PC9kaXY+In0sImlkZW50aWZpZXIiOlt7InZhbHVlIjoiOUIyQjhCN0EtQTQ0Qy00Rjg4LUI3RjktMzhDMEMyQjkxQUM1In1dLCJsaWZlY3ljbGVTdGF0dXMiOiJwcm9wb3NlZCIsImNhdGVnb3J5IjpbeyJjb2RpbmciOlt7InN5c3RlbSI6Imh0dHA6Ly9sb2luYy5vcmciLCJjb2RlIjoiODEzNzgtMiIsImRpc3BsYXkiOiJHb2FscywgcHJlZmVyZW5jZXMsIGFuZCBwcmlvcml0aWVzIHVuZGVyIGNlcnRhaW4gaGVhbHRoIGNvbmRpdGlvbnMifV19XSwiZGVzY3JpcHRpb24iOnsiZXh0ZW5zaW9uIjpbeyJ1cmwiOiJDb250ZXh0IiwidmFsdWVDb2RlYWJsZUNvbmNlcHQiOnsiY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vbG9pbmMub3JnIiwiY29kZSI6IjgxMzc4LTIiLCJkaXNwbGF5IjoiR29hbHMsIHByZWZlcmVuY2VzLCBhbmQgcHJpb3JpdGllcyB1bmRlciBjZXJ0YWluIGhlYWx0aCBjb25kaXRpb25zIn1dfX0seyJ1cmwiOiJWYWx1ZSIsInZhbHVlU3RyaW5nIjoiTm90IGJlaW5nIGEgcGh5c2ljYWwgYnVyZGVuIHRvIG15IGZhbWlseSJ9XX0sInN1YmplY3QiOnsicmVmZXJlbmNlIjoiUGF0aWVudC8zZTBhNDc5Zi0zNzVjLTQ2YmEtODU3Yi05ZWQ0Y2NhN2RiOWYiLCJkaXNwbGF5IjoiU21pdGgtSm9obnNvbiwgQmV0c3kifX19LHsicmVzb3VyY2UiOnsicmVzb3VyY2VUeXBlIjoiR29hbCIsImlkIjoiM2ZhMWZlZmMtOTBmZC00ZDE1LWJkMzctZmU5MjRmOWI1MjZjIiwibWV0YSI6eyJwcm9maWxlIjpbImh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvcGFjaW8tYWRpL1N0cnVjdHVyZURlZmluaXRpb24vUEFESS1QZXJzb25hbEdvYWwiXX0sInRleHQiOnsic3RhdHVzIjoiYWRkaXRpb25hbCIsImRpdiI6IjxkaXYgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI+RHlpbmcgYXQgaG9tZTwvZGl2PiJ9LCJpZGVudGlmaWVyIjpbeyJ2YWx1ZSI6IkY0REM0N0ZBLTcwRkQtNDVGRC04QzlDLTAxNDdGRERBMzcyNCJ9XSwibGlmZWN5Y2xlU3RhdHVzIjoicHJvcG9zZWQiLCJjYXRlZ29yeSI6W3siY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vbG9pbmMub3JnIiwiY29kZSI6IjgxMzc4LTIiLCJkaXNwbGF5IjoiR29hbHMsIHByZWZlcmVuY2VzLCBhbmQgcHJpb3JpdGllcyB1bmRlciBjZXJ0YWluIGhlYWx0aCBjb25kaXRpb25zIn1dfV0sImRlc2NyaXB0aW9uIjp7ImV4dGVuc2lvbiI6W3sidXJsIjoiQ29udGV4dCIsInZhbHVlQ29kZWFibGVDb25jZXB0Ijp7ImNvZGluZyI6W3sic3lzdGVtIjoiaHR0cDovL2xvaW5jLm9yZyIsImNvZGUiOiI4MTM3OC0yIiwiZGlzcGxheSI6IkdvYWxzLCBwcmVmZXJlbmNlcywgYW5kIHByaW9yaXRpZXMgdW5kZXIgY2VydGFpbiBoZWFsdGggY29uZGl0aW9ucyJ9XX19LHsidXJsIjoiVmFsdWUiLCJ2YWx1ZVN0cmluZyI6IkR5aW5nIGF0IGhvbWUifV19LCJzdWJqZWN0Ijp7InJlZmVyZW5jZSI6IlBhdGllbnQvM2UwYTQ3OWYtMzc1Yy00NmJhLTg1N2ItOWVkNGNjYTdkYjlmIiwiZGlzcGxheSI6IlNtaXRoLUpvaG5zb24sIEJldHN5In19fSx7InJlc291cmNlIjp7InJlc291cmNlVHlwZSI6IkNvbmRpdGlvbiIsImlkIjoiZTY0Y2QxYTUtNDNjYi00OTk4LTkxYmUtNDNiZDA4NGMxZDQyIiwiY29kZSI6eyJ0ZXh0IjoiSWYgSSBhbSBzbyBzaWNrIG9yIHNlcmlvdXNseSBpbmp1cmVkIHRoYXQgSSBjYW5ub3QgZXhwcmVzcyBteSBvd24gbWVkaWNhbCB0cmVhdG1lbnQgcHJlZmVyZW5jZXMsIGFuZCBpZiBJIGFtIG5vdCBleHBlY3RlZCB0byBsaXZlIHdpdGhvdXQgYWRkaXRpb25hbCB0cmVhdG1lbnQgZm9yIG15IGlsbG5lc3MsIGRpc2Vhc2UsIGNvbmRpdGlvbiBvciBpbmp1cnksIHRoZW4gSSB3YW50IG15IG1lZGljYWwgY2FyZSB0ZWFtIHRvIGtub3cgdGhhdCB0aGVzZSBhcmUgdGhlIHRoaW5ncyB0aGF0IGFyZSBtb3N0IGltcG9ydGFudCB0byBtZToifSwic3ViamVjdCI6eyJyZWZlcmVuY2UiOiJQYXRpZW50LzNlMGE0NzlmLTM3NWMtNDZiYS04NTdiLTllZDRjY2E3ZGI5ZiIsImRpc3BsYXkiOiJTbWl0aC1Kb2huc29uLCBCZXRzeSJ9fX0seyJyZXNvdXJjZSI6eyJyZXNvdXJjZVR5cGUiOiJDb25kaXRpb24iLCJpZCI6IjczZGZiMzEzLWVkYzAtNGY0Ny04ODgwLTE5Y2QyYjViODc4ZiIsImNvZGUiOnsidGV4dCI6IklmIEkgYW0gaGF2aW5nIHNpZ25pZmljYW50IHBhaW4gb3Igc3VmZmVyaW5nLCJ9LCJzdWJqZWN0Ijp7InJlZmVyZW5jZSI6IlBhdGllbnQvM2UwYTQ3OWYtMzc1Yy00NmJhLTg1N2ItOWVkNGNjYTdkYjlmIiwiZGlzcGxheSI6IlNtaXRoLUpvaG5zb24sIEJldHN5In19fSx7InJlc291cmNlIjp7InJlc291cmNlVHlwZSI6IkNvbmRpdGlvbiIsImlkIjoiNWY1ZTJjMDgtMGI1Yy00YTI0LTlhNjUtMjcxOTRkOWQyNzVkIiwiY29kZSI6eyJ0ZXh0IjoiSWYgbXkgaGVhbHRoIGV2ZXIgZGV0ZXJpb3JhdGVzIGR1ZSB0byBhIHRlcm1pbmFsIGlsbG5lc3MsIGFuZCBteSBkb2N0b3JzIGJlbGlldmUgSSB3aWxsIG5vdCBiZSBhYmxlIHRvIGludGVyYWN0IG1lYW5pbmdmdWxseSB3aXRoIG15IGZhbWlseSwgZnJpZW5kcywgb3Igc3Vycm91bmRpbmdzLCJ9LCJzdWJqZWN0Ijp7InJlZmVyZW5jZSI6IlBhdGllbnQvM2UwYTQ3OWYtMzc1Yy00NmJhLTg1N2ItOWVkNGNjYTdkYjlmIiwiZGlzcGxheSI6IlNtaXRoLUpvaG5zb24sIEJldHN5In19fSx7InJlc291cmNlIjp7InJlc291cmNlVHlwZSI6IkNvbmRpdGlvbiIsImlkIjoiZGJlNjdmMjYtNzYzZS00Y2IyLThiOGYtMmRlZDAwMDEwZjY3IiwiY29kZSI6eyJ0ZXh0IjoiSWYgSSBoYXZlIGEgc2V2ZXJlLCBpcnJldmVyc2libGUgYnJhaW4gaW5qdXJ5IG9yIGlsbG5lc3MgYW5kIGNhbuKAmXQgZHJlc3MsIGZlZWQsIG9yIGJhdGhlIG15c2VsZiwgb3IgY29tbXVuaWNhdGUgbXkgbWVkaWNhbCB3aXNoZXMsIGJ1dCBkb2N0b3JzIGNhbiBrZWVwIG1lIGFsaXZlIGluIHRoaXMgY29uZGl0aW9uIGZvciBhIGxvbmcgcGVyaW9kIG9mIHRpbWUsIn0sInN1YmplY3QiOnsicmVmZXJlbmNlIjoiUGF0aWVudC8zZTBhNDc5Zi0zNzVjLTQ2YmEtODU3Yi05ZWQ0Y2NhN2RiOWYiLCJkaXNwbGF5IjoiU21pdGgtSm9obnNvbiwgQmV0c3kifX19LHsicmVzb3VyY2UiOnsicmVzb3VyY2VUeXBlIjoiUmVsYXRlZFBlcnNvbiIsImlkIjoiNzgwMWM1MzAtOTQ5Yi00Y2FkLWJjYTQtZTIwMzIwZTA5OWViIiwibWV0YSI6eyJwcm9maWxlIjpbImh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvcGFjaW8tYWRpL1N0cnVjdHVyZURlZmluaXRpb24vUEFESS1IZWFsdGhjYXJlQWdlbnQiXX0sInBhdGllbnQiOnsicmVmZXJlbmNlIjoiUGF0aWVudC8zZTBhNDc5Zi0zNzVjLTQ2YmEtODU3Yi05ZWQ0Y2NhN2RiOWYiLCJkaXNwbGF5IjoiU21pdGgtSm9obnNvbiwgQmV0c3kifSwicmVsYXRpb25zaGlwIjpbeyJjb2RpbmciOlt7InN5c3RlbSI6IjIuMTYuODQwLjEuMTEzODgzLjYuMSIsImNvZGUiOiI3NTc4My0xIiwiZGlzcGxheSI6IlByaW1hcnkgaGVhbHRoY2FyZSBhZ2VudCJ9XSwidGV4dCI6IlByaW1hcnkgaGVhbHRoY2FyZSBhZ2VudCJ9LHsidGV4dCI6IlNvbiJ9XSwibmFtZSI6W3siZmFtaWx5IjoiSm9obnNvbiIsImdpdmVuIjpbIkNoYXJsZXMiXX1dLCJ0ZWxlY29tIjpbeyJzeXN0ZW0iOiJlbWFpbCIsInZhbHVlIjoiQ2hhcmxlc1NKQGV4YW1wbGUuY29tIiwidXNlIjoiaG9tZSJ9XX19LHsicmVzb3VyY2UiOnsicmVzb3VyY2VUeXBlIjoiQ29uc2VudCIsImlkIjoiNmJhYzMwMzUtY2RiMC00OWVjLTlkZjQtZTg2Mjk2YzMwMmM5IiwibWV0YSI6eyJwcm9maWxlIjpbImh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvcGFjaW8tYWRpL1N0cnVjdHVyZURlZmluaXRpb24vUEFESS1QYXJ0aWNpcGFudENvbnNlbnQiXX0sInN0YXR1cyI6ImFjdGl2ZSIsInNjb3BlIjp7ImNvZGluZyI6W3sic3lzdGVtIjoiaHR0cDovL2xvaW5jLm9yZyIsImNvZGUiOiI3NTc4My0xIiwiZGlzcGxheSI6IlByaW1hcnkgaGVhbHRoY2FyZSBhZ2VudCJ9XX0sImNhdGVnb3J5IjpbeyJjb2RpbmciOlt7InN5c3RlbSI6Imh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vY29uc2VudGNhdGVnb3J5Y29kZXMiLCJjb2RlIjoiYWNkIiwiZGlzcGxheSI6IkFkdmFuY2UgRGlyZWN0aXZlIn1dfV0sInBhdGllbnQiOnsicmVmZXJlbmNlIjoiUGF0aWVudC8zZTBhNDc5Zi0zNzVjLTQ2YmEtODU3Yi05ZWQ0Y2NhN2RiOWYiLCJkaXNwbGF5IjoiU21pdGgtSm9obnNvbiwgQmV0c3kifSwicHJvdmlzaW9uIjp7ImFjdG9yIjpbeyJyb2xlIjp7ImNvZGluZyI6W3sic3lzdGVtIjoiaHR0cDovL2xvaW5jLm9yZyIsImNvZGUiOiI3NTc4My0xIiwiZGlzcGxheSI6IlByaW1hcnkgaGVhbHRoY2FyZSBhZ2VudCJ9XX0sInJlZmVyZW5jZSI6eyJyZWZlcmVuY2UiOiJSZWxhdGVkUGVyc29uLzc4MDFjNTMwLTk0OWItNGNhZC1iY2E0LWUyMDMyMGUwOTllYiJ9fV0sImFjdGlvbiI6W3siY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vbG9pbmMub3JnIiwiY29kZSI6Ijc1Nzg2LTQiLCJkaXNwbGF5IjoiUG93ZXJzIEdyYW50ZWQgdG8gSGVhbHRoIEFnZW50In1dfV19fX0seyJyZXNvdXJjZSI6eyJyZXNvdXJjZVR5cGUiOiJSZWxhdGVkUGVyc29uIiwiaWQiOiJkMmMwN2YxMi01ODVlLTQxM2EtYjk5ZC0zOGQ2OTgyZDdmODEiLCJtZXRhIjp7InByb2ZpbGUiOlsiaHR0cDovL2hsNy5vcmcvZmhpci91cy9wYWNpby1hZGkvU3RydWN0dXJlRGVmaW5pdGlvbi9QQURJLUhlYWx0aGNhcmVBZ2VudCJdfSwicGF0aWVudCI6eyJyZWZlcmVuY2UiOiJQYXRpZW50LzNlMGE0NzlmLTM3NWMtNDZiYS04NTdiLTllZDRjY2E3ZGI5ZiIsImRpc3BsYXkiOiJTbWl0aC1Kb2huc29uLCBCZXRzeSJ9LCJyZWxhdGlvbnNoaXAiOlt7ImNvZGluZyI6W3sic3lzdGVtIjoiMi4xNi44NDAuMS4xMTM4ODMuNi4xIiwiY29kZSI6Ijc1NzgzLTEiLCJkaXNwbGF5IjoiUHJpbWFyeSBoZWFsdGhjYXJlIGFnZW50In1dLCJ0ZXh0IjoiUHJpbWFyeSBoZWFsdGhjYXJlIGFnZW50In0seyJ0ZXh0IjoiU29uIn1dLCJuYW1lIjpbeyJmYW1pbHkiOiJKb2huc29uIiwiZ2l2ZW4iOlsiQ2hhcmxlcyJdfV0sInRlbGVjb20iOlt7InN5c3RlbSI6ImVtYWlsIiwidmFsdWUiOiJDaGFybGVzU0pAZXhhbXBsZS5jb20iLCJ1c2UiOiJob21lIn1dfX0seyJyZXNvdXJjZSI6eyJyZXNvdXJjZVR5cGUiOiJDb25zZW50IiwiaWQiOiI2MjNmYmVjYi02OTlmLTQwZTYtOWUzYS1iODY0NzQwMjQ3NTIiLCJtZXRhIjp7InByb2ZpbGUiOlsiaHR0cDovL2hsNy5vcmcvZmhpci91cy9wYWNpby1hZGkvU3RydWN0dXJlRGVmaW5pdGlvbi9QQURJLVBhcnRpY2lwYW50Q29uc2VudCJdfSwic3RhdHVzIjoiYWN0aXZlIiwic2NvcGUiOnsiY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vbG9pbmMub3JnIiwiY29kZSI6Ijc1NzgzLTEiLCJkaXNwbGF5IjoiUHJpbWFyeSBoZWFsdGhjYXJlIGFnZW50In1dfSwiY2F0ZWdvcnkiOlt7ImNvZGluZyI6W3sic3lzdGVtIjoiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb25zZW50Y2F0ZWdvcnljb2RlcyIsImNvZGUiOiJhY2QiLCJkaXNwbGF5IjoiQWR2YW5jZSBEaXJlY3RpdmUifV19XSwicGF0aWVudCI6eyJyZWZlcmVuY2UiOiJQYXRpZW50LzNlMGE0NzlmLTM3NWMtNDZiYS04NTdiLTllZDRjY2E3ZGI5ZiIsImRpc3BsYXkiOiJTbWl0aC1Kb2huc29uLCBCZXRzeSJ9LCJwcm92aXNpb24iOnsiYWN0b3IiOlt7InJvbGUiOnsiY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vbG9pbmMub3JnIiwiY29kZSI6Ijc1NzgzLTEiLCJkaXNwbGF5IjoiUHJpbWFyeSBoZWFsdGhjYXJlIGFnZW50In1dfSwicmVmZXJlbmNlIjp7InJlZmVyZW5jZSI6IlJlbGF0ZWRQZXJzb24vZDJjMDdmMTItNTg1ZS00MTNhLWI5OWQtMzhkNjk4MmQ3ZjgxIn19XSwiYWN0aW9uIjpbeyJjb2RpbmciOlt7InN5c3RlbSI6Imh0dHA6Ly9sb2luYy5vcmciLCJjb2RlIjoiNzU3ODYtNCIsImRpc3BsYXkiOiJQb3dlcnMgR3JhbnRlZCB0byBIZWFsdGggQWdlbnQifV19XX19fSx7InJlc291cmNlIjp7InJlc291cmNlVHlwZSI6IlJlbGF0ZWRQZXJzb24iLCJpZCI6IjcwY2U2MmMxLWE0NzUtNGY1Mi1hYzEyLWU5MzQ1YWRhZTY3MSIsIm1ldGEiOnsicHJvZmlsZSI6WyJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL3BhY2lvLWFkaS9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BBREktSGVhbHRoY2FyZUFnZW50Il19LCJwYXRpZW50Ijp7InJlZmVyZW5jZSI6IlBhdGllbnQvM2UwYTQ3OWYtMzc1Yy00NmJhLTg1N2ItOWVkNGNjYTdkYjlmIiwiZGlzcGxheSI6IlNtaXRoLUpvaG5zb24sIEJldHN5In0sInJlbGF0aW9uc2hpcCI6W3siY29kaW5nIjpbeyJzeXN0ZW0iOiIyLjE2Ljg0MC4xLjExMzg4My42LjEiLCJjb2RlIjoiNzU3ODQtOSIsImRpc3BsYXkiOiJGaXJzdCBhbHRlcm5hdGUgaGVhbHRoY2FyZSBhZ2VudCJ9XSwidGV4dCI6IkZpcnN0IGFsdGVybmF0ZSBoZWFsdGhjYXJlIGFnZW50In0seyJ0ZXh0IjoiRGF1Z2h0ZXIifV0sIm5hbWUiOlt7ImZhbWlseSI6IkpvaG5zb24iLCJnaXZlbiI6WyJEZWJyYSJdfV0sInRlbGVjb20iOlt7InN5c3RlbSI6ImVtYWlsIiwidmFsdWUiOiJEZWJyYVNKQGV4YW1wbGUuY29tIiwidXNlIjoiaG9tZSJ9XX19LHsicmVzb3VyY2UiOnsicmVzb3VyY2VUeXBlIjoiQ29uc2VudCIsImlkIjoiMWRhMjVhMzctYzc3NC00ZmZkLWFhODEtYjg3MjJhZDJjZGE4IiwibWV0YSI6eyJwcm9maWxlIjpbImh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvcGFjaW8tYWRpL1N0cnVjdHVyZURlZmluaXRpb24vUEFESS1QYXJ0aWNpcGFudENvbnNlbnQiXX0sInN0YXR1cyI6ImFjdGl2ZSIsInNjb3BlIjp7ImNvZGluZyI6W3sic3lzdGVtIjoiaHR0cDovL2xvaW5jLm9yZyIsImNvZGUiOiI3NTc4NC05IiwiZGlzcGxheSI6IkZpcnN0IGFsdGVybmF0ZSBoZWFsdGhjYXJlIGFnZW50In1dfSwiY2F0ZWdvcnkiOlt7ImNvZGluZyI6W3sic3lzdGVtIjoiaHR0cDovL3Rlcm1pbm9sb2d5LmhsNy5vcmcvQ29kZVN5c3RlbS9jb25zZW50Y2F0ZWdvcnljb2RlcyIsImNvZGUiOiJhY2QiLCJkaXNwbGF5IjoiQWR2YW5jZSBEaXJlY3RpdmUifV19XSwicGF0aWVudCI6eyJyZWZlcmVuY2UiOiJQYXRpZW50LzNlMGE0NzlmLTM3NWMtNDZiYS04NTdiLTllZDRjY2E3ZGI5ZiIsImRpc3BsYXkiOiJTbWl0aC1Kb2huc29uLCBCZXRzeSJ9LCJwcm92aXNpb24iOnsiYWN0b3IiOlt7InJvbGUiOnsiY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vbG9pbmMub3JnIiwiY29kZSI6Ijc1Nzg0LTkiLCJkaXNwbGF5IjoiRmlyc3QgYWx0ZXJuYXRlIGhlYWx0aGNhcmUgYWdlbnQifV19LCJyZWZlcmVuY2UiOnsicmVmZXJlbmNlIjoiUmVsYXRlZFBlcnNvbi83MGNlNjJjMS1hNDc1LTRmNTItYWMxMi1lOTM0NWFkYWU2NzEifX1dLCJhY3Rpb24iOlt7ImNvZGluZyI6W3sic3lzdGVtIjoiaHR0cDovL2xvaW5jLm9yZyIsImNvZGUiOiI3NTc4Ni00IiwiZGlzcGxheSI6IlBvd2VycyBHcmFudGVkIHRvIEhlYWx0aCBBZ2VudCJ9XX1dfX19LHsicmVzb3VyY2UiOnsicmVzb3VyY2VUeXBlIjoiR29hbCIsImlkIjoiNDY2OTI3NGYtNzU3Yi00YWE4LWI3MTYtYWQ4NzExNTgwZDgyIiwibWV0YSI6eyJwcm9maWxlIjpbImh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvcGFjaW8tYWRpL1N0cnVjdHVyZURlZmluaXRpb24vUEFESS1DYXJlRXhwZXJpZW5jZVByZWZlcmVuY2UiXX0sInRleHQiOnsic3RhdHVzIjoiYWRkaXRpb25hbCIsImRpdiI6IjxkaXYgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI+PHNwYW4+ICAgICAgICAgICAgICAgIE15IGxpa2VzIC8gam95czogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIEhlcmUgYXJlIHNvbWUgZXhhbXBsZXMgb2YgdGhlIHRoaW5ncyB0aGF0IEkgd291bGQgbGlrZSB0byBoYXZlIG5lYXIgbWUsIG11c2ljIHRoYXQgSeKAmWQgbGlrZSB0byBoZWFyLCBhbmQgb3RoZXIgZGV0YWlscyBvZiBteSBjYXJlIHRoYXQgd291bGQgaGVscCB0byBrZWVwIG1lIGhhcHB5IGFuZCByZWxheGVkOiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICA8YnIvPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBJIGxvdmUgdGhlIHNtZWxsIG9mIGxhdmVuZGVyIGFuZCB0aGUgZmVlbGluZyBvZiBzdW5zaGluZSBvbiBteSBmYWNlLiAgICAgICAgICAgIDwvc3Bhbj48L2Rpdj4ifSwiaWRlbnRpZmllciI6W3sidmFsdWUiOiIxQzk4MzAxOS02MkVGLTRGRkEtQjgxRS00NDhDODVERDZBM0MifV0sImxpZmVjeWNsZVN0YXR1cyI6InByb3Bvc2VkIiwiY2F0ZWdvcnkiOlt7ImNvZGluZyI6W3sic3lzdGVtIjoiaHR0cDovL2xvaW5jLm9yZyIsImNvZGUiOiI4MTM2MC0wIiwiZGlzcGxheSI6Ik15IGxpa2VzIGFuZCBqb3lzIn1dLCJ0ZXh0IjoiTXkgbGlrZXMgLyBqb3lzOiJ9LHsiY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL3BhY2lvLWFkaS9Db2RlU3lzdGVtL1BBRElHb2FsQ2F0ZWdvcnlDUyIsImNvZGUiOiJjYXJlLWV4cGVyaWVuY2UtcHJlZmVyZW5jZSJ9XX1dLCJkZXNjcmlwdGlvbiI6eyJ0ZXh0IjoiPHNwYW4+ICAgICAgICAgICAgICAgIE15IGxpa2VzIC8gam95czogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIEhlcmUgYXJlIHNvbWUgZXhhbXBsZXMgb2YgdGhlIHRoaW5ncyB0aGF0IEkgd291bGQgbGlrZSB0byBoYXZlIG5lYXIgbWUsIG11c2ljIHRoYXQgSeKAmWQgbGlrZSB0byBoZWFyLCBhbmQgb3RoZXIgZGV0YWlscyBvZiBteSBjYXJlIHRoYXQgd291bGQgaGVscCB0byBrZWVwIG1lIGhhcHB5IGFuZCByZWxheGVkOiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICA8YnI+PC9icj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSSBsb3ZlIHRoZSBzbWVsbCBvZiBsYXZlbmRlciBhbmQgdGhlIGZlZWxpbmcgb2Ygc3Vuc2hpbmUgb24gbXkgZmFjZS4gICAgICAgICAgICA8L3NwYW4+In0sInN1YmplY3QiOnsicmVmZXJlbmNlIjoiUGF0aWVudC8zZTBhNDc5Zi0zNzVjLTQ2YmEtODU3Yi05ZWQ0Y2NhN2RiOWYiLCJkaXNwbGF5IjoiU21pdGgtSm9obnNvbiwgQmV0c3kifX19LHsicmVzb3VyY2UiOnsicmVzb3VyY2VUeXBlIjoiR29hbCIsImlkIjoiZjY5NGVhM2YtMjRkNC00YTlkLThiZmUtMmIxYTBhOTU4ODc5IiwibWV0YSI6eyJwcm9maWxlIjpbImh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvcGFjaW8tYWRpL1N0cnVjdHVyZURlZmluaXRpb24vUEFESS1DYXJlRXhwZXJpZW5jZVByZWZlcmVuY2UiXX0sInRleHQiOnsic3RhdHVzIjoiYWRkaXRpb25hbCIsImRpdiI6IjxkaXYgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI+PHNwYW4+ICAgICAgICAgICAgICAgIE15IGRpc2xpa2VzIC8gZmVhcnM6ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBIZXJlIGlzIGEgbGlzdCBvZiB0aGluZ3MgdGhhdCBJIHdvdWxkIGxpa2UgdG8gYXZvaWQgaWYgYXQgYWxsIHBvc3NpYmxlLCBwZW9wbGUgdGhhdCBJIGRvbuKAmXQgd2lzaCB0byBzZWUsIGFuZCBjb25jZXJucyBJIGhhdmUgYWJvdXQgcGFydGljdWxhciBmYW1pbHkgbWVtYmVycywgcGV0cywgYW5kIHNvIG9uOiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICA8YnIvPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBJIGRvIG5vdCBsaWtlIG15IGZlZXQgdG8gYmUgY29sZC4gICAgICAgICAgICA8L3NwYW4+PC9kaXY+In0sImlkZW50aWZpZXIiOlt7InZhbHVlIjoiNjE5QjgwOEMtRDA3Mi00OUQ3LUJFQzgtMzZFRjAxREFGOUM1In1dLCJsaWZlY3ljbGVTdGF0dXMiOiJwcm9wb3NlZCIsImNhdGVnb3J5IjpbeyJjb2RpbmciOlt7InN5c3RlbSI6Imh0dHA6Ly9sb2luYy5vcmciLCJjb2RlIjoiODEzNjItNiIsImRpc3BsYXkiOiJNeSBkaXNsaWtlcyBhbmQgZmVhcnMifV0sInRleHQiOiJNeSBkaXNsaWtlcyAvIGZlYXJzOiJ9LHsiY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL3BhY2lvLWFkaS9Db2RlU3lzdGVtL1BBRElHb2FsQ2F0ZWdvcnlDUyIsImNvZGUiOiJjYXJlLWV4cGVyaWVuY2UtcHJlZmVyZW5jZSJ9XX1dLCJkZXNjcmlwdGlvbiI6eyJ0ZXh0IjoiPHNwYW4+ICAgICAgICAgICAgICAgIE15IGRpc2xpa2VzIC8gZmVhcnM6ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBIZXJlIGlzIGEgbGlzdCBvZiB0aGluZ3MgdGhhdCBJIHdvdWxkIGxpa2UgdG8gYXZvaWQgaWYgYXQgYWxsIHBvc3NpYmxlLCBwZW9wbGUgdGhhdCBJIGRvbuKAmXQgd2lzaCB0byBzZWUsIGFuZCBjb25jZXJucyBJIGhhdmUgYWJvdXQgcGFydGljdWxhciBmYW1pbHkgbWVtYmVycywgcGV0cywgYW5kIHNvIG9uOiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICA8YnI+PC9icj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSSBkbyBub3QgbGlrZSBteSBmZWV0IHRvIGJlIGNvbGQuICAgICAgICAgICAgPC9zcGFuPiJ9LCJzdWJqZWN0Ijp7InJlZmVyZW5jZSI6IlBhdGllbnQvM2UwYTQ3OWYtMzc1Yy00NmJhLTg1N2ItOWVkNGNjYTdkYjlmIiwiZGlzcGxheSI6IlNtaXRoLUpvaG5zb24sIEJldHN5In19fSx7InJlc291cmNlIjp7InJlc291cmNlVHlwZSI6IkdvYWwiLCJpZCI6ImE3MzIyYTk0LTVlMDMtNDFiOC05NDQyLWIzYTBlNjA0NDlkZSIsIm1ldGEiOnsicHJvZmlsZSI6WyJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL3BhY2lvLWFkaS9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BBREktQ2FyZUV4cGVyaWVuY2VQcmVmZXJlbmNlIl19LCJ0ZXh0Ijp7InN0YXR1cyI6ImFkZGl0aW9uYWwiLCJkaXYiOiI8ZGl2IHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPjxzcGFuPiAgICAgICAgICAgICAgICBIb3cgdG8gY2FyZSBmb3IgbWU6ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBJZiBJIGJlY29tZSBpbmNhcGFjaXRhdGVkIGFuZCBjYW5ub3QgZXhwcmVzcyBteXNlbGYsIGhlcmUgaXMgd2hhdCBJIHdvdWxkIGxpa2UgdG8gdGVsbCBteSBoZWFsdGhjYXJlIGFnZW50LCBmYW1pbHkgYW5kIGZyaWVuZHMgYWJvdXQgaG93IEkgd291bGQgbGlrZSBmb3IgdGhlbSB0byBjYXJlIGZvciBtZTogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPGJyLz4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSSB3YW50IHBob3RvcyBvZiBteSBmYW1pbHkgd2hlcmUgSSBjYW4gc2VlIHRoZW0uICAgICAgICAgICAgPC9zcGFuPjwvZGl2PiJ9LCJpZGVudGlmaWVyIjpbeyJ2YWx1ZSI6IjI2REQ5QTQzLUYxMkQtNDlENi1BQ0FFLTNENTVGMzg5QjY2QSJ9XSwibGlmZWN5Y2xlU3RhdHVzIjoicHJvcG9zZWQiLCJjYXRlZ29yeSI6W3siY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vbG9pbmMub3JnIiwiY29kZSI6IjgxMzgwLTgiLCJkaXNwbGF5IjoiR29hbHMsIHByZWZlcmVuY2VzLCBhbmQgcHJpb3JpdGllcyBmb3IgY2FyZSBleHBlcmllbmNlIn1dLCJ0ZXh0IjoiSG93IHRvIGNhcmUgZm9yIG1lOiJ9LHsiY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL3BhY2lvLWFkaS9Db2RlU3lzdGVtL1BBRElHb2FsQ2F0ZWdvcnlDUyIsImNvZGUiOiJjYXJlLWV4cGVyaWVuY2UtcHJlZmVyZW5jZSJ9XX1dLCJkZXNjcmlwdGlvbiI6eyJ0ZXh0IjoiPHNwYW4+ICAgICAgICAgICAgICAgIEhvdyB0byBjYXJlIGZvciBtZTogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIElmIEkgYmVjb21lIGluY2FwYWNpdGF0ZWQgYW5kIGNhbm5vdCBleHByZXNzIG15c2VsZiwgaGVyZSBpcyB3aGF0IEkgd291bGQgbGlrZSB0byB0ZWxsIG15IGhlYWx0aGNhcmUgYWdlbnQsIGZhbWlseSBhbmQgZnJpZW5kcyBhYm91dCBob3cgSSB3b3VsZCBsaWtlIGZvciB0aGVtIHRvIGNhcmUgZm9yIG1lOiAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICA8YnI+PC9icj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSSB3YW50IHBob3RvcyBvZiBteSBmYW1pbHkgd2hlcmUgSSBjYW4gc2VlIHRoZW0uICAgICAgICAgICAgPC9zcGFuPiJ9LCJzdWJqZWN0Ijp7InJlZmVyZW5jZSI6IlBhdGllbnQvM2UwYTQ3OWYtMzc1Yy00NmJhLTg1N2ItOWVkNGNjYTdkYjlmIiwiZGlzcGxheSI6IlNtaXRoLUpvaG5zb24sIEJldHN5In19fSx7InJlc291cmNlIjp7InJlc291cmNlVHlwZSI6IkdvYWwiLCJpZCI6ImI2Y2NmMThlLTE1YWQtNDk2Ny05ODRlLTZmYzJmMDc0OTFkZSIsIm1ldGEiOnsicHJvZmlsZSI6WyJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL3BhY2lvLWFkaS9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BBREktQ2FyZUV4cGVyaWVuY2VQcmVmZXJlbmNlIl19LCJ0ZXh0Ijp7InN0YXR1cyI6ImFkZGl0aW9uYWwiLCJkaXYiOiI8ZGl2IHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPjxzcGFuPiAgICAgICAgICAgICAgICBNeSByZWxpZ2lvbjogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIElmIEkgYXBwZWFyIHRvIGJlIGFwcHJvYWNoaW5nIHRoZSBlbmQgb2YgbXkgbGlmZSwgaGVyZSBhcmUgc29tZSB0aGluZ3MgdGhhdCBJIHdvdWxkIGxpa2UgZm9yIG15IGNhcmVnaXZlcnMgdG8ga25vdyBhYm91dCBteSBmYWl0aCBhbmQgbXkgcmVsaWdpb24uICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxici8+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIFBsZWFzZSBjYWxsIEZhdGhlciBNYXJrIGlmIG15IGNvbmRpdGlvbiB3YXJyYW50cyB0aGUgc2VydmljZXMgb2YgYSBwcmllc3QuICAgICAgICAgICAgPC9zcGFuPjwvZGl2PiJ9LCJpZGVudGlmaWVyIjpbeyJ2YWx1ZSI6IjE4QzQzMTI4LTI2REEtNDJFMy1BRDM0LTI1N0Q5QTA5Mjc4RiJ9XSwibGlmZWN5Y2xlU3RhdHVzIjoicHJvcG9zZWQiLCJjYXRlZ29yeSI6W3siY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vbG9pbmMub3JnIiwiY29kZSI6IjgxMzY0LTIiLCJkaXNwbGF5IjoiUmVsaWdpb3VzIGJlbGllZnMifV0sInRleHQiOiJNeSByZWxpZ2lvbjoifSx7ImNvZGluZyI6W3sic3lzdGVtIjoiaHR0cDovL2hsNy5vcmcvZmhpci91cy9wYWNpby1hZGkvQ29kZVN5c3RlbS9QQURJR29hbENhdGVnb3J5Q1MiLCJjb2RlIjoiY2FyZS1leHBlcmllbmNlLXByZWZlcmVuY2UifV19XSwiZGVzY3JpcHRpb24iOnsidGV4dCI6IjxzcGFuPiAgICAgICAgICAgICAgICBNeSByZWxpZ2lvbjogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIElmIEkgYXBwZWFyIHRvIGJlIGFwcHJvYWNoaW5nIHRoZSBlbmQgb2YgbXkgbGlmZSwgaGVyZSBhcmUgc29tZSB0aGluZ3MgdGhhdCBJIHdvdWxkIGxpa2UgZm9yIG15IGNhcmVnaXZlcnMgdG8ga25vdyBhYm91dCBteSBmYWl0aCBhbmQgbXkgcmVsaWdpb24uICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxicj48L2JyPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBQbGVhc2UgY2FsbCBGYXRoZXIgTWFyayBpZiBteSBjb25kaXRpb24gd2FycmFudHMgdGhlIHNlcnZpY2VzIG9mIGEgcHJpZXN0LiAgICAgICAgICAgIDwvc3Bhbj4ifSwic3ViamVjdCI6eyJyZWZlcmVuY2UiOiJQYXRpZW50LzNlMGE0NzlmLTM3NWMtNDZiYS04NTdiLTllZDRjY2E3ZGI5ZiIsImRpc3BsYXkiOiJTbWl0aC1Kb2huc29uLCBCZXRzeSJ9fX0seyJyZXNvdXJjZSI6eyJyZXNvdXJjZVR5cGUiOiJHb2FsIiwiaWQiOiI4MTMyOTRlNS0wM2MwLTQwM2YtODY3NS1hN2QwZjQ0YzkxOGYiLCJtZXRhIjp7InByb2ZpbGUiOlsiaHR0cDovL2hsNy5vcmcvZmhpci91cy9wYWNpby1hZGkvU3RydWN0dXJlRGVmaW5pdGlvbi9QQURJLUNhcmVFeHBlcmllbmNlUHJlZmVyZW5jZSJdfSwidGV4dCI6eyJzdGF0dXMiOiJhZGRpdGlvbmFsIiwiZGl2IjoiPGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj48c3Bhbj4gICAgICAgICAgICAgICAgUGxlYXNlIGF0dGVtcHQgdG8gbm90aWZ5IHNvbWVvbmUgZnJvbSBteSByZWxpZ2lvbiBhdCB0aGUgZm9sbG93aW5nIHBob25lIG51bWJlcjogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIElmIEkgaGF2ZSBpbmNsdWRlZCBvbmUgICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPGJyLz4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgQ2F0aG9saWMgICAgICAgICAgICA8L3NwYW4+PC9kaXY+In0sImlkZW50aWZpZXIiOlt7InZhbHVlIjoiQjA2Qjg2MEEtMjBCQy00QTg0LTlENkYtOTMyQkQwN0Y0NkI5In1dLCJsaWZlY3ljbGVTdGF0dXMiOiJwcm9wb3NlZCIsImNhdGVnb3J5IjpbeyJjb2RpbmciOlt7InN5c3RlbSI6Imh0dHA6Ly9sb2luYy5vcmciLCJjb2RlIjoiODEzNjUtOSIsImRpc3BsYXkiOiJSZWxpZ2lvdXMgYWZmaWxpYXRpb24gY29udGFjdCB0byBub3RpZnkifV0sInRleHQiOiJQbGVhc2UgYXR0ZW1wdCB0byBub3RpZnkgc29tZW9uZSBmcm9tIG15IHJlbGlnaW9uIGF0IHRoZSBmb2xsb3dpbmcgcGhvbmUgbnVtYmVyOiJ9LHsiY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL3BhY2lvLWFkaS9Db2RlU3lzdGVtL1BBRElHb2FsQ2F0ZWdvcnlDUyIsImNvZGUiOiJjYXJlLWV4cGVyaWVuY2UtcHJlZmVyZW5jZSJ9XX1dLCJkZXNjcmlwdGlvbiI6eyJ0ZXh0IjoiPHNwYW4+ICAgICAgICAgICAgICAgIFBsZWFzZSBhdHRlbXB0IHRvIG5vdGlmeSBzb21lb25lIGZyb20gbXkgcmVsaWdpb24gYXQgdGhlIGZvbGxvd2luZyBwaG9uZSBudW1iZXI6ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBJZiBJIGhhdmUgaW5jbHVkZWQgb25lICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxicj48L2JyPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBDYXRob2xpYyAgICAgICAgICAgIDwvc3Bhbj4ifSwic3ViamVjdCI6eyJyZWZlcmVuY2UiOiJQYXRpZW50LzNlMGE0NzlmLTM3NWMtNDZiYS04NTdiLTllZDRjY2E3ZGI5ZiIsImRpc3BsYXkiOiJTbWl0aC1Kb2huc29uLCBCZXRzeSJ9fX0seyJyZXNvdXJjZSI6eyJyZXNvdXJjZVR5cGUiOiJHb2FsIiwiaWQiOiIzMjRlMWRjNy1jNzA4LTQ2Y2EtYjg4Yi1jYjE1YzJiNGU3OTQiLCJtZXRhIjp7InByb2ZpbGUiOlsiaHR0cDovL2hsNy5vcmcvZmhpci91cy9wYWNpby1hZGkvU3RydWN0dXJlRGVmaW5pdGlvbi9QQURJLUNhcmVFeHBlcmllbmNlUHJlZmVyZW5jZSJdfSwidGV4dCI6eyJzdGF0dXMiOiJhZGRpdGlvbmFsIiwiZGl2IjoiPGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj48c3Bhbj4gICAgICAgICAgICAgICAgTXkgdW5maW5pc2hlZCBidXNpbmVzczogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIElmIGl0IGFwcGVhcnMgdGhhdCBJIGFtIGFwcHJvYWNoaW5nIHRoZSBlbmQgb2YgbXkgbGlmZSwgYW5kIEkgY2Fubm90IGNvbW11bmljYXRlIHdpdGggcGVyc29ucyBhcm91bmQgbWUsIEkgd291bGQgd2FudCBteSBkb2N0b3JzIGFuZCBudXJzZXMsIG15IGZhbWlseSwgYW5kIG15IGZyaWVuZHMgdG8ga25vdyBhYm91dCBzb21lIHVuZmluaXNoZWQgYnVzaW5lc3MgdGhhdCBJIG5lZWQgdG8gYWRkcmVzczogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPGJyLz4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSSB3YW50IG15IHNpc3RlciBhbmQgSSB0byB0YWxrIGFnYWluLCBhbmQgbWlzcyBoZXIuICBJIHdpc2ggd2UgaGFkbid0IGRpc2FncmVlZCBhbGwgdGhvc2UgeWVhcnMgYWdvIGFuZCByZWdyZXQgdGhlIHRpbWUgaXQgaGFzIGNvc3QgdXMuICBJJ2QgbGlrZSB0byBzZWUgaGVyIGZhY2UgaWYgSSB3ZXJlIHZlcnkgaWxsIGFuZCBuZWVkZWQgdGhlIGNvbWZvcnQgb2YgZmFtaWx5IGF0IG15IHNpZGUuICAgICAgICAgICAgPC9zcGFuPjwvZGl2PiJ9LCJpZGVudGlmaWVyIjpbeyJ2YWx1ZSI6IkUzRjJDNDcxLTlGRUUtNEEzMS1CMzkyLUZDNzE2QUNFMjVCRiJ9XSwibGlmZWN5Y2xlU3RhdHVzIjoicHJvcG9zZWQiLCJjYXRlZ29yeSI6W3siY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vbG9pbmMub3JnIiwiY29kZSI6IjgxMzY2LTciLCJkaXNwbGF5IjoiVW5maW5pc2hlZCBidXNpbmVzcyJ9XSwidGV4dCI6Ik15IHVuZmluaXNoZWQgYnVzaW5lc3M6In0seyJjb2RpbmciOlt7InN5c3RlbSI6Imh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvcGFjaW8tYWRpL0NvZGVTeXN0ZW0vUEFESUdvYWxDYXRlZ29yeUNTIiwiY29kZSI6ImNhcmUtZXhwZXJpZW5jZS1wcmVmZXJlbmNlIn1dfV0sImRlc2NyaXB0aW9uIjp7InRleHQiOiI8c3Bhbj4gICAgICAgICAgICAgICAgTXkgdW5maW5pc2hlZCBidXNpbmVzczogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIElmIGl0IGFwcGVhcnMgdGhhdCBJIGFtIGFwcHJvYWNoaW5nIHRoZSBlbmQgb2YgbXkgbGlmZSwgYW5kIEkgY2Fubm90IGNvbW11bmljYXRlIHdpdGggcGVyc29ucyBhcm91bmQgbWUsIEkgd291bGQgd2FudCBteSBkb2N0b3JzIGFuZCBudXJzZXMsIG15IGZhbWlseSwgYW5kIG15IGZyaWVuZHMgdG8ga25vdyBhYm91dCBzb21lIHVuZmluaXNoZWQgYnVzaW5lc3MgdGhhdCBJIG5lZWQgdG8gYWRkcmVzczogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPGJyPjwvYnI+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIEkgd2FudCBteSBzaXN0ZXIgYW5kIEkgdG8gdGFsayBhZ2FpbiwgYW5kIG1pc3MgaGVyLiAgSSB3aXNoIHdlIGhhZG4ndCBkaXNhZ3JlZWQgYWxsIHRob3NlIHllYXJzIGFnbyBhbmQgcmVncmV0IHRoZSB0aW1lIGl0IGhhcyBjb3N0IHVzLiAgSSdkIGxpa2UgdG8gc2VlIGhlciBmYWNlIGlmIEkgd2VyZSB2ZXJ5IGlsbCBhbmQgbmVlZGVkIHRoZSBjb21mb3J0IG9mIGZhbWlseSBhdCBteSBzaWRlLiAgICAgICAgICAgIDwvc3Bhbj4ifSwic3ViamVjdCI6eyJyZWZlcmVuY2UiOiJQYXRpZW50LzNlMGE0NzlmLTM3NWMtNDZiYS04NTdiLTllZDRjY2E3ZGI5ZiIsImRpc3BsYXkiOiJTbWl0aC1Kb2huc29uLCBCZXRzeSJ9fX0seyJyZXNvdXJjZSI6eyJyZXNvdXJjZVR5cGUiOiJHb2FsIiwiaWQiOiI3Y2IxZTM5OS05YmUyLTQxZTUtODc5Yy1jNmY3NzA2MTIzZGQiLCJtZXRhIjp7InByb2ZpbGUiOlsiaHR0cDovL2hsNy5vcmcvZmhpci91cy9wYWNpby1hZGkvU3RydWN0dXJlRGVmaW5pdGlvbi9QQURJLUNhcmVFeHBlcmllbmNlUHJlZmVyZW5jZSJdfSwidGV4dCI6eyJzdGF0dXMiOiJhZGRpdGlvbmFsIiwiZGl2IjoiPGRpdiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj48c3Bhbj4gICAgICAgICAgICAgICAgTGF1Z2h0ZXI6ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxzcGFuPiAgICAgICAgICAgICAgICBUaGVzZSBhcmUgc29tZSBvZiBteSBmb25kZXN0IG1lbW9yaWVzIGZyb20gbGlmZSB0aGF0IGhhdmUgYWx3YXlzIGJyb3VnaHQgYSBzbWlsZSB0byBteSBmYWNlIG9yIG1hZGUgbWUgbGF1Z2g6ICAgICAgICAgICAgPC9zcGFuPiAgICAgICAgICAgIDxici8+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIE15IGRvZ3MgbWFrZSBtZSBsYXVnaCB3aGVuIHRoZXkgcGxheSB0b2dldGhlciwgYW5kIG15IGdyYW5kY2hpbGRyZW4gbWFrZSBtZSBsYXVnaCB3aGVuIHRoZXkgcHV0IG9uIHBsYXlzIGZvciBtZS4gIFRoZXkgYnJpbmcgbWUgZ3JlYXQgam95LiAgICAgICAgICAgIDwvc3Bhbj48L2Rpdj4ifSwiaWRlbnRpZmllciI6W3sidmFsdWUiOiI5NThEQjQyNC00NUE4LTRGNTMtOEVDOC1CQzQxNjRDQ0ZBQzUifV0sImxpZmVjeWNsZVN0YXR1cyI6InByb3Bvc2VkIiwiY2F0ZWdvcnkiOlt7ImNvZGluZyI6W3sic3lzdGVtIjoiaHR0cDovL2xvaW5jLm9yZyIsImNvZGUiOiI4MTM2MS04IiwiZGlzcGxheSI6IlRoaW5ncyB0aGF0IG1ha2UgbWUgbGF1Z2gifV0sInRleHQiOiJMYXVnaHRlcjoifSx7ImNvZGluZyI6W3sic3lzdGVtIjoiaHR0cDovL2hsNy5vcmcvZmhpci91cy9wYWNpby1hZGkvQ29kZVN5c3RlbS9QQURJR29hbENhdGVnb3J5Q1MiLCJjb2RlIjoiY2FyZS1leHBlcmllbmNlLXByZWZlcmVuY2UifV19XSwiZGVzY3JpcHRpb24iOnsidGV4dCI6IjxzcGFuPiAgICAgICAgICAgICAgICBMYXVnaHRlcjogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIFRoZXNlIGFyZSBzb21lIG9mIG15IGZvbmRlc3QgbWVtb3JpZXMgZnJvbSBsaWZlIHRoYXQgaGF2ZSBhbHdheXMgYnJvdWdodCBhIHNtaWxlIHRvIG15IGZhY2Ugb3IgbWFkZSBtZSBsYXVnaDogICAgICAgICAgICA8L3NwYW4+ICAgICAgICAgICAgPGJyPjwvYnI+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIE15IGRvZ3MgbWFrZSBtZSBsYXVnaCB3aGVuIHRoZXkgcGxheSB0b2dldGhlciwgYW5kIG15IGdyYW5kY2hpbGRyZW4gbWFrZSBtZSBsYXVnaCB3aGVuIHRoZXkgcHV0IG9uIHBsYXlzIGZvciBtZS4gIFRoZXkgYnJpbmcgbWUgZ3JlYXQgam95LiAgICAgICAgICAgIDwvc3Bhbj4ifSwic3ViamVjdCI6eyJyZWZlcmVuY2UiOiJQYXRpZW50LzNlMGE0NzlmLTM3NWMtNDZiYS04NTdiLTllZDRjY2E3ZGI5ZiIsImRpc3BsYXkiOiJTbWl0aC1Kb2huc29uLCBCZXRzeSJ9fX0seyJyZXNvdXJjZSI6eyJyZXNvdXJjZVR5cGUiOiJPYnNlcnZhdGlvbiIsImlkIjoiZWNlZDVhN2YtYzkwNi00ZTAwLWIwNzMtYTM1NTM2YzY3M2FjIiwibWV0YSI6eyJwcm9maWxlIjpbImh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvcGFjaW8tYWRpL1N0cnVjdHVyZURlZmluaXRpb24vUEFESS1PcmdhbkRvbmF0aW9uT2JzZXJ2YXRpb24iXX0sInRleHQiOnsic3RhdHVzIjoiYWRkaXRpb25hbCIsImRpdiI6IjxkaXYgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI+PHNwYW4+Q29uc2VudCB0byBEb25hdGU8L3NwYW4+PGJyLz4gICAgICAgICAgICA8c3Bhbj5JIGNvbnNlbnQgdG8gZG9uYXRlIGFsbCBvcmdhbnMgYW5kIHRpc3N1ZXMuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+PC9kaXY+In0sImlkZW50aWZpZXIiOlt7InZhbHVlIjoiRDVDMkFFRDItNkM1NC00Qjg3LUIzRUQtM0U3REI0NTI0NjRCIn1dLCJzdGF0dXMiOiJmaW5hbCIsImNvZGUiOnsiY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vbG9pbmMub3JnIiwiY29kZSI6Ijc1NzgxLTUiLCJkaXNwbGF5IjoiVGhvdWdodHMgb24gb3JnYW4gYW5kIHRpc3N1ZSBkb25hdGlvbnMifV19LCJzdWJqZWN0Ijp7InJlZmVyZW5jZSI6IlBhdGllbnQvM2UwYTQ3OWYtMzc1Yy00NmJhLTg1N2ItOWVkNGNjYTdkYjlmIiwiZGlzcGxheSI6IlNtaXRoLUpvaG5zb24sIEJldHN5In0sInZhbHVlU3RyaW5nIjoiSSBjb25zZW50IHRvIGRvbmF0ZSBhbGwgb3JnYW5zIGFuZCB0aXNzdWVzLiJ9fSx7InJlc291cmNlIjp7InJlc291cmNlVHlwZSI6IkdvYWwiLCJpZCI6IjY1ZWI3NTMzLTNmNWYtNDI3ZC05NTFhLTQ4MWM4MmQ0NDE4ZiIsIm1ldGEiOnsicHJvZmlsZSI6WyJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL3BhY2lvLWFkaS9TdHJ1Y3R1cmVEZWZpbml0aW9uL1BBREktQ2FyZUV4cGVyaWVuY2VQcmVmZXJlbmNlIl19LCJ0ZXh0Ijp7InN0YXR1cyI6ImFkZGl0aW9uYWwiLCJkaXYiOiI8ZGl2IHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPjxzcGFuPkF1dG9wc3k8L3NwYW4+PGJyLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+SSB3YW50IGFuIGF1dG9wc3k8L3NwYW4+ICAgICAgICAgICAgICAgIDxzcGFuPm9ubHkgaWYgdGhlcmUgYXJlIHF1ZXN0aW9ucyBhYm91dCBteSBkZWF0aC48L3NwYW4+PC9kaXY+In0sImlkZW50aWZpZXIiOlt7InZhbHVlIjoiNjBGQjA2NTItNkQxNC00M0Y5LUI4RjQtQTIyOEJFODA5RTAzIn1dLCJsaWZlY3ljbGVTdGF0dXMiOiJwcm9wb3NlZCIsImNhdGVnb3J5IjpbeyJjb2RpbmciOlt7InN5c3RlbSI6Imh0dHA6Ly9sb2luYy5vcmciLCJjb2RlIjoiNzU3ODItMyIsImRpc3BsYXkiOiJUaG91Z2h0cyBvbiBBdXRvcHN5In1dLCJ0ZXh0IjoiQXV0b3BzeSJ9LHsiY29kaW5nIjpbeyJzeXN0ZW0iOiJodHRwOi8vaGw3Lm9yZy9maGlyL3VzL3BhY2lvLWFkaS9Db2RlU3lzdGVtL1BBRElHb2FsQ2F0ZWdvcnlDUyIsImNvZGUiOiJjYXJlLWV4cGVyaWVuY2UtcHJlZmVyZW5jZSJ9XX1dLCJkZXNjcmlwdGlvbiI6eyJ0ZXh0IjoiPHNwYW4+QXV0b3BzeTwvc3Bhbj48YnI+PC9icj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+SSB3YW50IGFuIGF1dG9wc3k8L3NwYW4+ICAgICAgICAgICAgICAgIDxzcGFuPm9ubHkgaWYgdGhlcmUgYXJlIHF1ZXN0aW9ucyBhYm91dCBteSBkZWF0aC48L3NwYW4+In0sInN1YmplY3QiOnsicmVmZXJlbmNlIjoiUGF0aWVudC8zZTBhNDc5Zi0zNzVjLTQ2YmEtODU3Yi05ZWQ0Y2NhN2RiOWYiLCJkaXNwbGF5IjoiU21pdGgtSm9obnNvbiwgQmV0c3kifX19LHsicmVzb3VyY2UiOnsicmVzb3VyY2VUeXBlIjoiR29hbCIsImlkIjoiOGVhMzk0NjYtOWRlOC00Njc3LWI2NWUtNzdlNjBjYzcyNGM4IiwibWV0YSI6eyJwcm9maWxlIjpbImh0dHA6Ly9obDcub3JnL2ZoaXIvdXMvcGFjaW8tYWRpL1N0cnVjdHVyZURlZmluaXRpb24vUEFESS1QZXJzb25hbEludGVydmVudGlvblByZWZlcmVuY2UiXX0sInRleHQiOnsic3RhdHVzIjoiYWRkaXRpb25hbCIsImRpdiI6IjxkaXYgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI+PHNwYW4+SGVyZSBhcmUgbXkgdGhvdWdodHMgb24gZnVuZXJhbCBvciBidXJpYWwgcGxhbnM6PC9zcGFuPjxici8+ICAgICAgICAgICAgPHNwYW4+ICAgICAgICAgICAgICAgIElmIEkgd2VyZSB0byBwYXNzIGF3YXk6PGJyLz4gICAgICAgICAgICAgICAgUGxlYXNlIGNhbGwgSmltIEhvdXN0b24sIG15IGxhd3llciwgZm9yIGFycmFuZ2VtZW50cyBJIGhhdmUgYWxyZWFkeSBtYWRlLiAgICAgICAgICAgIDwvc3Bhbj48L2Rpdj4ifSwiaWRlbnRpZmllciI6W3sidmFsdWUiOiIzQUEzQTI2RC00NDE2LTRERDYtQTg1RC1EOEREOUNFQ0FBNzkifV0sImxpZmVjeWNsZVN0YXR1cyI6InByb3Bvc2VkIiwiY2F0ZWdvcnkiOlt7ImNvZGluZyI6W3sic3lzdGVtIjoiaHR0cDovL2hsNy5vcmcvZmhpci91cy9wYWNpby1hZGkvQ29kZVN5c3RlbS9QQURJR29hbENhdGVnb3J5Q1MiLCJjb2RlIjoiaW50ZXJ2ZW50aW9uLXByZWZlcmVuY2UifV19XSwiZGVzY3JpcHRpb24iOnsidGV4dCI6IjxzcGFuPkhlcmUgYXJlIG15IHRob3VnaHRzIG9uIGZ1bmVyYWwgb3IgYnVyaWFsIHBsYW5zOjwvc3Bhbj48YnI+PC9icj4gICAgICAgICAgICA8c3Bhbj4gICAgICAgICAgICAgICAgSWYgSSB3ZXJlIHRvIHBhc3MgYXdheTo8YnI+PC9icj4gICAgICAgICAgICAgICAgUGxlYXNlIGNhbGwgSmltIEhvdXN0b24sIG15IGxhd3llciwgZm9yIGFycmFuZ2VtZW50cyBJIGhhdmUgYWxyZWFkeSBtYWRlLiAgICAgICAgICAgIDwvc3Bhbj4ifSwic3ViamVjdCI6eyJyZWZlcmVuY2UiOiJQYXRpZW50LzNlMGE0NzlmLTM3NWMtNDZiYS04NTdiLTllZDRjY2E3ZGI5ZiIsImRpc3BsYXkiOiJTbWl0aC1Kb2huc29uLCBCZXRzeSJ9fX1dfQ=="
}