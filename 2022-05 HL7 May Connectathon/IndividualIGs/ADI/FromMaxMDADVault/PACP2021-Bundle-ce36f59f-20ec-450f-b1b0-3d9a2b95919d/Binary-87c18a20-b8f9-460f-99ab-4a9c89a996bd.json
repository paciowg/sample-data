{
  "resourceType": "Binary",
  "id": "87c18a20-b8f9-460f-99ab-4a9c89a996bd",
  "meta": {
    "versionId": "1",
    "lastUpdated": "2022-04-26T16:56:49.000+00:00",
    "source": "#c63WZa99kXv3VouY"
  },
  "contentType": "text/xml",
  "data": "﻿<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="CDA.xsl"?>
<ClinicalDocument xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:hl7-org:v3" xmlns:sdtc="urn:hl7-org:sdtc">
  <realmCode code="US" />
  <typeId root="2.16.840.1.113883.1.3" extension="POCD_HD000040" />
  <templateId root="2.16.840.1.113883.10.20.29.1" extension="2015-08-01" />
  <templateId root="2.16.840.1.113883.4.823.1.2.1" extension="2016-07-01" />
  <templateId root="2.16.840.1.113883.4.823.1.1.1" extension="2016-07-01" />
  <id root="2.16.840.1.113883.3.3208.101.4.8.2" extension="20130607100315-CCDA-CCD-802" />
  <code code="81334-5" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Personal advance care plan" />
  <title mediaType="text/plain" representation="TXT">Personal Advance Care Plan Document (Version 2)</title>
  <effectiveTime value="20211217142944-0600" />
  <confidentialityCode code="N" codeSystem="2.16.840.1.113883.5.25" displayName="normal" />
  <languageCode code="en-US" />
  <setId root="2.16.840.1.113883.3.3208.101.737" extension="20130607100315-CCDA-678"/>
  <versionNumber value="2" />
  <relatedDocument typeCode="RPLC" >
    <parentDocument>
      <id root="2.16.840.1.113883.3.3208.101.4.8.1" extension="20130607100315-CCDA-CCD-801" />
    </parentDocument>
  </relatedDocument>
  <recordTarget>
    <patientRole>
      <id root="2.16.840.1.113883.4.823.1" extension="87f37989294a408897aacd1fc5d8fd16" />
      <addr use="HP">
        <streetAddressLine partType="SAL">111 Maple Court</streetAddressLine>
        <city partType="CTY">San Antonio</city>
        <state partType="STA">TX</state>
        <postalCode partType="ZIP">78212</postalCode>
        <country partType="CNT">US</country>
      </addr>
      <telecom value="tel:+12146745539" use="MC" />
      <telecom value="mailto:BetsySJ@example.com" />
      <patient classCode="PSN" determinerCode="INSTANCE">
        <name use="L">
          <given partType="GIV">Betsy</given>
          <family partType="FAM">Smith-Johnson</family>
        </name>
        <administrativeGenderCode code="F" codeSystem="2.16.840.1.113883.5.1" codeSystemName="AdministrativeGender" displayName="Female" />
        <birthTime value="19501115" />
        <maritalStatusCode nullFlavor="NI" />
        <religiousAffiliationCode>
          <originalText mediaType="text/plain" language="en-US">Catholic</originalText>
        </religiousAffiliationCode>
        <raceCode nullFlavor="NI" />
        <ethnicGroupCode nullFlavor="NI" />
        <languageCommunication>
          <languageCode code="eng" />
          <modeCode nullFlavor="NI" />
          <proficiencyLevelCode nullFlavor="NI" />
          <preferenceInd value="true" />
        </languageCommunication>
      </patient>
    </patientRole>
  </recordTarget>
  <author>
    <time value="20211217174944-0600" />
    <assignedAuthor>
      <id root="2.16.840.1.113883.4.6" extension="66666" />
      <id root="2.16.840.1.113883.4.823.1" extension="87f37989294a408897aacd1fc5d8fd16" />
      <code code="ONESELF" codeSystem="2.16.840.1.113883.5.111" codeSystemName="RoleCode" displayName="Self" />
      <addr use="HP">
        <streetAddressLine partType="SAL">111 Maple Court</streetAddressLine>
        <city partType="CTY">San Antonio</city>
        <state partType="STA">TX</state>
        <postalCode partType="ZIP">78212</postalCode>
        <country partType="CNT">US</country>
      </addr>
      <telecom value="tel:+12146745539" use="MC" />
      <assignedPerson classCode="PSN" determinerCode="INSTANCE">
        <name use="L">
          <given partType="GIV">Betsy</given>
          <family partType="FAM">Smith-Johnson</family>
        </name>
      </assignedPerson>
    </assignedAuthor>
  </author>
  <!--  Page 8 "No personal advance care plan information is "authored" by a device. The information in a Personal Advance Care Plan document represents the person's own thoughts only.
iv.	This assignedAuthor SHALL NOT contain [0..0] assignedAuthoringDevice (CONF:4445-33108)."
  <author>
    <time value="20211217174944-0600" />
    <assignedAuthor>
      <id root="2.16.840.1.113883.4.6" extension="66660" />
      <addr>
        <streetAddressLine partType="SAL">740 E. Campbell Rd. Suite 825</streetAddressLine>
        <city partType="CTY">Richardson</city>
        <state partType="STA">TX</state>
        <postalCode partType="ZIP">75081</postalCode>
        <country partType="CNT">US</country>
      </addr>
      <telecom value="tel:+1(202)776-7700" />
      <assignedAuthoringDevice classCode="DEV" determinerCode="INSTANCE">
        <manufacturerModelName mediaType="text/plain" representation="TXT" language="en-US">AD Vault MyDirectives.com</manufacturerModelName>
        <softwareName mediaType="text/plain" representation="TXT" language="en-US">MyDirectives.com v2.0</softwareName>
      </assignedAuthoringDevice>
      <representedOrganization>
        <id root="1.3.6.1.4.1.42424242.4.99930.4" extension="4" />
        <name use="L">ADVault, Inc.</name>
        <telecom value="tel:+1(202)776-7700" use="WP" />
        <addr use="WP">
          <streetAddressLine partType="SAL">740 E. Campbell Rd. Suite 825</streetAddressLine>
          <city partType="CTY">Richardson</city>
          <state partType="STA">TX</state>
          <postalCode partType="ZIP">75081</postalCode>
          <country partType="CNT">US</country>
        </addr>
      </representedOrganization>
    </assignedAuthor>
  </author>
  -->
  <dataEnterer>
    <assignedEntity>
      <id root="2.16.840.1.113883.4.6" extension="66666" />
      <code code="ONESELF" codeSystem="2.16.840.1.113883.5.111" codeSystemName="RoleCode" displayName="Self">
        <originalText mediaType="text/plain" language="en-US" />
      </code>
      <addr use="HP">
        <streetAddressLine partType="SAL">111 Maple Court</streetAddressLine>
        <city partType="CTY">San Antonio</city>
        <state partType="STA">TX</state>
        <postalCode partType="ZIP">78212</postalCode>
        <country partType="CNT">US</country>
      </addr>
      <telecom value="tel:+12146745539" use="MC" />
      <telecom value="mailto:BetsySJ@example.com" />
      <assignedPerson classCode="PSN" determinerCode="INSTANCE">
        <name use="L">
          <given partType="GIV">Betsy</given>
          <family partType="FAM">Smith-Johnson</family>
        </name>
      </assignedPerson>
    </assignedEntity>
  </dataEnterer>
  <custodian>
    <assignedCustodian>
      <representedCustodianOrganization>
        <id extension="44444" root="6b7db8a2-1c53-42aa-b4c4-c49c05406f97"/>
        <name>ADVault Inc</name>
        <telecom value="tel:+1(202)776-7700" use="WP" />
        <addr use="WP">
          <streetAddressLine partType="SAL">740 E. Campbell Rd. Suite 825</streetAddressLine>
          <city partType="CTY">Richardson</city>
          <state partType="STA">TX</state>
          <postalCode partType="ZIP">75081</postalCode>
          <country partType="CNT">US</country>
        </addr>
      </representedCustodianOrganization>
    </assignedCustodian>
  </custodian>
  <participant typeCode="DEV">
    <functionCode code="assembler" codeSystem="2.16.840.1.113883.4.642.4.1131" codeSystemName="ProvenanceParticipationFunction"/>
    <time value="20211217174944-0600"/>
    <associatedEntity classCode="OWN">
      <scopingOrganization>
        <id extension="44444" root="6b7db8a2-1c53-42aa-b4c4-c49c05406f97"/>
        <name use="L">ADVault, Inc.</name>
        <telecom use="WP" value="tel:+1(202)776-7700"/>
        <addr use="WP">
          <streetAddressLine partType="SAL">740 E. Campbell Rd. Suite 825</streetAddressLine>
          <city partType="CTY">Richardson</city>
          <state partType="STA">TX</state>
          <postalCode partType="ZIP">75081</postalCode>
          <country partType="CNT">US</country>
        </addr>
      </scopingOrganization>
    </associatedEntity>
  </participant>
  <authenticator>
    <time value="20211217174944-0600" />
    <signatureCode code="S" />
    <assignedEntity>
      <id root="2.16.840.1.113883.3.3208.101.3" extension="20211217144438-7124" />
      <code code="ONESELF" codeSystem="2.16.840.1.113883.5.111" codeSystemName="RoleCode" displayName="Self">
        <originalText mediaType="text/plain" language="en-US">Self</originalText>
      </code>
      <addr use="HP">
        <streetAddressLine partType="SAL">111 Maple Court</streetAddressLine>
        <city partType="CTY">San Antonio</city>
        <state partType="STA">TX</state>
        <postalCode partType="ZIP">78212</postalCode>
        <country partType="CNT">US</country>
      </addr>
      <telecom value="tel:+12146745539" use="MC" />
      <telecom value="mailto:BetsySJ@example.com" />
      <assignedPerson classCode="PSN" determinerCode="INSTANCE">
        <name use="L">
          <given partType="GIV">Betsy</given>
          <family partType="FAM">Smith-Johnson</family>
        </name>
      </assignedPerson>
    </assignedEntity>
  </authenticator>
  <participant typeCode="CST">
    <time value="20211217174944-0600" />
    <associatedEntity classCode="AGNT">
      <code>
        <originalText mediaType="text/plain" language="en-US">Son</originalText>
      </code>
      <telecom value="mailto:CharlesSJ@example.com" use="HP" />
      <associatedPerson classCode="PSN" determinerCode="INSTANCE">
        <name>
          <given partType="GIV">Charles</given>
          <family partType="FAM">Johnson</family>
        </name>
      </associatedPerson>
    </associatedEntity>
  </participant>
  <!--   Howard Thompson is witness 1 -->
  <participant typeCode="WIT">
    <time value="20211217174944-0600"/>
    <associatedEntity classCode="AGNT">
      <associatedPerson classCode="PSN" determinerCode="INSTANCE">
        <name>
          <given partType="GIV">Howard Thompson</given>
        </name>
      </associatedPerson>
    </associatedEntity>
  </participant>
  <!--   Tonya Williams is witness 2 -->
  <participant typeCode="WIT">
    <time value="20211217174944-0600"/>
    <associatedEntity classCode="AGNT">
      <associatedPerson classCode="PSN" determinerCode="INSTANCE">
        <name>
          <given partType="GIV">Tonya Williams</given>
        </name>
      </associatedPerson>
    </associatedEntity>
  </participant>
  <component>
    <structuredBody>
      <component>
            <section>
              <templateId root="2.16.840.1.113883.4.823.1.3.3" extension="2016-07-01" />
              <code code="81335-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Healthcare agent" />
              <title mediaType="text/plain" representation="TXT" language="en-US">Appointment of a Primary Healthcare Agent and Alternate Healthcare Agents</title>
              <text><paragraph>IF THIS PART OF THE uADD™ IS LEFT BLANK, I DO NOT WANT TO DESIGNATE A<br />HEALTHCARE AGENT AT THIS TIME, AND I DO NOT WANT A<br />DEFAULT HEALTHCARE AGENT DESIGNATED FOR ME UNDER APPLICABLE LAW. <br />I TRUST THE DOCTORS AND NURSES TREATING ME TO MAKE<br />MEDICAL TREATMENT DECISIONS REGARDING MY TREATMENT AND CARE.</paragraph>

    <paragraph>I am appointing the person or persons below as my healthcare agent and, if applicable, as my alternate healthcare agent(s), and I am granting to each of them the legal authority to make medical treatment decisions on my behalf and to consult with my physician and others.  The power to make medical treatment decisions that I am granting to my healthcare agent(s) is expressly subject to, and limited by, the choices that I have expressed elsewhere in my uADD.  If my medical treatment choices are not clear, I am authorizing and directing my healthcare agent to make decisions in my best interests and based on what is known of my wishes.</paragraph>
            <content ID="HealthAgent1">
                    <content styleCode="Bold">Primary Healthcare Agent</content><br />
                    <content ID="HealthAgent1Type">The person I choose as my Primary Healthcare Agent is:</content><br />
                <content styleCode="Answer">
                        <content ID="HealthAgent1Person">
        Charles Johnson
            <content ID="HealthAgent1Rel">(Son)</content>
    </content><br />
        <content ID="HealthAgent1Email">
          CharlesSJ@example.com
        </content><br />
        <content ID="HealthAgent1SelectedDate">
            [SELECTED to act as a healthcare agent on 12/17/2021, at 5:49 PM CDT]
        </content><br />
        <content ID="HealthAgent1AcceptanceDate" styleCode="RedAnswer">
          [ACCEPTED to act as a healthcare agent on 12/17/2021, at 6:49 PM CDT]
        </content><br />

                </content>
            </content><br />
            <content ID="HealthAgent2">
                    <content styleCode="Bold" ID="HealthAgent2Type">First Alternate Healthcare Agent</content><br />
                    <content ID="HealthAgent2Powers">If this healthcare agent is unable or unwilling to make medical treatment decisions for me, or if my spouse is designated as my primary healthcare agent and our marriage is annulled, or we are divorced or legally separated, then my next choice for a healthcare agent is:</content><br />
                <content styleCode="Answer">
                        <content ID="HealthAgent2Person">
        Lisa Johnson
            <content ID="HealthAgent2Rel">(Daughter-in-law)</content>
    </content><br />
        <content ID="HealthAgent2Email">
          maria.LisaJ@example.com
        </content><br />
        <content ID="HealthAgent2SelectedDate">
          [SELECTED to act as a healthcare agent on  12/17/2021, at 5:49 PM CDT]
        </content><br />
        <content ID="HealthAgent2AcceptanceDate" styleCode="RedAnswer">
            [As of 12/17/2021, at 11:29 AM CDT, a response is still PENDING]
        </content><br />

                </content>
            </content><br />
            <content ID="HealthAgent3">
                    <content styleCode="Bold" ID="HealthAgent3Type">Second Alternate Healthcare Agent</content><br />
                    <content ID="HealthAgent3Powers">If this alternate healthcare agent is unable or unwilling to make medical treatment decisions for me, or if my spouse is designated as my first alternate healthcare agent and our marriage is annulled, or we are divorced or legally separated, then my next choice for a healthcare agent is:</content><br />
                <content styleCode="Answer">
                        <content ID="HealthAgent3Person">
        Debra Johnson
            <content ID="HealthAgent3Rel">(Daughter)</content>
    </content><br />
        <content ID="HealthAgent3Email">
          DebraSJ@example.com
        </content><br />
        <content ID="HealthAgent3SelectedDate">
          [SELECTED to act as a healthcare agent on 12/17/2021, at 5:49 PM CDT]
        </content><br />
        <content ID="HealthAgent3AcceptanceDate" styleCode="RedAnswer">
            [As of 12/17/2021, at 11:29 AM CDT, a response is still PENDING]
        </content><br />

                </content>
            </content><br />
        <content ID="HCA_1">
            <content ID="HCA_1_Q" styleCode="Bold">
                My Healthcare Agent’s General Authority
            </content><br />
            <content ID="HCA_1_PL">
                    <content>Subject to my medical treatment choices expressed elsewhere in this uADD™ and applicable law that requires otherwise, I grant to my healthcare agent the power to make all choices and medical treatment decisions for me.</content>

            </content>
        </content><br />
    <content ID="HCA_2">
        <content ID="HCA_2_C">
            If I cannot express my own wishes for medical treatment,
        </content>
        <content ID="HCA_2_PL">
            I would like the doctors treating me, as well as my healthcare agent if I have chosen one, to make decisions based as much as possible and appropriate on my instructions below.
        </content>
    </content>
        <content ID="HCA_3" styleCode="Answer">
            <content ID="HCA_3_C">
                If at some point in the future I am declared incompetent,
            </content>
            <content ID="HCA_3_PL">
                I DO NOT want to be allowed to override these preferences. I want my doctors to follow the preferences I express in this document.            </content>
        </content><br /><br />
    <content ID="HCA_4">
        <content ID="HCA_4_PL">
            Unless I have stated otherwise somewhere else in this uADD™, I understand that my healthcare agent may reconsider my medical treatment choices expressed above in light of my other instructions contained elsewhere in this uADD™ or new medical information.
        </content>
    </content><br /></text>
              <entry>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.2" extension="2016-07-01" />
                  <id root="BFA14633-2316-412A-8B2E-820752D9BBDE" />
                  <code code="75783-1" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Primary Healthcare Agent">
                    <originalText>
                      <reference value="#HealthAgent1Type" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#HealthAgent1" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20211217174944-0600" />
                  <participant typeCode="CST">
                    <participantRole classCode="AGNT">
                      <id root="DC6F7D6E-7915-41DD-A692-97CEE94B14C6" />
                      <code>
                        <originalText mediaType="text/plain" language="en-US">Son</originalText>
                      </code>
                      <telecom value="mailto:CharlesSJ@example.com" use="HP" />
                      <playingEntity>
                        <code code="63161005" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Principle">
                          <originalText>
                            <reference value="#HealthAgent1Type" />
                          </originalText>
                        </code>
                        <name>
                          <given partType="GIV">Charles</given>
                          <family partType="FAM">Johnson</family>
                        </name>
                      </playingEntity>
                    </participantRole>
                  </participant>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.2" extension="2016-07-01" />
                  <id root="E8A5E3CE-5492-440F-A599-6CD735218C3B" />
                  <code code="75783-1" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Primary Healthcare Agent">
                    <originalText>
                      <reference value="#HealthAgent1Type" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#HealthAgent1" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20211217184944-0600" />
                  <participant typeCode="VRF">
                    <participantRole classCode="AGNT">
                      <id root="F033ABBF-2D35-4DC4-85B8-452A6D840391" />
                      <code>
                        <originalText mediaType="text/plain" language="en-US">Son</originalText>
                      </code>
                      <telecom value="mailto:CharlesSJ@example.com" use="HP" />
                      <playingEntity>
                        <code code="63161005" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Principle">
                          <originalText>
                            <reference value="#HealthAgent1Type" />
                          </originalText>
                        </code>
                        <name>
                          <given partType="GIV">Charles</given>
                          <family partType="FAM">Johnson</family>
                        </name>
                      </playingEntity>
                    </participantRole>
                  </participant>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.2" extension="2016-07-01" />
                  <id root="B9B1206D-38E4-4C6F-B9A7-0B7660FD824A" />
                  <code code="75784-9" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="First Alternative Health Agent">
                    <originalText>
                      <reference value="#HealthAgent2Type" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#HealthAgent2" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20211217174944-0600" />
                  <participant typeCode="CST">
                    <participantRole classCode="AGNT">
                      <id root="9BBE4FA0-0BED-4B63-B172-4AFD773F0C19" />
                      <code>
                        <originalText mediaType="text/plain" language="en-US">Daughter-in-law</originalText>
                      </code>
                      <telecom value="mailto:LisaJ@example.com" use="HP" />
                      <playingEntity>
                        <code code="2603003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Secondary">
                          <originalText>
                            <reference value="#HealthAgent2Type" />
                          </originalText>
                        </code>
                        <name>
                          <given partType="GIV">Lisa</given>
                          <family partType="FAM">Johnson</family>
                        </name>
                      </playingEntity>
                    </participantRole>
                  </participant>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.2" extension="2016-07-01" />
                  <id root="1D5A12F2-7637-4970-806D-CF08FBC66ECB" />
                  <code code="75785-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Second Alternative Health Agent">
                    <originalText>
                      <reference value="#HealthAgent3Type" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#HealthAgent3" />
                  </text>
                  <statusCode code="completed" />
                  <effectiveTime value="20211217174944-0600" />
                  <participant typeCode="CST">
                    <participantRole classCode="AGNT">
                      <id root="E4EBFD1D-8166-4577-9D4E-94E385B78B18" />
                      <code>
                        <originalText mediaType="text/plain" language="en-US">Daughter</originalText>
                      </code>
                      <telecom value="mailto:DebraSJ@example.com" use="HP" />
                      <playingEntity>
                        <code code="2603003" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="Secondary">
                          <originalText>
                            <reference value="#HealthAgent3Type" />
                          </originalText>
                        </code>
                        <name>
                          <given partType="GIV">Debra</given>
                          <family partType="FAM">Johnson</family>
                        </name>
                      </playingEntity>
                    </participantRole>
                  </participant>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.4" extension="2016-07-01" />
                  <id root="CB1071CB-5403-4226-9F98-1608A818936E" />
                  <code code="75786-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Powers Granted to Health Agent">
                    <originalText>
                      <reference value="#HCA_1_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#HCA_1" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#HCA_1_PL" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.4" extension="2016-07-01" />
                  <id root="1E350F55-334A-4114-B0FB-A65353CB10F1" />
                  <code code="75786-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Powers Granted to Health Agent" />
                  <text>
                    <reference value="#HCA_2" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#HCA_2_PL" />
                  </value>
                  <precondition>
                    <criterion>
                      <value xsi:type="ED">
                        <reference value="#HCA_2_C" />
                      </value>
                    </criterion>
                  </precondition>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.4" extension="2016-07-01" />
                  <id root="C0E16C64-6D83-4611-8C0C-19494F1CF36D" />
                  <code code="75786-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Powers Granted to Health Agent" />
                  <text>
                    <reference value="#HCA_3" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#HCA_3_PL" />
                  </value>
                  <precondition>
                    <criterion>
                      <value xsi:type="ED">
                        <reference value="#HCA_3_C" />
                      </value>
                    </criterion>
                  </precondition>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.4" extension="2016-07-01" />
                  <id root="C2168C2D-09F0-40AF-94F2-AD63E211F812" />
                  <code code="75786-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Powers Granted to Health Agent" />
                  <text>
                    <reference value="#HCA_4" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#HCA_4_PL" />
                  </value>
                </observation>
              </entry>
            </section>
          </component>
          <component>
            <section>
              <templateId root="2.16.840.1.113883.4.823.1.3.4" extension="2016-07-01" />
              <code code="81336-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="GPP certain health cond" />
              <title mediaType="text/plain" representation="TXT" language="en-US">Expression of Healthcare Treatment Wishes and Desires</title>
              <text>
                <content styleCode="Bold">My Advance Care Goals</content><br /><br />
            <content ID="GPP_eol_1">
                <content ID="GPP_eol_1_Q">
                    <content ID="GPP_eol_priorities_criteria">If I am so sick or seriously injured that I cannot express my own medical treatment preferences, and if I am not expected to live without additional treatment for my illness, disease, condition or injury, then I want my medical care team to know that these are the things that are most important to me:</content>
                </content>
            </content>
            <list listType="ordered" ID="GPP_eol_1_A" styleCode="Answer">
                    <item ID="GPP_eol_priorities_1-1">
                        Avoiding prolonged dependence on machines
                    </item>
                    <item ID="GPP_eol_priorities_1-2">
                        Not being a physical burden to my family
                    </item>
                    <item ID="GPP_eol_priorities_1-3">
                        Dying at home
                    </item>

            </list>
            <content ID="GPP_eol_2">
                <content ID="GPP_eol_2_Q">
                    Here are some thoughts that I would like for my medical care team and my healthcare agent(s) to know about the role that religion, faith or spirituality play in my life:
                </content><br />
                <content ID="GPP_eol_2_A" styleCode="Answer">
                    I am Catholic, please call Father Mark at Saint Catherine's on Main Street.
                </content>
            </content><br /><br />
            <content ID="GPP_eol_3">
                <content ID="GPP_eol_3_C">
                    If I am having significant pain or suffering,
                </content>
                <content ID="GPP_eol_3_I" styleCode="Answer">
                    I would like my doctors to consult a Supportive and Palliative Care Team to help treat my physical, emotional and spiritual discomfort, and to support my family.
                </content>
            </content><br /><br />
    <content styleCode="Bold">My Preferences in Specific Circumstances</content><br /><br />
    <content>In addition to the general advance care goals provided above, below are specific treatment preferences with respect to certain specific circumstances or situations.</content><br /><br />
        <content ID="GPP_eol_4">
            <content ID="GPP_eol_4_C">If my health ever deteriorates due to a terminal illness, and my doctors believe I will not be able to interact meaningfully with my family, friends, or surroundings,</content>
            
                <content ID="GPP_eol_4_I" styleCode="Answer">
                    I would like for them to keep trying life-sustaining treatments

                                                            until my healthcare agent decides it is time to stop and such treatments and let me die gently.                </content>
                                </content><br /><br />
        <content ID="GPP_eol_6">
            <content ID="GPP_eol_6_C">
                If I have a severe, irreversible brain injury or illness and can’t dress, feed, or bathe myself, or communicate my medical wishes, but doctors can keep me alive in this condition for a long period of time,
            </content>

                <content ID="GPP_eol_6_I" styleCode="Answer">
                    I would like for them to keep trying life-sustaining treatments

                                                            until my healthcare agent decides it is time to stop and such treatments and let me die gently.                </content>
                                </content><br /><br />
        <content ID="GPP_eol_8">
            <content ID="GPP_eol_8_Q">
                Although I understand that, depending on the situation and circumstances, medical personnel may not be able to follow my wishes, here are my general thoughts on cardiopulmonary resuscitation (CPR):
            </content><br />
            <content ID="GPP_eol_8_I" styleCode="Answer">
                I want my healthcare agent to decide for me.
            </content>
        </content><br /><br />
        <content styleCode="Bold">Other Instructions</content><br /><br />
            <content ID="GPP_eol_10">
                <content ID="GPP_eol_10_Q">If it were possible to choose, here is where I would like to spend my final days:</content>
                <content ID="GPP_eol_10_A" styleCode="Answer">
At home.I would like to receive hospice care at home if possible.                </content>
            </content>
            <br /><br />
            <content ID="GPP_eol_12">
                <content ID="GPP_eol_12_I">I understand that, in certain jurisdictions, if I have been diagnosed as pregnant and that diagnosis is known to my attending physician, medical treatment providers may refuse to follow my directives and provide life-sustaining treatment including artificially administered nutrition and hydration, as well as CPR and other resuscitation measures.</content>
            </content><br /><br /></text>
              <entry>
                <organizer classCode="CLUSTER" moodCode="EVN">
                  <templateId root="2.16.840.1.113883.4.823.1.4.7" extension="2016-07-01" />
                  <id root="56B44BAE-7C65-422D-9B84-343B433BFE63" />
                  <code code="81340-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Order of priorities">
                    <originalText>
                      <reference value="#GPP_eol_1" />
                    </originalText>
                  </code>
                  <statusCode code="completed" />
                  <precondition>
                    <criterion>
                      <value xsi:type="ED">
                        <reference value="#GPP_eol_priorities_criteria" />
                      </value>
                    </criterion>
                  </precondition>
                  <component typeCode="COMP"><sdtc:priorityNumber value="1" />
                    <observation classCode="OBS" moodCode="GOL">
                      <templateId root="2.16.840.1.113883.4.823.1.4.6" extension="2016-07-01" />
                      <id root="E2A88267-CA2F-42CF-820A-79A089358C98" />
                      <code code="81378-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Goals, preferences, and priorities under certain health conditions">
                        <originalText>
                          <reference value="#GPP_eol_1_Q" />
                        </originalText>
                      </code>
                      <text>
                        <reference value="#GPP_eol_priorities_1-1" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="ED">
                        <reference value="#GPP_eol_priorities_1-1" />
                      </value>
                    </observation>
                  </component>
                  <component typeCode="COMP"><sdtc:priorityNumber value="2" />
                    <observation classCode="OBS" moodCode="GOL">
                      <templateId root="2.16.840.1.113883.4.823.1.4.6" extension="2016-07-01" />
                      <id root="E27EBADB-E9C8-4FB6-878C-F091D3E35372" />
                      <code code="81378-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Goals, preferences, and priorities under certain health conditions">
                        <originalText>
                          <reference value="#GPP_eol_1_Q" />
                        </originalText>
                      </code>
                      <text>
                        <reference value="#GPP_eol_priorities_1-2" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="ED">
                        <reference value="#GPP_eol_priorities_1-2" />
                      </value>
                    </observation>
                  </component>
                  <component typeCode="COMP"><sdtc:priorityNumber value="3" />
                    <observation classCode="OBS" moodCode="GOL">
                      <templateId root="2.16.840.1.113883.4.823.1.4.6" extension="2016-07-01" />
                      <id root="26D1A9CE-642F-467D-9D6D-C71DA756C0F5" />
                      <code code="81378-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Goals, preferences, and priorities under certain health conditions">
                        <originalText>
                          <reference value="#GPP_eol_1_Q" />
                        </originalText>
                      </code>
                      <text>
                        <reference value="#GPP_eol_priorities_1-3" />
                      </text>
                      <statusCode code="completed" />
                      <value xsi:type="ED">
                        <reference value="#GPP_eol_priorities_1-3" />
                      </value>
                    </observation>
                  </component>
                </organizer>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="GOL">
                  <templateId root="2.16.840.1.113883.4.823.1.4.6" extension="2016-07-01" />
                  <id root="66B3A799-6052-4185-AF92-5683C3F755AA" />
                  <code code="75775-7" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Thoughts on role religion, faith, or spirituality play in your life">
                    <originalText>
                      <reference value="#GPP_eol_2_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#GPP_eol_2" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#GPP_eol_2_A" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.5" extension="2016-07-01" />
                  <id root="2F569238-A2B9-4487-9261-55299CDE593D" />
                  <code code="75776-5" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Preference on consulting a supportive and palliative care team to help treat physical, emotional, and spiritual discomfort and support family" />
                  <text>
                    <reference value="#GPP_eol_3" />
                  </text>
                  <statusCode code="completed" />
                  <entryRelationship typeCode="REFR">
                    <procedure classCode="PROC" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.14" extension="2014-06-09" />
                      <id root="42633866-1074-483C-984C-1DE6115BD9CC" />
                      <code nullFlavor="OTH" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                        <originalText>
                          <reference value="#GPP_eol_3_I" />
                        </originalText>
                      </code>
                      <statusCode code="completed" />
                    </procedure>
                  </entryRelationship>
                  <precondition>
                    <criterion>
                      <value xsi:type="ED">
                        <reference value="#GPP_eol_3_C" />
                      </value>
                    </criterion>
                  </precondition>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.5" extension="2016-07-01" />
                  <id root="AE07F065-71FC-4B2C-AD16-CD50514B1878" />
                  <code code="75777-3" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Thoughts on terminal illness" />
                  <text>
                    <reference value="#GPP_eol_4" />
                  </text>
                  <statusCode code="completed" />
                  <entryRelationship typeCode="REFR">
                    <procedure classCode="PROC" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.14" extension="2014-06-09" />
                      <id root="09DAE592-342C-4026-B094-51FF1CFFF4B7" />
                      <code nullFlavor="OTH" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                        <originalText>
                          <reference value="#GPP_eol_4_I" />
                        </originalText>
                      </code>
                      <statusCode code="completed" />
                    </procedure>
                  </entryRelationship>
                  <precondition>
                    <criterion>
                      <value xsi:type="ED">
                        <reference value="#GPP_eol_4_C" />
                      </value>
                    </criterion>
                  </precondition>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.5" extension="2016-07-01" />
                  <id root="480E8FED-7178-4137-B418-3805D816D75B" />
                  <code code="75778-1" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Thoughts on irreversible debilitating illness" />
                  <text>
                    <reference value="#GPP_eol_6" />
                  </text>
                  <statusCode code="completed" />
                  <entryRelationship typeCode="REFR">
                    <procedure classCode="PROC" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.14" extension="2014-06-09" />
                      <id root="7E2FF3BB-DF1D-4823-BF72-D34393095197" />
                      <code nullFlavor="OTH" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC">
                        <originalText>
                          <reference value="#GPP_eol_6_I" />
                        </originalText>
                      </code>
                      <statusCode code="completed" />
                    </procedure>
                  </entryRelationship>
                  <precondition>
                    <criterion>
                      <value xsi:type="ED">
                        <reference value="#GPP_eol_6_C" />
                      </value>
                    </criterion>
                  </precondition>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.5" extension="2016-07-01" />
                  <id root="D6AD3FCF-40B8-460D-8B31-3D55B3FD6B8B" />
                  <code code="75779-9" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Thoughts on CPR">
                    <originalText>
                      <reference value="#GPP_eol_8_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#GPP_eol_8" />
                  </text>
                  <statusCode code="completed" />
                  <entryRelationship typeCode="REFR">
                    <procedure classCode="PROC" moodCode="EVN">
                      <templateId root="2.16.840.1.113883.10.20.22.4.14" extension="2014-06-09" />
                      <id root="E48ED565-07E8-486B-8E0E-31464E5FE59C" />
                      <code code="89666000" codeSystem="2.16.840.1.113883.6.96" codeSystemName="SNOMED CT" displayName="CPR">
                        <originalText>
                          <reference value="#GPP_eol_8_I" />
                        </originalText>
                      </code>
                      <statusCode code="completed" />
                    </procedure>
                  </entryRelationship>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="GOL">
                  <templateId root="2.16.840.1.113883.4.823.1.4.6" extension="2016-07-01" />
                  <id root="B914A0EF-5F54-47F3-89D5-DC7705A0861D" />
                  <code code="75780-7" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Thoughts on Final Days">
                    <originalText>
                      <reference value="#GPP_eol_10_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#GPP_eol_10" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#GPP_eol_10_A" />
                  </value>
                </observation>
              </entry>
            </section>
          </component>
          <component>
            <section>
              <templateId root="2.16.840.1.113883.4.823.1.3.5" extension="2016-07-01" />
              <code code="81337-8" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="GPP upon Death" />
              <title mediaType="text/plain" representation="TXT" language="en-US">Goals, Preferences and Priorities upon Death</title>
              <text>
                <content ID="GPP_ud_1">
            <content ID="GPP_ud_1_Q" styleCode="Bold">Consent to Donate</content><br />
            <content ID="GPP_ud_1_A" styleCode="Answer">
I consent to donate all organs and tissues.                                                                                            </content>
        </content><br /><br />
        <content ID="GPP_ud_3">
            <content ID="GPP_ud_3_Q" styleCode="Bold">Autopsy</content><br />
                            <content ID="GPP_ud_3_I" styleCode="Answer">I want an autopsy</content>
                <content ID="GPP_ud_3_C" styleCode="Answer">only if there are questions about my death.</content>
                                            </content><br /><br />
        <content ID="GPP_ud_5">
            <content ID="GPP_ud_5_Q" styleCode="Bold">Here are my thoughts on funeral or burial plans:</content><br />
            <content ID="GPP_ud_5_A" styleCode="Answer">
                If I were to pass away:<br />
                Please call Jim Houston, my lawyer, for arrangements I have already made.
            </content>
        </content><br /><br /></text>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.12" extension="2016-07-01" />
                  <id root="E9C0C416-5B1A-4A09-A246-7108035D8BEE" />
                  <code code="75781-5" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Thoughts on Organ and Tissue Donation">
                    <originalText>
                      <reference value="#GPP_ud_1_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#GPP_ud_1" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#GPP_ud_1_A" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="E6F6E2E3-EA61-4272-A042-A9EAACD45861" />
                  <code code="75782-3" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Thoughts on Autopsy">
                    <originalText>
                      <reference value="#GPP_ud_3_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#GPP_ud_3" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#GPP_ud_3_I" />
                  </value>
                  <precondition>
                    <criterion>
                      <value xsi:type="ED">
                        <reference value="#GPP_ud_3_C" />
                      </value>
                    </criterion>
                  </precondition>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.5" extension="2016-07-01" />
                  <id root="22E8DC22-B0E5-4D73-8E19-8F0B2BF4C566" />
                  <code code="81356-8" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Death Arrangements">
                    <originalText>
                      <reference value="#GPP_ud_5_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#GPP_ud_5" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#GPP_ud_5_A" />
                  </value>
                </observation>
              </entry>
            </section>
          </component>
          <component>
            <section>
              <templateId root="2.16.840.1.113883.4.823.1.3.6" extension="2016-07-01" />
              <code code="81338-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="GPP for care experience" />
              <title mediaType="text/plain" representation="TXT" language="en-US">My Thoughts</title>
              <text>
                <content styleCode="Italic">
        MyDirectives® offers people a list of optional questions that can be answered by typing text in a text box or by uploading a video or audio file for each question. Only those questions answered by Betsy Smith-Johnson appear here. For a complete list of questions in My Thoughts, please visit www.MyDirectives.com.
    </content><br /><br />
    <content styleCode="Bold">
        In case I’m being cared for by a person(s) who doesn't know me very well, I’d like my following thoughts to be known.
    </content><br /><br />
        <content ID="ME_1">
            <content ID="ME_1_Q" styleCode="Bold">
                My likes / joys:
            </content>
            <content>
                Here are some examples of the things that I would like to have near me, music that I’d like to hear, and other details of my care that would help to keep me happy and relaxed:
            </content>
            <br />
            <content ID="ME_1_A" styleCode="Answer">
                I love the smell of lavender and the feeling of sunshine on my face.  I want my grandchildren to be allowed to visit me, either in person or virtually, if I am not feeling well because they bring me great joy and are the little loves of my life.
            </content>
        </content><br /><br />
        <content ID="ME_2">
            <content ID="ME_2_Q" styleCode="Bold">
                My dislikes / fears:
            </content>
            <content>
                Here is a list of things that I would like to avoid if at all possible, people that I don’t wish to see, and concerns I have about particular family members, pets, and so on:
            </content>
            <br />
            <content ID="ME_2_A" styleCode="Answer">
                I do not like my feet to be cold.
            </content>
        </content><br /><br />
        <content ID="ME_3">
            <content ID="ME_3_Q" styleCode="Bold">
                How to care for me:
            </content>
            <content>
                If I become incapacitated and cannot express myself, here is what I would like to tell my healthcare agent, family and friends about how I would like for them to care for me:
            </content>
            <br />
            <content ID="ME_3_A" styleCode="Answer">
                I want photos of my family where I can see them.
            </content>
        </content><br /><br />
        <content ID="ME_4">
            <content ID="ME_4_Q" styleCode="Bold">
                My religion:
            </content>
            <content>
                If I appear to be approaching the end of my life, here are some things that I would like for my caregivers to know about my faith and my religion.
            </content>
            <br />
            <content ID="ME_4_A" styleCode="Answer">
                Please call Father Mark if my condition warrants the services of a priest.  I would like Father Mark to be contacted about my condition and given permission to visit me and pray for my recovery.  He can work with my church to gather additional prayers for me and my family during a time I am ill.  I will need the support of my church community to ensure my family is supported by those I trust to ask for mercy on my behalf.
            </content>
        </content><br /><br />
        <content ID="ME_5">
            <content ID="ME_5_Q" styleCode="Bold">
                Please attempt to notify someone from my religion at the following phone number:
            </content>
            <content>
                If I have included one
            </content>
            <br />
            <content ID="ME_5_A" styleCode="Answer">
                Catholic
            </content>
        </content><br /><br />
        <content ID="ME_6">
            <content ID="ME_6_Q" styleCode="Bold">
                My unfinished business:
            </content>
            <content ID="ME_6_C">
                If it appears that I am approaching the end of my life, and I cannot communicate with persons around me, I would want my doctors and nurses, my family, and my friends to know about some unfinished business that I need to address:
            </content>
            <br />
            <content ID="ME_6_I" styleCode="Answer">
                I want my sister and I to talk again, and miss her.  I wish we hadn't disagreed all those years ago and regret the time it has cost us.  I'd like to see her face if I were very ill and needed the comfort of family at my side.
            </content>
        </content><br /><br />
        <content ID="ME_7">
            <content ID="ME_7_Q" styleCode="Bold">
                Laughter:
            </content>
            <content>
                These are some of my fondest memories from life that have always brought a smile to my face or made me laugh:
            </content>
            <br />
            <content ID="ME_7_A" styleCode="Answer">
                My dogs make me laugh when they play together, and my grandchildren make me laugh when they put on plays for me.  They bring me great joy.
            </content>
        </content><br /><br />
        <content ID="ME_8">
            <content ID="ME_8_Q" styleCode="Bold">
                Messages to people who matter to me:
            </content>
            <content>
                If I cannot communicate with persons around me, I want my healthcare agent, my family, and my friends to know the following:
            </content>
            <br />
            <content ID="ME_8_A" styleCode="Answer">
                Please let me end my life as I lived my life, on my own terms and with my own perspective guiding the way.
            </content>
        </content><br /><br />
        <content ID="ME_9">
            <content ID="ME_9_Q" styleCode="Bold">
                Information people may need to know:
            </content>
            <content ID="ME_9_C">
                Provide information about where others can find your important documents or information they may need.
            </content>
            <br />
            <content ID="ME_9_I" styleCode="Answer">
                I have purchased a funeral plat at Graceful Acres in Belmont NC and have life insurance policies filed with my lawyer that you should access if anything happens to me.
            </content>
        </content><br /><br /></text>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="A52B2B7F-2408-42AB-B519-B342D819173D" />
                  <code code="81360-0" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="My likes and joys">
                    <originalText>
                      <reference value="#ME_1_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#ME_1" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#ME_1_A" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="F73DD134-ED6C-4255-BC83-1FFE7FAE9D44" />
                  <code code="81362-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="My dislikes and fears">
                    <originalText>
                      <reference value="#ME_2_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#ME_2" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#ME_2_A" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="0FF4092F-EB78-4D16-BFCB-1F34DE0BEEFF" />
                  <code code="81380-8" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Goals, preferences, and priorities for care experience">
                    <originalText>
                      <reference value="#ME_3_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#ME_3" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#ME_3_A" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="GOL">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="62921CAC-CC7C-4734-AC7C-76788B5B2DDC" />
                  <code code="81364-2" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Religious beliefs">
                    <originalText>
                      <reference value="#ME_4_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#ME_4" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#ME_4_A" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="C831809D-FEA1-4E0B-A707-2A32A1C305D8" />
                  <code code="81365-9" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Religious affiliation contact to notify">
                    <originalText>
                      <reference value="#ME_5_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#ME_5" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#ME_5_A" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="GOL">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="652F79B3-3C7D-483D-867B-D4C18156C581" />
                  <code code="81366-7" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Unfinished business">
                    <originalText>
                      <reference value="#ME_6_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#ME_6" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#ME_6_I" />
                  </value>
                  <precondition>
                    <criterion>
                      <value xsi:type="ED">
                        <reference value="#ME_6_C" />
                      </value>
                    </criterion>
                  </precondition>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="INT">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="D59EADF3-B63A-4B23-B792-4196833F0F77" />
                  <code code="81361-8" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Things that make me laugh">
                    <originalText>
                      <reference value="#ME_7_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#ME_7" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#ME_7_A" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="GOL">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="1695405F-E78F-4B9C-9492-D4B9910CE6F4" />
                  <code code="81357-6" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Messages to be delivered after death">
                    <originalText>
                      <reference value="#ME_8_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#ME_8" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#ME_8_A" />
                  </value>
                </observation>
              </entry>
              <entry>
                <observation classCode="OBS" moodCode="GOL">
                  <templateId root="2.16.840.1.113883.4.823.1.4.10" extension="2016-07-01" />
                  <id root="F6E1F2DA-A05C-4DF0-A12A-74418193AF10" />
                  <code code="81382-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Statement of document creator">
                    <originalText>
                      <reference value="#ME_9_Q" />
                    </originalText>
                  </code>
                  <text>
                    <reference value="#ME_9" />
                  </text>
                  <statusCode code="completed" />
                  <value xsi:type="ED">
                    <reference value="#ME_9_A" />
                  </value>
                </observation>
              </entry>
            </section>
          </component>
          <component>
            <section>
              <templateId root="2.16.840.1.113883.4.823.1.3.7" extension="2016-07-01" />
              <code code="81339-4" codeSystem="2.16.840.1.113883.6.1" codeSystemName="LOINC" displayName="Witnesses and Notary" />
              <title mediaType="text/plain" representation="TXT" language="en-US">Witnesses and Notary</title>
              <text><paragraph>I am emotionally and mentally competent to make this uADD.  I understand the purpose and effect of this uADD, I agree with everything that is written in this uADD, and I have made this uADD knowingly, willingly and after careful deliberation.</paragraph>


<table>
    <thead>
        <tr styleCode="Bold">
            <td>Data Type</td>
            <td>Information</td>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Signature:</td>
            <td>Betsy Smith-Johnson</td>
        </tr>
        <tr>
            <td>Date:</td>
            <td>12/17/2021</td>
        </tr>
    </tbody>
</table><br />


<br />
<content styleCode="Bold">
    Statement of Witnesses
</content><br /><br />
<content>
    I declare that the person who signed this uADD, or who asked another to sign this uADD on his/her behalf, is the individual identified in the document, and he/she did so in my presence or otherwise provided satisfactory proof to me of his/her identity. I believe him/her to be of sound mind and at least 18 years of age. I personally witnessed him/her sign this document or ask the person indicated to do so, or I received proof of his/her identity that I believe is adequate, and I believe that he/she did so voluntarily.  By signing this document as a witness, I certify that I am:
</content><br /><br />
<list>
    <item>At least 18 years of age.</item>
    <item>Not related to the person signing this document by blood, marriage or adoption.</item>
    <item>Not a healthcare agent appointed by the person signing this document.</item>
    <item>Not directly financially responsible for that person’s healthcare.</item>
    <item>Not a healthcare provider directly serving the person at this time.</item>
    <item>Not an employee (other than a social worker or chaplain), officer, director, or partner of a healthcare provider (or any parent organization of such healthcare provider) directly serving the person at this time.</item>
    <item>Not aware that I am entitled to or have a claim against the person’s estate.</item>
</list><br /><br />

    <table>
        <thead>
            <tr styleCode="Bold">
                <td>Data Type</td>
                <td>Information</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Witness Number:</td>
                <td></td>
            </tr>
            <tr>
                <td>Signature:</td>
                <td></td>
            </tr>
            <tr>
                <td>Date:</td>
                <td></td>
            </tr>
        </tbody>
    </table><br />
        <br /><br /><br /></text>
            </section>
      </component>
    </structuredBody>
  </component>
</ClinicalDocument>"
}